
/Users/erik/Documents/GitHub/muon-power-optimization/target/6.3.0/msom/muon-power-optimization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f9000  085f9000  00009000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000008c  085f9018  085f9018  00009018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f9638  085f90a8  00009638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000069b8  023f9640  085f90b0  00009640  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000074  1007adf8  085ffa68  0001adf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000190  1007ae6c  1007ae6c  0002ae6c  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007d000  1007d000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ffadc  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000004d8  085ffae0  085ffae0  0001fae0  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001fae0  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00276d75  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001b2bc  00000000  00000000  00296d75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0009f973  00000000  00000000  002b2031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004178  00000000  00000000  003519a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00019960  00000000  00000000  00355b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002d1c9  00000000  00000000  0036f47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00066020  00000000  00000000  0039c645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00190835  00000000  00000000  00402665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000c528  00000000  00000000  00592e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f9018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f9018:	4813      	ldr	r0, [pc, #76]	; (85f9068 <module_user_pre_init+0x50>)
 85f901a:	4914      	ldr	r1, [pc, #80]	; (85f906c <module_user_pre_init+0x54>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f901c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f901e:	4288      	cmp	r0, r1
 85f9020:	d005      	beq.n	85f902e <module_user_pre_init+0x16>
 85f9022:	4a13      	ldr	r2, [pc, #76]	; (85f9070 <module_user_pre_init+0x58>)
 85f9024:	4282      	cmp	r2, r0
 85f9026:	d002      	beq.n	85f902e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f9028:	4b12      	ldr	r3, [pc, #72]	; (85f9074 <module_user_pre_init+0x5c>)
 85f902a:	1a12      	subs	r2, r2, r0
 85f902c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f902e:	4812      	ldr	r0, [pc, #72]	; (85f9078 <module_user_pre_init+0x60>)
 85f9030:	4a12      	ldr	r2, [pc, #72]	; (85f907c <module_user_pre_init+0x64>)
 85f9032:	2100      	movs	r1, #0
 85f9034:	4b12      	ldr	r3, [pc, #72]	; (85f9080 <module_user_pre_init+0x68>)
 85f9036:	1a12      	subs	r2, r2, r0
 85f9038:	4798      	blx	r3

    // Copy .dynalib
    if ( (&link_dynalib_start != &link_dynalib_flash_start) && (link_dynalib_size != 0))
 85f903a:	4812      	ldr	r0, [pc, #72]	; (85f9084 <module_user_pre_init+0x6c>)
 85f903c:	4912      	ldr	r1, [pc, #72]	; (85f9088 <module_user_pre_init+0x70>)
 85f903e:	4288      	cmp	r0, r1
 85f9040:	d005      	beq.n	85f904e <module_user_pre_init+0x36>
 85f9042:	4a12      	ldr	r2, [pc, #72]	; (85f908c <module_user_pre_init+0x74>)
 85f9044:	4282      	cmp	r2, r0
 85f9046:	d002      	beq.n	85f904e <module_user_pre_init+0x36>
    {
        _memcpy(&link_dynalib_start, &link_dynalib_flash_start, link_dynalib_size);
 85f9048:	4b0a      	ldr	r3, [pc, #40]	; (85f9074 <module_user_pre_init+0x5c>)
 85f904a:	1a12      	subs	r2, r2, r0
 85f904c:	4798      	blx	r3
    }

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f904e:	4810      	ldr	r0, [pc, #64]	; (85f9090 <module_user_pre_init+0x78>)
 85f9050:	4910      	ldr	r1, [pc, #64]	; (85f9094 <module_user_pre_init+0x7c>)
 85f9052:	4288      	cmp	r0, r1
 85f9054:	d005      	beq.n	85f9062 <module_user_pre_init+0x4a>
 85f9056:	4a10      	ldr	r2, [pc, #64]	; (85f9098 <module_user_pre_init+0x80>)
 85f9058:	4282      	cmp	r2, r0
 85f905a:	d002      	beq.n	85f9062 <module_user_pre_init+0x4a>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f905c:	4b05      	ldr	r3, [pc, #20]	; (85f9074 <module_user_pre_init+0x5c>)
 85f905e:	1a12      	subs	r2, r2, r0
 85f9060:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f9062:	4801      	ldr	r0, [pc, #4]	; (85f9068 <module_user_pre_init+0x50>)
 85f9064:	bd08      	pop	{r3, pc}
 85f9066:	bf00      	nop
 85f9068:	1007adf8 	.word	0x1007adf8
 85f906c:	085ffa68 	.word	0x085ffa68
 85f9070:	1007ae6c 	.word	0x1007ae6c
 85f9074:	10110d2d 	.word	0x10110d2d
 85f9078:	1007ae6c 	.word	0x1007ae6c
 85f907c:	1007affc 	.word	0x1007affc
 85f9080:	10110ea1 	.word	0x10110ea1
 85f9084:	023f9638 	.word	0x023f9638
 85f9088:	085f90a8 	.word	0x085f90a8
 85f908c:	023f9640 	.word	0x023f9640
 85f9090:	023f9640 	.word	0x023f9640
 85f9094:	085f90b0 	.word	0x085f90b0
 85f9098:	023ffff8 	.word	0x023ffff8

085f909c <dynalib_preinit>:
 85f909c:	085f9019 00000000                       .._.....

Disassembly of section .psram_text:

023f9640 <__aeabi_drsub>:
 23f9640:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f9644:	e002      	b.n	23f964c <__adddf3>
 23f9646:	bf00      	nop

023f9648 <__aeabi_dsub>:
 23f9648:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f964c <__adddf3>:
 23f964c:	b530      	push	{r4, r5, lr}
 23f964e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f9652:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f9656:	ea94 0f05 	teq	r4, r5
 23f965a:	bf08      	it	eq
 23f965c:	ea90 0f02 	teqeq	r0, r2
 23f9660:	bf1f      	itttt	ne
 23f9662:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f9666:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f966a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f966e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f9672:	f000 80e2 	beq.w	23f983a <__adddf3+0x1ee>
 23f9676:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f967a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f967e:	bfb8      	it	lt
 23f9680:	426d      	neglt	r5, r5
 23f9682:	dd0c      	ble.n	23f969e <__adddf3+0x52>
 23f9684:	442c      	add	r4, r5
 23f9686:	ea80 0202 	eor.w	r2, r0, r2
 23f968a:	ea81 0303 	eor.w	r3, r1, r3
 23f968e:	ea82 0000 	eor.w	r0, r2, r0
 23f9692:	ea83 0101 	eor.w	r1, r3, r1
 23f9696:	ea80 0202 	eor.w	r2, r0, r2
 23f969a:	ea81 0303 	eor.w	r3, r1, r3
 23f969e:	2d36      	cmp	r5, #54	; 0x36
 23f96a0:	bf88      	it	hi
 23f96a2:	bd30      	pophi	{r4, r5, pc}
 23f96a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f96a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f96ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f96b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f96b4:	d002      	beq.n	23f96bc <__adddf3+0x70>
 23f96b6:	4240      	negs	r0, r0
 23f96b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f96bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f96c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f96c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f96c8:	d002      	beq.n	23f96d0 <__adddf3+0x84>
 23f96ca:	4252      	negs	r2, r2
 23f96cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f96d0:	ea94 0f05 	teq	r4, r5
 23f96d4:	f000 80a7 	beq.w	23f9826 <__adddf3+0x1da>
 23f96d8:	f1a4 0401 	sub.w	r4, r4, #1
 23f96dc:	f1d5 0e20 	rsbs	lr, r5, #32
 23f96e0:	db0d      	blt.n	23f96fe <__adddf3+0xb2>
 23f96e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f96e6:	fa22 f205 	lsr.w	r2, r2, r5
 23f96ea:	1880      	adds	r0, r0, r2
 23f96ec:	f141 0100 	adc.w	r1, r1, #0
 23f96f0:	fa03 f20e 	lsl.w	r2, r3, lr
 23f96f4:	1880      	adds	r0, r0, r2
 23f96f6:	fa43 f305 	asr.w	r3, r3, r5
 23f96fa:	4159      	adcs	r1, r3
 23f96fc:	e00e      	b.n	23f971c <__adddf3+0xd0>
 23f96fe:	f1a5 0520 	sub.w	r5, r5, #32
 23f9702:	f10e 0e20 	add.w	lr, lr, #32
 23f9706:	2a01      	cmp	r2, #1
 23f9708:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f970c:	bf28      	it	cs
 23f970e:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f9712:	fa43 f305 	asr.w	r3, r3, r5
 23f9716:	18c0      	adds	r0, r0, r3
 23f9718:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f971c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9720:	d507      	bpl.n	23f9732 <__adddf3+0xe6>
 23f9722:	f04f 0e00 	mov.w	lr, #0
 23f9726:	f1dc 0c00 	rsbs	ip, ip, #0
 23f972a:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f972e:	eb6e 0101 	sbc.w	r1, lr, r1
 23f9732:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f9736:	d31b      	bcc.n	23f9770 <__adddf3+0x124>
 23f9738:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f973c:	d30c      	bcc.n	23f9758 <__adddf3+0x10c>
 23f973e:	0849      	lsrs	r1, r1, #1
 23f9740:	ea5f 0030 	movs.w	r0, r0, rrx
 23f9744:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f9748:	f104 0401 	add.w	r4, r4, #1
 23f974c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f9750:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f9754:	f080 809a 	bcs.w	23f988c <__adddf3+0x240>
 23f9758:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f975c:	bf08      	it	eq
 23f975e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f9762:	f150 0000 	adcs.w	r0, r0, #0
 23f9766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f976a:	ea41 0105 	orr.w	r1, r1, r5
 23f976e:	bd30      	pop	{r4, r5, pc}
 23f9770:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f9774:	4140      	adcs	r0, r0
 23f9776:	eb41 0101 	adc.w	r1, r1, r1
 23f977a:	3c01      	subs	r4, #1
 23f977c:	bf28      	it	cs
 23f977e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f9782:	d2e9      	bcs.n	23f9758 <__adddf3+0x10c>
 23f9784:	f091 0f00 	teq	r1, #0
 23f9788:	bf04      	itt	eq
 23f978a:	4601      	moveq	r1, r0
 23f978c:	2000      	moveq	r0, #0
 23f978e:	fab1 f381 	clz	r3, r1
 23f9792:	bf08      	it	eq
 23f9794:	3320      	addeq	r3, #32
 23f9796:	f1a3 030b 	sub.w	r3, r3, #11
 23f979a:	f1b3 0220 	subs.w	r2, r3, #32
 23f979e:	da0c      	bge.n	23f97ba <__adddf3+0x16e>
 23f97a0:	320c      	adds	r2, #12
 23f97a2:	dd08      	ble.n	23f97b6 <__adddf3+0x16a>
 23f97a4:	f102 0c14 	add.w	ip, r2, #20
 23f97a8:	f1c2 020c 	rsb	r2, r2, #12
 23f97ac:	fa01 f00c 	lsl.w	r0, r1, ip
 23f97b0:	fa21 f102 	lsr.w	r1, r1, r2
 23f97b4:	e00c      	b.n	23f97d0 <__adddf3+0x184>
 23f97b6:	f102 0214 	add.w	r2, r2, #20
 23f97ba:	bfd8      	it	le
 23f97bc:	f1c2 0c20 	rsble	ip, r2, #32
 23f97c0:	fa01 f102 	lsl.w	r1, r1, r2
 23f97c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f97c8:	bfdc      	itt	le
 23f97ca:	ea41 010c 	orrle.w	r1, r1, ip
 23f97ce:	4090      	lslle	r0, r2
 23f97d0:	1ae4      	subs	r4, r4, r3
 23f97d2:	bfa2      	ittt	ge
 23f97d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f97d8:	4329      	orrge	r1, r5
 23f97da:	bd30      	popge	{r4, r5, pc}
 23f97dc:	ea6f 0404 	mvn.w	r4, r4
 23f97e0:	3c1f      	subs	r4, #31
 23f97e2:	da1c      	bge.n	23f981e <__adddf3+0x1d2>
 23f97e4:	340c      	adds	r4, #12
 23f97e6:	dc0e      	bgt.n	23f9806 <__adddf3+0x1ba>
 23f97e8:	f104 0414 	add.w	r4, r4, #20
 23f97ec:	f1c4 0220 	rsb	r2, r4, #32
 23f97f0:	fa20 f004 	lsr.w	r0, r0, r4
 23f97f4:	fa01 f302 	lsl.w	r3, r1, r2
 23f97f8:	ea40 0003 	orr.w	r0, r0, r3
 23f97fc:	fa21 f304 	lsr.w	r3, r1, r4
 23f9800:	ea45 0103 	orr.w	r1, r5, r3
 23f9804:	bd30      	pop	{r4, r5, pc}
 23f9806:	f1c4 040c 	rsb	r4, r4, #12
 23f980a:	f1c4 0220 	rsb	r2, r4, #32
 23f980e:	fa20 f002 	lsr.w	r0, r0, r2
 23f9812:	fa01 f304 	lsl.w	r3, r1, r4
 23f9816:	ea40 0003 	orr.w	r0, r0, r3
 23f981a:	4629      	mov	r1, r5
 23f981c:	bd30      	pop	{r4, r5, pc}
 23f981e:	fa21 f004 	lsr.w	r0, r1, r4
 23f9822:	4629      	mov	r1, r5
 23f9824:	bd30      	pop	{r4, r5, pc}
 23f9826:	f094 0f00 	teq	r4, #0
 23f982a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f982e:	bf06      	itte	eq
 23f9830:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f9834:	3401      	addeq	r4, #1
 23f9836:	3d01      	subne	r5, #1
 23f9838:	e74e      	b.n	23f96d8 <__adddf3+0x8c>
 23f983a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f983e:	bf18      	it	ne
 23f9840:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f9844:	d029      	beq.n	23f989a <__adddf3+0x24e>
 23f9846:	ea94 0f05 	teq	r4, r5
 23f984a:	bf08      	it	eq
 23f984c:	ea90 0f02 	teqeq	r0, r2
 23f9850:	d005      	beq.n	23f985e <__adddf3+0x212>
 23f9852:	ea54 0c00 	orrs.w	ip, r4, r0
 23f9856:	bf04      	itt	eq
 23f9858:	4619      	moveq	r1, r3
 23f985a:	4610      	moveq	r0, r2
 23f985c:	bd30      	pop	{r4, r5, pc}
 23f985e:	ea91 0f03 	teq	r1, r3
 23f9862:	bf1e      	ittt	ne
 23f9864:	2100      	movne	r1, #0
 23f9866:	2000      	movne	r0, #0
 23f9868:	bd30      	popne	{r4, r5, pc}
 23f986a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f986e:	d105      	bne.n	23f987c <__adddf3+0x230>
 23f9870:	0040      	lsls	r0, r0, #1
 23f9872:	4149      	adcs	r1, r1
 23f9874:	bf28      	it	cs
 23f9876:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f987a:	bd30      	pop	{r4, r5, pc}
 23f987c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f9880:	bf3c      	itt	cc
 23f9882:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f9886:	bd30      	popcc	{r4, r5, pc}
 23f9888:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f988c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f9890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f9894:	f04f 0000 	mov.w	r0, #0
 23f9898:	bd30      	pop	{r4, r5, pc}
 23f989a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f989e:	bf1a      	itte	ne
 23f98a0:	4619      	movne	r1, r3
 23f98a2:	4610      	movne	r0, r2
 23f98a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f98a8:	bf1c      	itt	ne
 23f98aa:	460b      	movne	r3, r1
 23f98ac:	4602      	movne	r2, r0
 23f98ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f98b2:	bf06      	itte	eq
 23f98b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f98b8:	ea91 0f03 	teqeq	r1, r3
 23f98bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f98c0:	bd30      	pop	{r4, r5, pc}
 23f98c2:	bf00      	nop

023f98c4 <__aeabi_ui2d>:
 23f98c4:	f090 0f00 	teq	r0, #0
 23f98c8:	bf04      	itt	eq
 23f98ca:	2100      	moveq	r1, #0
 23f98cc:	4770      	bxeq	lr
 23f98ce:	b530      	push	{r4, r5, lr}
 23f98d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f98d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f98d8:	f04f 0500 	mov.w	r5, #0
 23f98dc:	f04f 0100 	mov.w	r1, #0
 23f98e0:	e750      	b.n	23f9784 <__adddf3+0x138>
 23f98e2:	bf00      	nop

023f98e4 <__aeabi_i2d>:
 23f98e4:	f090 0f00 	teq	r0, #0
 23f98e8:	bf04      	itt	eq
 23f98ea:	2100      	moveq	r1, #0
 23f98ec:	4770      	bxeq	lr
 23f98ee:	b530      	push	{r4, r5, lr}
 23f98f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f98f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f98f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f98fc:	bf48      	it	mi
 23f98fe:	4240      	negmi	r0, r0
 23f9900:	f04f 0100 	mov.w	r1, #0
 23f9904:	e73e      	b.n	23f9784 <__adddf3+0x138>
 23f9906:	bf00      	nop

023f9908 <__aeabi_f2d>:
 23f9908:	0042      	lsls	r2, r0, #1
 23f990a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f990e:	ea4f 0131 	mov.w	r1, r1, rrx
 23f9912:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f9916:	bf1f      	itttt	ne
 23f9918:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f991c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f9920:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f9924:	4770      	bxne	lr
 23f9926:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f992a:	bf08      	it	eq
 23f992c:	4770      	bxeq	lr
 23f992e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f9932:	bf04      	itt	eq
 23f9934:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f9938:	4770      	bxeq	lr
 23f993a:	b530      	push	{r4, r5, lr}
 23f993c:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f9940:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f9944:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f9948:	e71c      	b.n	23f9784 <__adddf3+0x138>
 23f994a:	bf00      	nop

023f994c <__aeabi_ul2d>:
 23f994c:	ea50 0201 	orrs.w	r2, r0, r1
 23f9950:	bf08      	it	eq
 23f9952:	4770      	bxeq	lr
 23f9954:	b530      	push	{r4, r5, lr}
 23f9956:	f04f 0500 	mov.w	r5, #0
 23f995a:	e00a      	b.n	23f9972 <__aeabi_l2d+0x16>

023f995c <__aeabi_l2d>:
 23f995c:	ea50 0201 	orrs.w	r2, r0, r1
 23f9960:	bf08      	it	eq
 23f9962:	4770      	bxeq	lr
 23f9964:	b530      	push	{r4, r5, lr}
 23f9966:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f996a:	d502      	bpl.n	23f9972 <__aeabi_l2d+0x16>
 23f996c:	4240      	negs	r0, r0
 23f996e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f9972:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f9976:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f997a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f997e:	f43f aed8 	beq.w	23f9732 <__adddf3+0xe6>
 23f9982:	f04f 0203 	mov.w	r2, #3
 23f9986:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f998a:	bf18      	it	ne
 23f998c:	3203      	addne	r2, #3
 23f998e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f9992:	bf18      	it	ne
 23f9994:	3203      	addne	r2, #3
 23f9996:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f999a:	f1c2 0320 	rsb	r3, r2, #32
 23f999e:	fa00 fc03 	lsl.w	ip, r0, r3
 23f99a2:	fa20 f002 	lsr.w	r0, r0, r2
 23f99a6:	fa01 fe03 	lsl.w	lr, r1, r3
 23f99aa:	ea40 000e 	orr.w	r0, r0, lr
 23f99ae:	fa21 f102 	lsr.w	r1, r1, r2
 23f99b2:	4414      	add	r4, r2
 23f99b4:	e6bd      	b.n	23f9732 <__adddf3+0xe6>
 23f99b6:	bf00      	nop

023f99b8 <__gedf2>:
 23f99b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f99bc:	e006      	b.n	23f99cc <__cmpdf2+0x4>
 23f99be:	bf00      	nop

023f99c0 <__ledf2>:
 23f99c0:	f04f 0c01 	mov.w	ip, #1
 23f99c4:	e002      	b.n	23f99cc <__cmpdf2+0x4>
 23f99c6:	bf00      	nop

023f99c8 <__cmpdf2>:
 23f99c8:	f04f 0c01 	mov.w	ip, #1
 23f99cc:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f99d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f99d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f99d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f99dc:	bf18      	it	ne
 23f99de:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f99e2:	d01b      	beq.n	23f9a1c <__cmpdf2+0x54>
 23f99e4:	b001      	add	sp, #4
 23f99e6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f99ea:	bf0c      	ite	eq
 23f99ec:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f99f0:	ea91 0f03 	teqne	r1, r3
 23f99f4:	bf02      	ittt	eq
 23f99f6:	ea90 0f02 	teqeq	r0, r2
 23f99fa:	2000      	moveq	r0, #0
 23f99fc:	4770      	bxeq	lr
 23f99fe:	f110 0f00 	cmn.w	r0, #0
 23f9a02:	ea91 0f03 	teq	r1, r3
 23f9a06:	bf58      	it	pl
 23f9a08:	4299      	cmppl	r1, r3
 23f9a0a:	bf08      	it	eq
 23f9a0c:	4290      	cmpeq	r0, r2
 23f9a0e:	bf2c      	ite	cs
 23f9a10:	17d8      	asrcs	r0, r3, #31
 23f9a12:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f9a16:	f040 0001 	orr.w	r0, r0, #1
 23f9a1a:	4770      	bx	lr
 23f9a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f9a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9a24:	d102      	bne.n	23f9a2c <__cmpdf2+0x64>
 23f9a26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f9a2a:	d107      	bne.n	23f9a3c <__cmpdf2+0x74>
 23f9a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f9a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9a34:	d1d6      	bne.n	23f99e4 <__cmpdf2+0x1c>
 23f9a36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f9a3a:	d0d3      	beq.n	23f99e4 <__cmpdf2+0x1c>
 23f9a3c:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f9a40:	4770      	bx	lr
 23f9a42:	bf00      	nop

023f9a44 <__aeabi_cdrcmple>:
 23f9a44:	4684      	mov	ip, r0
 23f9a46:	4610      	mov	r0, r2
 23f9a48:	4662      	mov	r2, ip
 23f9a4a:	468c      	mov	ip, r1
 23f9a4c:	4619      	mov	r1, r3
 23f9a4e:	4663      	mov	r3, ip
 23f9a50:	e000      	b.n	23f9a54 <__aeabi_cdcmpeq>
 23f9a52:	bf00      	nop

023f9a54 <__aeabi_cdcmpeq>:
 23f9a54:	b501      	push	{r0, lr}
 23f9a56:	f7ff ffb7 	bl	23f99c8 <__cmpdf2>
 23f9a5a:	2800      	cmp	r0, #0
 23f9a5c:	bf48      	it	mi
 23f9a5e:	f110 0f00 	cmnmi.w	r0, #0
 23f9a62:	bd01      	pop	{r0, pc}

023f9a64 <__aeabi_dcmpeq>:
 23f9a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9a68:	f7ff fff4 	bl	23f9a54 <__aeabi_cdcmpeq>
 23f9a6c:	bf0c      	ite	eq
 23f9a6e:	2001      	moveq	r0, #1
 23f9a70:	2000      	movne	r0, #0
 23f9a72:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9a76:	bf00      	nop

023f9a78 <__aeabi_dcmplt>:
 23f9a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9a7c:	f7ff ffea 	bl	23f9a54 <__aeabi_cdcmpeq>
 23f9a80:	bf34      	ite	cc
 23f9a82:	2001      	movcc	r0, #1
 23f9a84:	2000      	movcs	r0, #0
 23f9a86:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9a8a:	bf00      	nop

023f9a8c <__aeabi_dcmple>:
 23f9a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9a90:	f7ff ffe0 	bl	23f9a54 <__aeabi_cdcmpeq>
 23f9a94:	bf94      	ite	ls
 23f9a96:	2001      	movls	r0, #1
 23f9a98:	2000      	movhi	r0, #0
 23f9a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9a9e:	bf00      	nop

023f9aa0 <__aeabi_dcmpge>:
 23f9aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9aa4:	f7ff ffce 	bl	23f9a44 <__aeabi_cdrcmple>
 23f9aa8:	bf94      	ite	ls
 23f9aaa:	2001      	movls	r0, #1
 23f9aac:	2000      	movhi	r0, #0
 23f9aae:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9ab2:	bf00      	nop

023f9ab4 <__aeabi_dcmpgt>:
 23f9ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9ab8:	f7ff ffc4 	bl	23f9a44 <__aeabi_cdrcmple>
 23f9abc:	bf34      	ite	cc
 23f9abe:	2001      	movcc	r0, #1
 23f9ac0:	2000      	movcs	r0, #0
 23f9ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9ac6:	bf00      	nop

023f9ac8 <__aeabi_dcmpun>:
 23f9ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f9acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9ad0:	d102      	bne.n	23f9ad8 <__aeabi_dcmpun+0x10>
 23f9ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f9ad6:	d10a      	bne.n	23f9aee <__aeabi_dcmpun+0x26>
 23f9ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f9adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9ae0:	d102      	bne.n	23f9ae8 <__aeabi_dcmpun+0x20>
 23f9ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f9ae6:	d102      	bne.n	23f9aee <__aeabi_dcmpun+0x26>
 23f9ae8:	f04f 0000 	mov.w	r0, #0
 23f9aec:	4770      	bx	lr
 23f9aee:	f04f 0001 	mov.w	r0, #1
 23f9af2:	4770      	bx	lr

023f9af4 <__aeabi_d2f>:
 23f9af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f9af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f9afc:	bf24      	itt	cs
 23f9afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f9b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f9b06:	d90d      	bls.n	23f9b24 <__aeabi_d2f+0x30>
 23f9b08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f9b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f9b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f9b14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f9b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f9b1c:	bf08      	it	eq
 23f9b1e:	f020 0001 	biceq.w	r0, r0, #1
 23f9b22:	4770      	bx	lr
 23f9b24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f9b28:	d121      	bne.n	23f9b6e <__aeabi_d2f+0x7a>
 23f9b2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f9b2e:	bfbc      	itt	lt
 23f9b30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f9b34:	4770      	bxlt	lr
 23f9b36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f9b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f9b3e:	f1c2 0218 	rsb	r2, r2, #24
 23f9b42:	f1c2 0c20 	rsb	ip, r2, #32
 23f9b46:	fa10 f30c 	lsls.w	r3, r0, ip
 23f9b4a:	fa20 f002 	lsr.w	r0, r0, r2
 23f9b4e:	bf18      	it	ne
 23f9b50:	f040 0001 	orrne.w	r0, r0, #1
 23f9b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f9b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f9b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f9b60:	ea40 000c 	orr.w	r0, r0, ip
 23f9b64:	fa23 f302 	lsr.w	r3, r3, r2
 23f9b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f9b6c:	e7cc      	b.n	23f9b08 <__aeabi_d2f+0x14>
 23f9b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f9b72:	d107      	bne.n	23f9b84 <__aeabi_d2f+0x90>
 23f9b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f9b78:	bf1e      	ittt	ne
 23f9b7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f9b7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f9b82:	4770      	bxne	lr
 23f9b84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f9b88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f9b8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f9b90:	4770      	bx	lr
 23f9b92:	bf00      	nop

023f9b94 <strcmp>:
 23f9b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 23f9b98:	f811 3b01 	ldrb.w	r3, [r1], #1
 23f9b9c:	2a01      	cmp	r2, #1
 23f9b9e:	bf28      	it	cs
 23f9ba0:	429a      	cmpcs	r2, r3
 23f9ba2:	d0f7      	beq.n	23f9b94 <strcmp>
 23f9ba4:	1ad0      	subs	r0, r2, r3
 23f9ba6:	4770      	bx	lr

023f9ba8 <strlen>:
 23f9ba8:	4603      	mov	r3, r0
 23f9baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f9bae:	2a00      	cmp	r2, #0
 23f9bb0:	d1fb      	bne.n	23f9baa <strlen+0x2>
 23f9bb2:	1a18      	subs	r0, r3, r0
 23f9bb4:	3801      	subs	r0, #1
 23f9bb6:	4770      	bx	lr

023f9bb8 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f9bb8:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f9bba:	f005 f9e3 	bl	23fef84 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f9bbe:	2500      	movs	r5, #0
 23f9bc0:	4e05      	ldr	r6, [pc, #20]	; (23f9bd8 <module_user_init+0x20>)
 23f9bc2:	4c06      	ldr	r4, [pc, #24]	; (23f9bdc <module_user_init+0x24>)
 23f9bc4:	1ba4      	subs	r4, r4, r6
 23f9bc6:	08a4      	lsrs	r4, r4, #2
 23f9bc8:	42ac      	cmp	r4, r5
 23f9bca:	d100      	bne.n	23f9bce <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f9bcc:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f9bce:	f856 3b04 	ldr.w	r3, [r6], #4
 23f9bd2:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f9bd4:	3501      	adds	r5, #1
 23f9bd6:	e7f7      	b.n	23f9bc8 <module_user_init+0x10>
 23f9bd8:	023fffc8 	.word	0x023fffc8
 23f9bdc:	023ffff8 	.word	0x023ffff8

023f9be0 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f9be0:	f000 ba18 	b.w	23fa014 <setup>

023f9be4 <module_user_loop>:
}

void module_user_loop() {
 23f9be4:	b508      	push	{r3, lr}
    loop();
 23f9be6:	f000 fd25 	bl	23fa634 <loop>
    _post_loop();
}
 23f9bea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f9bee:	f005 b981 	b.w	23feef4 <_post_loop>

023f9bf2 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23f9bf2:	f001 ba0b 	b.w	23fb00c <malloc>

023f9bf6 <_Znaj>:
 23f9bf6:	f001 ba09 	b.w	23fb00c <malloc>

023f9bfa <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f9bfa:	f001 ba15 	b.w	23fb028 <free>
	...

023f9c00 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f9c00:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f9c02:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f9c04:	4a02      	ldr	r2, [pc, #8]	; (23f9c10 <__cxa_pure_virtual+0x10>)
 23f9c06:	4903      	ldr	r1, [pc, #12]	; (23f9c14 <__cxa_pure_virtual+0x14>)
 23f9c08:	f001 f808 	bl	23fac1c <panic_>
  while (1);
 23f9c0c:	e7fe      	b.n	23f9c0c <__cxa_pure_virtual+0xc>
 23f9c0e:	bf00      	nop
 23f9c10:	023fa929 	.word	0x023fa929
 23f9c14:	023ff550 	.word	0x023ff550

023f9c18 <__register_exitproc>:
int __cxa_atexit(void (*f)(void *), void *p, void *d) {
    return 0;
}

void __register_exitproc(int type, void (*fn)(void), void* arg, void* d) {
}
 23f9c18:	4770      	bx	lr

023f9c1a <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
 23f9c1a:	4770      	bx	lr

023f9c1c <_Z21firmwareUpdateHandleryi>:
  }
}

// function for handling the firmware update
void firmwareUpdateHandler(system_event_t event, int param) {
    switch(param) {
 23f9c1c:	b132      	cbz	r2, 23f9c2c <_Z21firmwareUpdateHandleryi+0x10>
 23f9c1e:	2a01      	cmp	r2, #1
 23f9c20:	d001      	beq.n	23f9c26 <_Z21firmwareUpdateHandleryi+0xa>
 23f9c22:	3201      	adds	r2, #1
 23f9c24:	d105      	bne.n	23f9c32 <_Z21firmwareUpdateHandleryi+0x16>
            firmwareUpdateInProgress = true;
            break;

        case firmware_update_complete:
        case (int)firmware_update_failed:
            firmwareUpdateInProgress = false;
 23f9c26:	2200      	movs	r2, #0
 23f9c28:	4b02      	ldr	r3, [pc, #8]	; (23f9c34 <_Z21firmwareUpdateHandleryi+0x18>)
 23f9c2a:	e001      	b.n	23f9c30 <_Z21firmwareUpdateHandleryi+0x14>
            firmwareUpdateInProgress = true;
 23f9c2c:	2201      	movs	r2, #1
 23f9c2e:	4b01      	ldr	r3, [pc, #4]	; (23f9c34 <_Z21firmwareUpdateHandleryi+0x18>)
            firmwareUpdateInProgress = false;
 23f9c30:	701a      	strb	r2, [r3, #0]
            break;
    }
 23f9c32:	4770      	bx	lr
 23f9c34:	1007ae8c 	.word	0x1007ae8c

023f9c38 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESL_SO_>:
		std::forward<_Variants>(__vars))...);
	else // for std::visit<R> use INVOKE<R>
	  return std::__invoke_r<_Result_type>(
	      std::forward<_Visitor>(__visitor),
	      __variant::__get<__indices>(std::forward<_Variants>(__vars))...);
      }
 23f9c38:	4770      	bx	lr

023f9c3a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESL_SO_>:
 23f9c3a:	4770      	bx	lr

023f9c3c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESL_SO_>:
 23f9c3c:	4770      	bx	lr

023f9c3e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESL_SO_>:
 23f9c3e:	4770      	bx	lr

023f9c40 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESL_SO_>:
 23f9c40:	4770      	bx	lr

023f9c42 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESL_SO_>:
 23f9c42:	4770      	bx	lr

023f9c44 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESL_SO_>:
 23f9c44:	4770      	bx	lr

023f9c46 <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_>:
        system_set_flag(flag, value, nullptr);
    }

    static SleepResult sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags);

    static void subscribedEventHandler(system_event_t events, int data, void* pointer, void* context) {
 23f9c46:	b530      	push	{r4, r5, lr}
 23f9c48:	b085      	sub	sp, #20
 23f9c4a:	4604      	mov	r4, r0
 23f9c4c:	9808      	ldr	r0, [sp, #32]
        if (!context) {
 23f9c4e:	b160      	cbz	r0, 23f9c6a <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        auto pContext = static_cast<const SystemEventContext*>(context);
        if (!pContext->callable) {
 23f9c50:	6840      	ldr	r0, [r0, #4]
 23f9c52:	b150      	cbz	r0, 23f9c6a <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        std::function<void(system_event_t, int, void*)>* handler = reinterpret_cast< std::function<void(system_event_t, int, void*)>* >(pContext->callable);
        if (!(*handler)) {
 23f9c54:	6885      	ldr	r5, [r0, #8]
 23f9c56:	b145      	cbz	r5, 23f9c6a <_ZN11SystemClass22subscribedEventHandlerEyiPvS0_+0x24>
            return;
        }
        (*handler)(events, data, pointer);
 23f9c58:	e9cd 4102 	strd	r4, r1, [sp, #8]
 23f9c5c:	e9cd 2300 	strd	r2, r3, [sp]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f9c60:	68c4      	ldr	r4, [r0, #12]
 23f9c62:	466a      	mov	r2, sp
 23f9c64:	ab01      	add	r3, sp, #4
 23f9c66:	a902      	add	r1, sp, #8
 23f9c68:	47a0      	blx	r4
    }
 23f9c6a:	b005      	add	sp, #20
 23f9c6c:	bd30      	pop	{r4, r5, pc}

023f9c6e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESL_SO_>:
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 23f9c6e:	6808      	ldr	r0, [r1, #0]
 23f9c70:	f001 b9da 	b.w	23fb028 <free>

023f9c74 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESL_SO_>:
    _Destroy(_Tp* __pointer)
    {
#if __cplusplus > 201703L
      std::destroy_at(__pointer);
#else
      __pointer->~_Tp();
 23f9c74:	4608      	mov	r0, r1
 23f9c76:	f004 bad1 	b.w	23fe21c <_ZN6StringD1Ev>

023f9c7a <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f9c7a:	b530      	push	{r4, r5, lr}
 23f9c7c:	6813      	ldr	r3, [r2, #0]
	    return __source._M_access<_Functor*>();
 23f9c7e:	6800      	ldr	r0, [r0, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23f9c80:	b085      	sub	sp, #20
 23f9c82:	9301      	str	r3, [sp, #4]
      if (_M_empty())
 23f9c84:	6883      	ldr	r3, [r0, #8]
 23f9c86:	e9d1 4500 	ldrd	r4, r5, [r1]
 23f9c8a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 23f9c8e:	b90b      	cbnz	r3, 23f9c94 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E9_M_invokeERKSt9_Any_dataOyOiOS0_+0x1a>
	__throw_bad_function_call();
 23f9c90:	f005 faee 	bl	23ff270 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23f9c94:	68c3      	ldr	r3, [r0, #12]
 23f9c96:	aa01      	add	r2, sp, #4
 23f9c98:	a902      	add	r1, sp, #8
 23f9c9a:	4798      	blx	r3
      }
 23f9c9c:	b005      	add	sp, #20
 23f9c9e:	bd30      	pop	{r4, r5, pc}

023f9ca0 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 23f9ca0:	2a01      	cmp	r2, #1
 23f9ca2:	d102      	bne.n	23f9caa <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23f9ca4:	6001      	str	r1, [r0, #0]
      }
 23f9ca6:	2000      	movs	r0, #0
 23f9ca8:	4770      	bx	lr
	  switch (__op)
 23f9caa:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 23f9cac:	bf04      	itt	eq
 23f9cae:	680b      	ldreq	r3, [r1, #0]
 23f9cb0:	6003      	streq	r3, [r0, #0]
	      break;
 23f9cb2:	e7f8      	b.n	23f9ca6 <_ZNSt17_Function_handlerIFvyiEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

023f9cb4 <_ZNSt17_Function_handlerIFvyiEPS0_E9_M_invokeERKSt9_Any_dataOyOi>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23f9cb4:	6803      	ldr	r3, [r0, #0]
 23f9cb6:	6812      	ldr	r2, [r2, #0]
 23f9cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23f9cbc:	4718      	bx	r3
	...

023f9cc0 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
 23f9cc0:	b538      	push	{r3, r4, r5, lr}
        if (valid_) {
 23f9cc2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
 23f9cc4:	4604      	mov	r4, r0
 23f9cc6:	460d      	mov	r5, r1
        if (valid_) {
 23f9cc8:	b16b      	cbz	r3, 23f9ce6 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x26>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 23f9cca:	6803      	ldr	r3, [r0, #0]
 23f9ccc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
 23f9cce:	b123      	cbz	r3, 23f9cda <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x1a>
            if (start->type == type) {
 23f9cd0:	889a      	ldrh	r2, [r3, #4]
 23f9cd2:	2a04      	cmp	r2, #4
 23f9cd4:	d011      	beq.n	23f9cfa <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x3a>
            start = start->next;
 23f9cd6:	689b      	ldr	r3, [r3, #8]
        while (start) {
 23f9cd8:	e7f9      	b.n	23f9cce <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0xe>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
#if HAL_PLATFORM_RTL872X
            auto wakeupSource = (hal_wakeup_source_rtc_t*)system_pool_alloc(sizeof(hal_wakeup_source_rtc_t), nullptr);
 23f9cda:	2100      	movs	r1, #0
 23f9cdc:	2010      	movs	r0, #16
 23f9cde:	f001 f845 	bl	23fad6c <system_pool_alloc>
#else
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
#endif
            if (!wakeupSource) {
 23f9ce2:	b908      	cbnz	r0, 23f9ce8 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x28>
                valid_ = false;
 23f9ce4:	7520      	strb	r0, [r4, #20]
            wakeupSource->base.next = config_.wakeup_sources;
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
 23f9ce6:	bd38      	pop	{r3, r4, r5, pc}
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 23f9ce8:	4b05      	ldr	r3, [pc, #20]	; (23f9d00 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x40>)
 23f9cea:	6003      	str	r3, [r0, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 23f9cec:	2304      	movs	r3, #4
 23f9cee:	8083      	strh	r3, [r0, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 23f9cf0:	6923      	ldr	r3, [r4, #16]
            wakeupSource->ms = ms;
 23f9cf2:	e9c0 3502 	strd	r3, r5, [r0, #8]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 23f9cf6:	6120      	str	r0, [r4, #16]
 23f9cf8:	e7f5      	b.n	23f9ce6 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x26>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
 23f9cfa:	60dd      	str	r5, [r3, #12]
                return *this;
 23f9cfc:	e7f3      	b.n	23f9ce6 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0+0x26>
 23f9cfe:	bf00      	nop
 23f9d00:	00030010 	.word	0x00030010

023f9d04 <_ZN5spark17Serial1LogHandlerD1Ev>:
            StreamLogHandler(Serial1, level, filters) {
        Serial1.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~Serial1LogHandler() {
 23f9d04:	b510      	push	{r4, lr}
 23f9d06:	4604      	mov	r4, r0
 23f9d08:	4b09      	ldr	r3, [pc, #36]	; (23f9d30 <_ZN5spark17Serial1LogHandlerD1Ev+0x2c>)
 23f9d0a:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 23f9d0c:	f003 fa3c 	bl	23fd188 <_ZN5spark10LogManager8instanceEv>
 23f9d10:	4621      	mov	r1, r4
 23f9d12:	f003 fc85 	bl	23fd620 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial1.end();
 23f9d16:	f005 fa4d 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
 23f9d1a:	f004 fc98 	bl	23fe64e <_ZN11USARTSerial3endEv>
    virtual ~LogHandler() = default;
 23f9d1e:	4620      	mov	r0, r4
 23f9d20:	4b04      	ldr	r3, [pc, #16]	; (23f9d34 <_ZN5spark17Serial1LogHandlerD1Ev+0x30>)
 23f9d22:	f840 3b04 	str.w	r3, [r0], #4
 23f9d26:	f003 fb05 	bl	23fd334 <_ZN5spark6detail9LogFilterD1Ev>
    }
 23f9d2a:	4620      	mov	r0, r4
 23f9d2c:	bd10      	pop	{r4, pc}
 23f9d2e:	bf00      	nop
 23f9d30:	023ff7bc 	.word	0x023ff7bc
 23f9d34:	023ff7a4 	.word	0x023ff7a4

023f9d38 <_ZN5spark17Serial1LogHandlerD0Ev>:
    virtual ~Serial1LogHandler() {
 23f9d38:	b510      	push	{r4, lr}
 23f9d3a:	4604      	mov	r4, r0
    }
 23f9d3c:	f7ff ffe2 	bl	23f9d04 <_ZN5spark17Serial1LogHandlerD1Ev>
 23f9d40:	4620      	mov	r0, r4
 23f9d42:	2124      	movs	r1, #36	; 0x24
 23f9d44:	f7ff ff59 	bl	23f9bfa <_ZdlPvj>
 23f9d48:	4620      	mov	r0, r4
 23f9d4a:	bd10      	pop	{r4, pc}

023f9d4c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23f9d4c:	b510      	push	{r4, lr}
      if (_M_manager)
 23f9d4e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23f9d50:	4604      	mov	r4, r0
      if (_M_manager)
 23f9d52:	b113      	cbz	r3, 23f9d5a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23f9d54:	2203      	movs	r2, #3
 23f9d56:	4601      	mov	r1, r0
 23f9d58:	4798      	blx	r3
    }
 23f9d5a:	4620      	mov	r0, r4
 23f9d5c:	bd10      	pop	{r4, pc}

023f9d5e <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_>:
        context.destructor = [](void* callable) -> void {
 23f9d5e:	b510      	push	{r4, lr}
            delete callableWrapper;
 23f9d60:	4604      	mov	r4, r0
 23f9d62:	b138      	cbz	r0, 23f9d74 <_ZZN11SystemClass2onEySt8functionIFvyiPvEEENUlS1_E_4_FUNES1_+0x16>
    class function<_Res(_ArgTypes...)>
 23f9d64:	f7ff fff2 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
 23f9d68:	4620      	mov	r0, r4
        };
 23f9d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            delete callableWrapper;
 23f9d6e:	2110      	movs	r1, #16
 23f9d70:	f7ff bf43 	b.w	23f9bfa <_ZdlPvj>
        };
 23f9d74:	bd10      	pop	{r4, pc}

023f9d76 <_ZN8particle24SystemSleepConfigurationC1Ev>:
    SystemSleepConfiguration()
 23f9d76:	b538      	push	{r3, r4, r5, lr}
 23f9d78:	4604      	mov	r4, r0
              valid_(true) {
 23f9d7a:	2510      	movs	r5, #16
            : SystemSleepConfigurationHelper(&config_),
 23f9d7c:	3004      	adds	r0, #4
              valid_(true) {
 23f9d7e:	462a      	mov	r2, r5
 23f9d80:	2100      	movs	r1, #0
        : config_(config) {
 23f9d82:	6020      	str	r0, [r4, #0]
              valid_(true) {
 23f9d84:	f005 faad 	bl	23ff2e2 <memset>
 23f9d88:	2301      	movs	r3, #1
 23f9d8a:	7523      	strb	r3, [r4, #20]
        config_.version = HAL_SLEEP_VERSION;
 23f9d8c:	2303      	movs	r3, #3
    }
 23f9d8e:	4620      	mov	r0, r4
        config_.size = sizeof(hal_sleep_config_t);
 23f9d90:	80a5      	strh	r5, [r4, #4]
        config_.version = HAL_SLEEP_VERSION;
 23f9d92:	80e3      	strh	r3, [r4, #6]
    }
 23f9d94:	bd38      	pop	{r3, r4, r5, pc}

023f9d96 <_ZN8particle24SystemSleepConfigurationD1Ev>:
    ~SystemSleepConfiguration() {
 23f9d96:	b538      	push	{r3, r4, r5, lr}
 23f9d98:	4604      	mov	r4, r0
        auto wakeupSource = config_.wakeup_sources;
 23f9d9a:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
 23f9d9c:	b128      	cbz	r0, 23f9daa <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
 23f9d9e:	6885      	ldr	r5, [r0, #8]
            system_pool_free(wakeupSource, nullptr);
 23f9da0:	2100      	movs	r1, #0
 23f9da2:	f000 fff1 	bl	23fad88 <system_pool_free>
            wakeupSource = next;
 23f9da6:	4628      	mov	r0, r5
        while (wakeupSource) {
 23f9da8:	e7f8      	b.n	23f9d9c <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
    }
 23f9daa:	4620      	mov	r0, r4
 23f9dac:	bd38      	pop	{r3, r4, r5, pc}
	...

023f9db0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>:
    SystemSleepConfiguration& gpio(hal_pin_t pin, InterruptMode mode) {
 23f9db0:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
 23f9db2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& gpio(hal_pin_t pin, InterruptMode mode) {
 23f9db4:	4604      	mov	r4, r0
 23f9db6:	460e      	mov	r6, r1
 23f9db8:	4615      	mov	r5, r2
        if (valid_) {
 23f9dba:	b18b      	cbz	r3, 23f9de0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
 23f9dbc:	6803      	ldr	r3, [r0, #0]
 23f9dbe:	68db      	ldr	r3, [r3, #12]
        if (!start) {
 23f9dc0:	b183      	cbz	r3, 23f9de4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
 23f9dc2:	889a      	ldrh	r2, [r3, #4]
 23f9dc4:	2a01      	cmp	r2, #1
 23f9dc6:	d006      	beq.n	23f9dd6 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x26>
            start = start->next;
 23f9dc8:	689b      	ldr	r3, [r3, #8]
        while (start) {
 23f9dca:	e7f9      	b.n	23f9dc0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x10>
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_GPIO, wakeup->next);
 23f9dcc:	689b      	ldr	r3, [r3, #8]
        if (!start) {
 23f9dce:	b14b      	cbz	r3, 23f9de4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
            if (start->type == type) {
 23f9dd0:	889a      	ldrh	r2, [r3, #4]
 23f9dd2:	2a01      	cmp	r2, #1
 23f9dd4:	d1fa      	bne.n	23f9dcc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
            while (wakeup) {
 23f9dd6:	b12b      	cbz	r3, 23f9de4 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x34>
                if (gpioWakeup->pin == pin) {
 23f9dd8:	899a      	ldrh	r2, [r3, #12]
 23f9dda:	42b2      	cmp	r2, r6
 23f9ddc:	d1f6      	bne.n	23f9dcc <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x1c>
                    gpioWakeup->mode = mode;
 23f9dde:	739d      	strb	r5, [r3, #14]
    }
 23f9de0:	4620      	mov	r0, r4
 23f9de2:	bd70      	pop	{r4, r5, r6, pc}
            auto wakeupSource = (hal_wakeup_source_gpio_t*)system_pool_alloc(sizeof(hal_wakeup_source_gpio_t), nullptr);
 23f9de4:	2100      	movs	r1, #0
 23f9de6:	2010      	movs	r0, #16
 23f9de8:	f000 ffc0 	bl	23fad6c <system_pool_alloc>
            if (!wakeupSource) {
 23f9dec:	b908      	cbnz	r0, 23f9df2 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x42>
                valid_ = false;
 23f9dee:	7520      	strb	r0, [r4, #20]
                return *this;
 23f9df0:	e7f6      	b.n	23f9de0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
 23f9df2:	4b05      	ldr	r3, [pc, #20]	; (23f9e08 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x58>)
 23f9df4:	6003      	str	r3, [r0, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_GPIO;
 23f9df6:	2301      	movs	r3, #1
 23f9df8:	8083      	strh	r3, [r0, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 23f9dfa:	6923      	ldr	r3, [r4, #16]
            wakeupSource->pin = pin;
 23f9dfc:	8186      	strh	r6, [r0, #12]
            wakeupSource->base.next = config_.wakeup_sources;
 23f9dfe:	6083      	str	r3, [r0, #8]
            wakeupSource->mode = mode;
 23f9e00:	7385      	strb	r5, [r0, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 23f9e02:	6120      	str	r0, [r4, #16]
 23f9e04:	e7ec      	b.n	23f9de0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode+0x30>
 23f9e06:	bf00      	nop
 23f9e08:	00030010 	.word	0x00030010

023f9e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    void freeWakeupSourceMemory() {
 23f9e0c:	b510      	push	{r4, lr}
 23f9e0e:	4604      	mov	r4, r0
        if (wakeupSource_) {
 23f9e10:	6800      	ldr	r0, [r0, #0]
 23f9e12:	b118      	cbz	r0, 23f9e1c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
 23f9e14:	f001 f908 	bl	23fb028 <free>
            wakeupSource_ = nullptr;
 23f9e18:	2300      	movs	r3, #0
 23f9e1a:	6023      	str	r3, [r4, #0]
    }
 23f9e1c:	bd10      	pop	{r4, pc}

023f9e1e <_ZN8particle7VariantC1EPKc>:

    Variant(double val) :
            v_(val) {
    }

    Variant(const char* val) :
 23f9e1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23f9e20:	4604      	mov	r4, r0
            v_(String(val)) {
 23f9e22:	4668      	mov	r0, sp
 23f9e24:	f004 fa5f 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
	  ::new ((void*)std::addressof(_M_storage))
 23f9e28:	4669      	mov	r1, sp
 23f9e2a:	4620      	mov	r0, r4
 23f9e2c:	f004 fa8d 	bl	23fe34a <_ZN6StringC1EOS_>
	_M_index{_Np}
 23f9e30:	2307      	movs	r3, #7
 23f9e32:	4668      	mov	r0, sp
 23f9e34:	7423      	strb	r3, [r4, #16]
 23f9e36:	f004 f9f1 	bl	23fe21c <_ZN6StringD1Ev>
    }
 23f9e3a:	4620      	mov	r0, r4
 23f9e3c:	b004      	add	sp, #16
 23f9e3e:	bd10      	pop	{r4, pc}

023f9e40 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 23f9e40:	b40e      	push	{r1, r2, r3}
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 23f9e42:	f04f 0c20 	mov.w	ip, #32
 23f9e46:	2300      	movs	r3, #0
inline void spark::Logger::info(const char *fmt, ...) const {
 23f9e48:	b500      	push	{lr}
 23f9e4a:	b08c      	sub	sp, #48	; 0x30
 23f9e4c:	aa0d      	add	r2, sp, #52	; 0x34
 23f9e4e:	f852 1b04 	ldr.w	r1, [r2], #4
    attr.flags = 0;
 23f9e52:	e9cd c304 	strd	ip, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f9e56:	e9cd 1200 	strd	r1, r2, [sp]
    va_start(args, fmt);
 23f9e5a:	9203      	str	r2, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 23f9e5c:	6801      	ldr	r1, [r0, #0]
 23f9e5e:	aa04      	add	r2, sp, #16
 23f9e60:	201e      	movs	r0, #30
 23f9e62:	f000 fef7 	bl	23fac54 <log_message_v>
}
 23f9e66:	b00c      	add	sp, #48	; 0x30
 23f9e68:	f85d eb04 	ldr.w	lr, [sp], #4
 23f9e6c:	b003      	add	sp, #12
 23f9e6e:	4770      	bx	lr

023f9e70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
    const diag_source* src = nullptr;
 23f9e70:	2200      	movs	r2, #0
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
 23f9e72:	b530      	push	{r4, r5, lr}
 23f9e74:	b085      	sub	sp, #20
 23f9e76:	460d      	mov	r5, r1
    const int ret = diag_get_source(id, &src, nullptr);
 23f9e78:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
 23f9e7a:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
 23f9e7c:	f000 ff14 	bl	23faca8 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
 23f9e80:	b990      	cbnz	r0, 23f9ea8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x38>
        return ret;
    }
    return get(src, val);
 23f9e82:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
 23f9e84:	b10c      	cbz	r4, 23f9e8a <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
 23f9e86:	6923      	ldr	r3, [r4, #16]
 23f9e88:	b923      	cbnz	r3, 23f9e94 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
 23f9e8a:	200a      	movs	r0, #10
 23f9e8c:	4a07      	ldr	r2, [pc, #28]	; (23f9eac <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x3c>)
 23f9e8e:	4908      	ldr	r1, [pc, #32]	; (23f9eb0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>)
 23f9e90:	f000 fec4 	bl	23fac1c <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 23f9e94:	230c      	movs	r3, #12
 23f9e96:	e9cd 3501 	strd	r3, r5, [sp, #4]
 23f9e9a:	2304      	movs	r3, #4
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 23f9e9c:	2101      	movs	r1, #1
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
 23f9e9e:	9303      	str	r3, [sp, #12]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
 23f9ea0:	4620      	mov	r0, r4
 23f9ea2:	6923      	ldr	r3, [r4, #16]
 23f9ea4:	aa01      	add	r2, sp, #4
 23f9ea6:	4798      	blx	r3
}
 23f9ea8:	b005      	add	sp, #20
 23f9eaa:	bd30      	pop	{r4, r5, pc}
 23f9eac:	023fa929 	.word	0x023fa929
 23f9eb0:	023ff565 	.word	0x023ff565

023f9eb4 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
    float batteryCharge() const {
 23f9eb4:	b507      	push	{r0, r1, r2, lr}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
 23f9eb6:	2003      	movs	r0, #3
 23f9eb8:	a901      	add	r1, sp, #4
 23f9eba:	f7ff ffd9 	bl	23f9e70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r) {
 23f9ebe:	b940      	cbnz	r0, 23f9ed2 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
 23f9ec0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 23f9ec4:	ee00 3a10 	vmov	s0, r3
 23f9ec8:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8
    }
 23f9ecc:	b003      	add	sp, #12
 23f9ece:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
 23f9ed2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 23f9ed6:	e7f9      	b.n	23f9ecc <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

023f9ed8 <_ZNK11SystemClass12batteryStateEv.isra.0>:
    int batteryState() const {
 23f9ed8:	b507      	push	{r0, r1, r2, lr}
 23f9eda:	2007      	movs	r0, #7
 23f9edc:	a901      	add	r1, sp, #4
 23f9ede:	f7ff ffc7 	bl	23f9e70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23f9ee2:	2800      	cmp	r0, #0
        return val;
 23f9ee4:	bfa8      	it	ge
 23f9ee6:	9801      	ldrge	r0, [sp, #4]
    }
 23f9ee8:	b003      	add	sp, #12
 23f9eea:	f85d fb04 	ldr.w	pc, [sp], #4

023f9eee <_ZNSt8functionIFvyiEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 23f9eee:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f9ef0:	2300      	movs	r3, #0
 23f9ef2:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23f9ef4:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23f9ef6:	4604      	mov	r4, r0
 23f9ef8:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23f9efa:	b12b      	cbz	r3, 23f9f08 <_ZNSt8functionIFvyiEEC1ERKS1_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f9efc:	2202      	movs	r2, #2
 23f9efe:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f9f00:	68eb      	ldr	r3, [r5, #12]
 23f9f02:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f9f04:	68ab      	ldr	r3, [r5, #8]
 23f9f06:	60a3      	str	r3, [r4, #8]
    }
 23f9f08:	4620      	mov	r0, r4
 23f9f0a:	bd38      	pop	{r3, r4, r5, pc}

023f9f0c <_ZN11SystemClass2onEySt8functionIFvyiEE>:
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f9f0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _Function_base() : _M_manager(nullptr) { }
 23f9f10:	f04f 0900 	mov.w	r9, #0
 23f9f14:	b095      	sub	sp, #84	; 0x54
        };
 23f9f16:	991c      	ldr	r1, [sp, #112]	; 0x70
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f9f18:	4605      	mov	r5, r0
        };
 23f9f1a:	a804      	add	r0, sp, #16
    static SystemEventSubscription on(system_event_t events, std::function<void(system_event_t, int)> handler) {
 23f9f1c:	4690      	mov	r8, r2
 23f9f1e:	461f      	mov	r7, r3
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f9f20:	ae0c      	add	r6, sp, #48	; 0x30
        };
 23f9f22:	f7ff ffe4 	bl	23f9eee <_ZNSt8functionIFvyiEEC1ERKS1_>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23f9f26:	a904      	add	r1, sp, #16
 23f9f28:	a808      	add	r0, sp, #32
 23f9f2a:	f7ff ffe0 	bl	23f9eee <_ZNSt8functionIFvyiEEC1ERKS1_>
 23f9f2e:	a908      	add	r1, sp, #32
 23f9f30:	4630      	mov	r0, r6
 23f9f32:	f7ff ffdc 	bl	23f9eee <_ZNSt8functionIFvyiEEC1ERKS1_>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f9f36:	2010      	movs	r0, #16
    _Function_base() : _M_manager(nullptr) { }
 23f9f38:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f9f3c:	f7ff fe59 	bl	23f9bf2 <_Znwj>
 23f9f40:	4604      	mov	r4, r0
 23f9f42:	b1a0      	cbz	r0, 23f9f6e <_ZN11SystemClass2onEySt8functionIFvyiEE+0x62>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9f44:	e896 0003 	ldmia.w	r6, {r0, r1}
 23f9f48:	ab01      	add	r3, sp, #4
 23f9f4a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23f9f4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 23f9f52:	e886 0003 	stmia.w	r6, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23f9f56:	e893 0003 	ldmia.w	r3, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
      __a = _GLIBCXX_MOVE(__b);
 23f9f5c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23f9f5e:	60a3      	str	r3, [r4, #8]
 23f9f60:	e884 0003 	stmia.w	r4, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23f9f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
      __a = _GLIBCXX_MOVE(__b);
 23f9f66:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 23f9f6a:	920f      	str	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
 23f9f6c:	60e3      	str	r3, [r4, #12]
	    _M_invoker = &_My_handler::_M_invoke;
 23f9f6e:	4b24      	ldr	r3, [pc, #144]	; (23fa000 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf4>)
              callable_(callable) {
 23f9f70:	2200      	movs	r2, #0
 23f9f72:	9313      	str	r3, [sp, #76]	; 0x4c
	    _M_manager = &_My_handler::_M_manager;
 23f9f74:	4b23      	ldr	r3, [pc, #140]	; (23fa004 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xf8>)
 23f9f76:	f04f 0900 	mov.w	r9, #0
 23f9f7a:	9312      	str	r3, [sp, #72]	; 0x48
 23f9f7c:	2300      	movs	r3, #0
 23f9f7e:	e9c5 2300 	strd	r2, r3, [r5]
        context.version = SYSTEM_EVENT_CONTEXT_VERSION;
 23f9f82:	4b21      	ldr	r3, [pc, #132]	; (23fa008 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xfc>)
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f9f84:	2010      	movs	r0, #16
              callable_(callable) {
 23f9f86:	f8c5 9008 	str.w	r9, [r5, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23f9f8a:	9410      	str	r4, [sp, #64]	; 0x40
        SystemEventContext context = {};
 23f9f8c:	e9cd 3901 	strd	r3, r9, [sp, #4]
 23f9f90:	f8cd 900c 	str.w	r9, [sp, #12]
        auto wrapper = new std::function<void(system_event_t, int, void*)>(handler);
 23f9f94:	f7ff fe2d 	bl	23f9bf2 <_Znwj>
 23f9f98:	4604      	mov	r4, r0
 23f9f9a:	b1d8      	cbz	r0, 23f9fd4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
    bool _M_empty() const { return !_M_manager; }
 23f9f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
    _Function_base() : _M_manager(nullptr) { }
 23f9f9e:	f8c0 9008 	str.w	r9, [r0, #8]
      if (static_cast<bool>(__x))
 23f9fa2:	b133      	cbz	r3, 23f9fb2 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xa6>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23f9fa4:	2202      	movs	r2, #2
 23f9fa6:	a910      	add	r1, sp, #64	; 0x40
 23f9fa8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23f9faa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 23f9fac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23f9fae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 23f9fb0:	60a3      	str	r3, [r4, #8]
        context.destructor = [](void* callable) -> void {
 23f9fb2:	4b16      	ldr	r3, [pc, #88]	; (23fa00c <_ZN11SystemClass2onEySt8functionIFvyiEE+0x100>)
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f9fb4:	4640      	mov	r0, r8
        context.destructor = [](void* callable) -> void {
 23f9fb6:	9303      	str	r3, [sp, #12]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f9fb8:	4639      	mov	r1, r7
 23f9fba:	4a15      	ldr	r2, [pc, #84]	; (23fa010 <_ZN11SystemClass2onEySt8functionIFvyiEE+0x104>)
 23f9fbc:	ab01      	add	r3, sp, #4
        context.callable = wrapper;
 23f9fbe:	9402      	str	r4, [sp, #8]
        auto r = system_subscribe_event(events, subscribedEventHandler, &context);
 23f9fc0:	f000 fe9c 	bl	23facfc <system_subscribe_event>
        if (r) {
 23f9fc4:	b1b0      	cbz	r0, 23f9ff4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xe8>
    class function<_Res(_ArgTypes...)>
 23f9fc6:	4620      	mov	r0, r4
 23f9fc8:	f7ff fec0 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
            delete wrapper;
 23f9fcc:	2110      	movs	r1, #16
 23f9fce:	4620      	mov	r0, r4
 23f9fd0:	f7ff fe13 	bl	23f9bfa <_ZdlPvj>
 23f9fd4:	a810      	add	r0, sp, #64	; 0x40
 23f9fd6:	f7ff feb9 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
 23f9fda:	4630      	mov	r0, r6
 23f9fdc:	f7ff feb6 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
 23f9fe0:	a808      	add	r0, sp, #32
 23f9fe2:	f7ff feb3 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
 23f9fe6:	a804      	add	r0, sp, #16
 23f9fe8:	f7ff feb0 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
    }
 23f9fec:	4628      	mov	r0, r5
 23f9fee:	b015      	add	sp, #84	; 0x54
 23f9ff0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            sub = SystemEventSubscription(events, context.callable);
 23f9ff4:	9b02      	ldr	r3, [sp, #8]
 23f9ff6:	e9c5 8700 	strd	r8, r7, [r5]
 23f9ffa:	60ab      	str	r3, [r5, #8]
 23f9ffc:	e7ea      	b.n	23f9fd4 <_ZN11SystemClass2onEySt8functionIFvyiEE+0xc8>
 23f9ffe:	bf00      	nop
 23fa000:	023f9c7b 	.word	0x023f9c7b
 23fa004:	023fa251 	.word	0x023fa251
 23fa008:	000c0002 	.word	0x000c0002
 23fa00c:	023f9d5f 	.word	0x023f9d5f
 23fa010:	023f9c47 	.word	0x023f9c47

023fa014 <setup>:
void setup() {
 23fa014:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa016:	ed2d 8b02 	vpush	{d8}
  if (powerModuleConfig != PM_FLAG)
 23fa01a:	f245 5555 	movw	r5, #21845	; 0x5555

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        static_assert(!std::is_base_of_v<String, T>, "String class cannot be used with EEPROM, use char[] array");
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 23fa01e:	4c7d      	ldr	r4, [pc, #500]	; (23fa214 <setup+0x200>)
void setup() {
 23fa020:	b08f      	sub	sp, #60	; 0x3c
  EEPROM.get(EEPROM_ADDR, powerModuleConfig);
 23fa022:	f005 f87b 	bl	23ff11c <_Z21__fetch_global_EEPROMv>
 23fa026:	4621      	mov	r1, r4
 23fa028:	2202      	movs	r2, #2
 23fa02a:	200a      	movs	r0, #10
 23fa02c:	f000 fca6 	bl	23fa97c <HAL_EEPROM_Get>
  if (powerModuleConfig != PM_FLAG)
 23fa030:	8823      	ldrh	r3, [r4, #0]
 23fa032:	ac06      	add	r4, sp, #24
 23fa034:	42ab      	cmp	r3, r5
 23fa036:	d03c      	beq.n	23fa0b2 <setup+0x9e>
    Log.info("Configuring Power Module");
 23fa038:	4977      	ldr	r1, [pc, #476]	; (23fa218 <setup+0x204>)
 23fa03a:	4878      	ldr	r0, [pc, #480]	; (23fa21c <setup+0x208>)
 23fa03c:	f7ff ff00 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
 23fa040:	2214      	movs	r2, #20
 23fa042:	2100      	movs	r1, #0
 23fa044:	a809      	add	r0, sp, #36	; 0x24
 23fa046:	f005 f94c 	bl	23ff2e2 <memset>
        conf_.size = sizeof(conf_);
        conf_.version = HAL_POWER_CONFIG_VERSION;
        conf_.aux_pwr_ctrl_pin = PIN_INVALID;
 23fa04a:	22ff      	movs	r2, #255	; 0xff
 23fa04c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    uint16_t powerSourceMinVoltage() const {
        return conf_.vin_min_voltage;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
 23fa050:	f240 52dc 	movw	r2, #1500	; 0x5dc
        conf_.size = sizeof(conf_);
 23fa054:	2320      	movs	r3, #32
        conf_.vin_max_current = current;
 23fa056:	f8ad 2020 	strh.w	r2, [sp, #32]
        conf_.vin_min_voltage = voltage;
 23fa05a:	f640 7228 	movw	r2, #3880	; 0xf28
        conf_.size = sizeof(conf_);
 23fa05e:	f88d 301d 	strb.w	r3, [sp, #29]
        conf_.vin_min_voltage = voltage;
 23fa062:	f8ad 201e 	strh.w	r2, [sp, #30]
        conf_.version = HAL_POWER_CONFIG_VERSION;
 23fa066:	2301      	movs	r3, #1
    uint16_t batteryChargeVoltage() const {
        return conf_.termination_voltage;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
 23fa068:	f44f 7261 	mov.w	r2, #900	; 0x384
        conf_.version = HAL_POWER_CONFIG_VERSION;
 23fa06c:	f88d 301c 	strb.w	r3, [sp, #28]
        conf_.charge_current = current;
 23fa070:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
    uint16_t batteryChargeCurrent() const {
        return conf_.charge_current;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
 23fa074:	9306      	str	r3, [sp, #24]
        conf_.termination_voltage = voltage;
 23fa076:	f241 0210 	movw	r2, #4112	; 0x1010
        return conf_.soc_bits;
    }

    SystemPowerConfiguration& auxiliaryPowerControlPin(uint8_t pin, bool activeLevel = 1) {
        conf_.aux_pwr_ctrl_pin = pin;
        conf_.aux_pwr_ctrl_pin_level = activeLevel;
 23fa07a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    uint8_t auxiliaryPowerControlActiveLevel() const {
        return conf_.aux_pwr_ctrl_pin_level;
    }
    
    SystemPowerConfiguration& interruptPin(uint8_t pin) {
        conf_.int_pin = pin;
 23fa07e:	231c      	movs	r3, #28
        return system_power_management_set_config(conf.config(), nullptr);
 23fa080:	2100      	movs	r1, #0
 23fa082:	4620      	mov	r0, r4
 23fa084:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        conf_.termination_voltage = voltage;
 23fa088:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 23fa08c:	f000 fe8a 	bl	23fada4 <system_power_management_set_config>
    Log.info("setPowerConfiguration=%d", res);
 23fa090:	4963      	ldr	r1, [pc, #396]	; (23fa220 <setup+0x20c>)
 23fa092:	4602      	mov	r2, r0
 23fa094:	4861      	ldr	r0, [pc, #388]	; (23fa21c <setup+0x208>)
 23fa096:	f7ff fed3 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
    EEPROM.put(EEPROM_ADDR, PM_FLAG);
 23fa09a:	f005 f83f 	bl	23ff11c <_Z21__fetch_global_EEPROMv>
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        static_assert(!std::is_base_of_v<String, T>, "String class cannot be used with EEPROM, use char[] array");
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 23fa09e:	200a      	movs	r0, #10
 23fa0a0:	a902      	add	r1, sp, #8
 23fa0a2:	2204      	movs	r2, #4
 23fa0a4:	9502      	str	r5, [sp, #8]
 23fa0a6:	f000 fc77 	bl	23fa998 <HAL_EEPROM_Put>
    Log.info("Setting PM_FLAG");
 23fa0aa:	495e      	ldr	r1, [pc, #376]	; (23fa224 <setup+0x210>)
 23fa0ac:	485b      	ldr	r0, [pc, #364]	; (23fa21c <setup+0x208>)
 23fa0ae:	f7ff fec7 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 23fa0b2:	4b5d      	ldr	r3, [pc, #372]	; (23fa228 <setup+0x214>)
  System.on(firmware_update, firmwareUpdateHandler);
 23fa0b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 23fa0b8:	9306      	str	r3, [sp, #24]
	    _M_invoker = &_My_handler::_M_invoke;
 23fa0ba:	4b5c      	ldr	r3, [pc, #368]	; (23fa22c <setup+0x218>)
 23fa0bc:	a802      	add	r0, sp, #8
 23fa0be:	9309      	str	r3, [sp, #36]	; 0x24
	    _M_manager = &_My_handler::_M_manager;
 23fa0c0:	4b5b      	ldr	r3, [pc, #364]	; (23fa230 <setup+0x21c>)
 23fa0c2:	9400      	str	r4, [sp, #0]
 23fa0c4:	9308      	str	r3, [sp, #32]
 23fa0c6:	2300      	movs	r3, #0
 23fa0c8:	f7ff ff20 	bl	23f9f0c <_ZN11SystemClass2onEySt8functionIFvyiEE>
    class function<_Res(_ArgTypes...)>
 23fa0cc:	4620      	mov	r0, r4
 23fa0ce:	f7ff fe3d 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
 23fa0d2:	f241 3588 	movw	r5, #5000	; 0x1388
 23fa0d6:	2303      	movs	r3, #3
 23fa0d8:	e9cd 3506 	strd	r3, r5, [sp, #24]
        bool clearSession, bool reconnect) :
 23fa0dc:	2301      	movs	r3, #1
 23fa0de:	f8ad 3020 	strh.w	r3, [sp, #32]
        reconnect_(reconnect) {
 23fa0e2:	2300      	movs	r3, #0
  Particle.setDisconnectOptions(CloudDisconnectOptions().graceful(true).timeout(5s));
 23fa0e4:	4620      	mov	r0, r4
 23fa0e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 23fa0ea:	f001 f993 	bl	23fb414 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>

#ifdef __cplusplus
}
#endif

static inline void delay(std::chrono::milliseconds ms) { ::delay(ms.count()); }
 23fa0ee:	4628      	mov	r0, r5
 23fa0f0:	f001 f834 	bl	23fb15c <delay>
  float batterySoc = System.batteryCharge();    // read the battery SoC from PMIC
 23fa0f4:	f7ff fede 	bl	23f9eb4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23fa0f8:	eeb0 8a40 	vmov.f32	s16, s0
  int batteryState = System.batteryState();     // read the battery state from PMIC
 23fa0fc:	f7ff feec 	bl	23f9ed8 <_ZNK11SystemClass12batteryStateEv.isra.0>
  Log.info("Battery state: %s", batteryStates[std::max(0, batteryState)]);
 23fa100:	4b4c      	ldr	r3, [pc, #304]	; (23fa234 <setup+0x220>)
 23fa102:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 23fa106:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 23fa10a:	494b      	ldr	r1, [pc, #300]	; (23fa238 <setup+0x224>)
  int batteryState = System.batteryState();     // read the battery state from PMIC
 23fa10c:	4605      	mov	r5, r0
  Log.info("Battery state: %s", batteryStates[std::max(0, batteryState)]);
 23fa10e:	4843      	ldr	r0, [pc, #268]	; (23fa21c <setup+0x208>)
 23fa110:	f7ff fe96 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("Battery charge: %f", batterySoc);
 23fa114:	ee18 0a10 	vmov	r0, s16
 23fa118:	f7ff fbf6 	bl	23f9908 <__aeabi_f2d>
 23fa11c:	4602      	mov	r2, r0
 23fa11e:	460b      	mov	r3, r1
 23fa120:	4606      	mov	r6, r0
 23fa122:	460f      	mov	r7, r1
 23fa124:	483d      	ldr	r0, [pc, #244]	; (23fa21c <setup+0x208>)
 23fa126:	4945      	ldr	r1, [pc, #276]	; (23fa23c <setup+0x228>)
 23fa128:	f7ff fe8a 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
  if ((batterySoc >= LOW_BATTERY_THRESHOLD) || ((batteryState == 2))) {
 23fa12c:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 23fa130:	eeb4 8ae7 	vcmpe.f32	s16, s15
 23fa134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fa138:	da01      	bge.n	23fa13e <setup+0x12a>
 23fa13a:	2d02      	cmp	r5, #2
 23fa13c:	d145      	bne.n	23fa1ca <setup+0x1b6>
        spark_cloud_flag_connect();
 23fa13e:	f000 fe69 	bl	23fae14 <spark_cloud_flag_connect>
        return hal_timer_millis(nullptr);
 23fa142:	2000      	movs	r0, #0
 23fa144:	f000 fc36 	bl	23fa9b4 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fa148:	f64e 2660 	movw	r6, #60000	; 0xea60
        return hal_timer_millis(nullptr);
 23fa14c:	4605      	mov	r5, r0
 23fa14e:	2000      	movs	r0, #0
 23fa150:	f000 fc30 	bl	23fa9b4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fa154:	1b40      	subs	r0, r0, r5
 23fa156:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fa15a:	42b0      	cmp	r0, r6
 23fa15c:	f171 0300 	sbcs.w	r3, r1, #0
 23fa160:	d205      	bcs.n	23fa16e <setup+0x15a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fa162:	f000 fe65 	bl	23fae30 <spark_cloud_flag_connected>
 23fa166:	b910      	cbnz	r0, 23fa16e <setup+0x15a>
            spark_process();
 23fa168:	f000 fe46 	bl	23fadf8 <spark_process>
        while (_while() && !_condition()) {
 23fa16c:	e7ef      	b.n	23fa14e <setup+0x13a>
 23fa16e:	f000 fe5f 	bl	23fae30 <spark_cloud_flag_connected>
 23fa172:	f000 fe5d 	bl	23fae30 <spark_cloud_flag_connected>
    if (!Particle.connected()) {
 23fa176:	bb00      	cbnz	r0, 23fa1ba <setup+0x1a6>
      Log.info("Fail to connect, connection timeout");      
 23fa178:	4931      	ldr	r1, [pc, #196]	; (23fa240 <setup+0x22c>)
 23fa17a:	4828      	ldr	r0, [pc, #160]	; (23fa21c <setup+0x208>)
 23fa17c:	f7ff fe60 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
      SystemSleepConfiguration config;
 23fa180:	4620      	mov	r0, r4
 23fa182:	f7ff fdf8 	bl	23f9d76 <_ZN8particle24SystemSleepConfigurationC1Ev>
        if (valid_) {
 23fa186:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 23fa18a:	b113      	cbz	r3, 23fa192 <setup+0x17e>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 23fa18c:	2302      	movs	r3, #2
 23fa18e:	f88d 3020 	strb.w	r3, [sp, #32]
        .gpio(PMIC_INTERRUPT_PIN, FALLING)            // wake of PMIC _INT (toggle low when changed noted)
 23fa192:	2202      	movs	r2, #2
 23fa194:	211c      	movs	r1, #28
 23fa196:	4620      	mov	r0, r4
 23fa198:	f7ff fe0a 	bl	23f9db0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        }
        return *this;
    }

    SystemSleepConfiguration& duration(std::chrono::milliseconds ms) {
        return duration(ms.count());
 23fa19c:	4929      	ldr	r1, [pc, #164]	; (23fa244 <setup+0x230>)
 23fa19e:	f7ff fd8f 	bl	23f9cc0 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>
      System.sleep(config);
 23fa1a2:	4621      	mov	r1, r4
 23fa1a4:	a802      	add	r0, sp, #8
 23fa1a6:	f004 f97d 	bl	23fe4a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
 23fa1aa:	a802      	add	r0, sp, #8
 23fa1ac:	f7ff fe2e 	bl	23f9e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
      System.reset();   // reset the system, ULP continues execution where it left off
 23fa1b0:	f004 f974 	bl	23fe49c <_ZN11SystemClass5resetEv>
      SystemSleepConfiguration config;
 23fa1b4:	4620      	mov	r0, r4
 23fa1b6:	f7ff fdee 	bl	23f9d96 <_ZN8particle24SystemSleepConfigurationD1Ev>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fa1ba:	f000 fbc3 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
    stateTime = millis(); 
 23fa1be:	4b22      	ldr	r3, [pc, #136]	; (23fa248 <setup+0x234>)
 23fa1c0:	6018      	str	r0, [r3, #0]
}
 23fa1c2:	b00f      	add	sp, #60	; 0x3c
 23fa1c4:	ecbd 8b02 	vpop	{d8}
 23fa1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Log.info("Fail to connect due to Battery charge: %f", batterySoc);      
 23fa1ca:	463b      	mov	r3, r7
 23fa1cc:	4632      	mov	r2, r6
 23fa1ce:	491f      	ldr	r1, [pc, #124]	; (23fa24c <setup+0x238>)
 23fa1d0:	4812      	ldr	r0, [pc, #72]	; (23fa21c <setup+0x208>)
 23fa1d2:	f7ff fe35 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
    SystemSleepConfiguration config;
 23fa1d6:	4620      	mov	r0, r4
 23fa1d8:	f7ff fdcd 	bl	23f9d76 <_ZN8particle24SystemSleepConfigurationC1Ev>
        if (valid_) {
 23fa1dc:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 23fa1e0:	b113      	cbz	r3, 23fa1e8 <setup+0x1d4>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 23fa1e2:	2302      	movs	r3, #2
 23fa1e4:	f88d 3020 	strb.w	r3, [sp, #32]
      .gpio(PMIC_INTERRUPT_PIN, FALLING)            // wake of PMIC _INT (toggle low when changed noted)
 23fa1e8:	2202      	movs	r2, #2
 23fa1ea:	211c      	movs	r1, #28
 23fa1ec:	4620      	mov	r0, r4
 23fa1ee:	f7ff fddf 	bl	23f9db0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        return duration(ms.count());
 23fa1f2:	4914      	ldr	r1, [pc, #80]	; (23fa244 <setup+0x230>)
 23fa1f4:	f7ff fd64 	bl	23f9cc0 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>
    System.sleep(config);
 23fa1f8:	4621      	mov	r1, r4
 23fa1fa:	a802      	add	r0, sp, #8
 23fa1fc:	f004 f952 	bl	23fe4a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
 23fa200:	a802      	add	r0, sp, #8
 23fa202:	f7ff fe03 	bl	23f9e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
    System.reset();   // reset the system, ULP continues execution where it left off
 23fa206:	f004 f949 	bl	23fe49c <_ZN11SystemClass5resetEv>
    SystemSleepConfiguration config;
 23fa20a:	4620      	mov	r0, r4
 23fa20c:	f7ff fdc3 	bl	23f9d96 <_ZN8particle24SystemSleepConfigurationD1Ev>
}
 23fa210:	e7d7      	b.n	23fa1c2 <setup+0x1ae>
 23fa212:	bf00      	nop
 23fa214:	1007aeb8 	.word	0x1007aeb8
 23fa218:	023ff58b 	.word	0x023ff58b
 23fa21c:	1007af38 	.word	0x1007af38
 23fa220:	023ff5a4 	.word	0x023ff5a4
 23fa224:	023ff5bd 	.word	0x023ff5bd
 23fa228:	023f9c1d 	.word	0x023f9c1d
 23fa22c:	023f9cb5 	.word	0x023f9cb5
 23fa230:	023f9ca1 	.word	0x023f9ca1
 23fa234:	023ff878 	.word	0x023ff878
 23fa238:	023ff5cd 	.word	0x023ff5cd
 23fa23c:	023ff6fc 	.word	0x023ff6fc
 23fa240:	023ff5df 	.word	0x023ff5df
 23fa244:	0036ee80 	.word	0x0036ee80
 23fa248:	1007aebc 	.word	0x1007aebc
 23fa24c:	023ff603 	.word	0x023ff603

023fa250 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation>:
	switch (__op)
 23fa250:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fa252:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fa254:	4604      	mov	r4, r0
	switch (__op)
 23fa256:	d104      	bne.n	23fa262 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x12>
	    return __source._M_access<_Functor*>();
 23fa258:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fa25a:	6003      	str	r3, [r0, #0]
      }
 23fa25c:	2000      	movs	r0, #0
 23fa25e:	b003      	add	sp, #12
 23fa260:	bd30      	pop	{r4, r5, pc}
	  switch (__op)
 23fa262:	2a02      	cmp	r2, #2
 23fa264:	d00c      	beq.n	23fa280 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x30>
 23fa266:	2a03      	cmp	r2, #3
 23fa268:	d1f8      	bne.n	23fa25c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fa26a:	6804      	ldr	r4, [r0, #0]
 23fa26c:	2c00      	cmp	r4, #0
 23fa26e:	d0f5      	beq.n	23fa25c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fa270:	4620      	mov	r0, r4
 23fa272:	f7ff fd6b 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fa276:	2110      	movs	r1, #16
 23fa278:	4620      	mov	r0, r4
 23fa27a:	f7ff fcbe 	bl	23f9bfa <_ZdlPvj>
 23fa27e:	e7ed      	b.n	23fa25c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>
	  __dest._M_access<_Functor*>() =
 23fa280:	6809      	ldr	r1, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa282:	2010      	movs	r0, #16
	  __dest._M_access<_Functor*>() =
 23fa284:	9101      	str	r1, [sp, #4]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fa286:	f7ff fcb4 	bl	23f9bf2 <_Znwj>
 23fa28a:	4605      	mov	r5, r0
 23fa28c:	b110      	cbz	r0, 23fa294 <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0x44>
        auto wrapper = [handler](system_event_t events, int data, void* pointer) {
 23fa28e:	9901      	ldr	r1, [sp, #4]
 23fa290:	f7ff fe2d 	bl	23f9eee <_ZNSt8functionIFvyiEEC1ERKS1_>
	  __dest._M_access<_Functor*>() =
 23fa294:	6025      	str	r5, [r4, #0]
	}
 23fa296:	e7e1      	b.n	23fa25c <_ZNSt17_Function_handlerIFvyiPvEZN11SystemClass2onEySt8functionIFvyiEEEUlyiS0_E_E10_M_managerERSt9_Any_dataRKS8_St18_Manager_operation+0xc>

023fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa298:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa29a:	2614      	movs	r6, #20
 23fa29c:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fa2a0:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fa2a2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa2a6:	42ae      	cmp	r6, r5
 23fa2a8:	d004      	beq.n	23fa2b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
 23fa2aa:	4628      	mov	r0, r5
 23fa2ac:	f003 ffb6 	bl	23fe21c <_ZN6StringD1Ev>
 23fa2b0:	3514      	adds	r5, #20
 23fa2b2:	e7f8      	b.n	23fa2a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fa2b4:	6820      	ldr	r0, [r4, #0]
 23fa2b6:	f000 feb7 	bl	23fb028 <free>
    AllocatorT::free(data_);
}
 23fa2ba:	4620      	mov	r0, r4
 23fa2bc:	bd70      	pop	{r4, r5, r6, pc}
	...

023fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>:
      void _M_reset()
 23fa2c0:	b513      	push	{r0, r1, r4, lr}
	return this->_M_index != __index_type(variant_npos);
 23fa2c2:	7c03      	ldrb	r3, [r0, #16]
      void _M_reset()
 23fa2c4:	4604      	mov	r4, r0
	if (!_M_valid()) [[unlikely]]
 23fa2c6:	2bff      	cmp	r3, #255	; 0xff
 23fa2c8:	d008      	beq.n	23fa2dc <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv+0x1c>
    {
      constexpr auto& __vtable = __detail::__variant::__gen_vtable<
	_Result_type, _Visitor&&, _Variants&&...>::_S_vtable;

      auto __func_ptr = __vtable._M_access(__variants.index()...);
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fa2ca:	4a05      	ldr	r2, [pc, #20]	; (23fa2e0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv+0x20>)
	  return make_signed_t<__index_type>(this->_M_index);
 23fa2cc:	b25b      	sxtb	r3, r3
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fa2ce:	4601      	mov	r1, r0
 23fa2d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fa2d4:	a801      	add	r0, sp, #4
 23fa2d6:	4798      	blx	r3
	_M_index = static_cast<__index_type>(variant_npos);
 23fa2d8:	23ff      	movs	r3, #255	; 0xff
 23fa2da:	7423      	strb	r3, [r4, #16]
      }
 23fa2dc:	b002      	add	sp, #8
 23fa2de:	bd10      	pop	{r4, pc}
 23fa2e0:	023ff7cc 	.word	0x023ff7cc

023fa2e4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESL_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fa2e4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa2e6:	e9d1 4300 	ldrd	r4, r3, [r1]
 23fa2ea:	2628      	movs	r6, #40	; 0x28
 23fa2ec:	460d      	mov	r5, r1
 23fa2ee:	fb06 4603 	mla	r6, r6, r3, r4
        for (; p != end; ++p) {
 23fa2f2:	42a6      	cmp	r6, r4
 23fa2f4:	d008      	beq.n	23fa308 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESL_SO_+0x24>
      { _M_reset(); }
 23fa2f6:	f104 0010 	add.w	r0, r4, #16
 23fa2fa:	f7ff ffe1 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
   *  @tparam _T2  Type of second object.
   *
   *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
   */
  template<typename _T1, typename _T2>
    struct pair
 23fa2fe:	4620      	mov	r0, r4
 23fa300:	f003 ff8c 	bl	23fe21c <_ZN6StringD1Ev>
 23fa304:	3428      	adds	r4, #40	; 0x28
 23fa306:	e7f4      	b.n	23fa2f2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESL_SO_+0xe>
    ::free(ptr);
 23fa308:	6828      	ldr	r0, [r5, #0]
      }
 23fa30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fa30e:	f000 be8b 	b.w	23fb028 <free>

023fa312 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESL_SO_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fa312:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fa314:	e9d1 5300 	ldrd	r5, r3, [r1]
 23fa318:	2618      	movs	r6, #24
 23fa31a:	460c      	mov	r4, r1
 23fa31c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fa320:	42ae      	cmp	r6, r5
 23fa322:	d004      	beq.n	23fa32e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESL_SO_+0x1c>
      { _M_reset(); }
 23fa324:	4628      	mov	r0, r5
 23fa326:	f7ff ffcb 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fa32a:	3518      	adds	r5, #24
 23fa32c:	e7f8      	b.n	23fa320 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE8_M_resetEvEUlOT_E_RSt7variantIJS4_bijxydS5_S7_SC_SG_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESL_SO_+0xe>
    ::free(ptr);
 23fa32e:	6820      	ldr	r0, [r4, #0]
      }
 23fa330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fa334:	f000 be78 	b.w	23fb028 <free>

023fa338 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fa338:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fa33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa33c:	4604      	mov	r4, r0
 23fa33e:	460d      	mov	r5, r1
 23fa340:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fa342:	d916      	bls.n	23fa372 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 23fa344:	4290      	cmp	r0, r2
 23fa346:	d215      	bcs.n	23fa374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
 23fa348:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fa34c:	1a75      	subs	r5, r6, r1
 23fa34e:	f1a1 0714 	sub.w	r7, r1, #20
 23fa352:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fa354:	42b7      	cmp	r7, r6
 23fa356:	d01c      	beq.n	23fa392 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 23fa358:	b12c      	cbz	r4, 23fa366 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 23fa35a:	4631      	mov	r1, r6
 23fa35c:	4620      	mov	r0, r4
 23fa35e:	f003 fff4 	bl	23fe34a <_ZN6StringC1EOS_>
 23fa362:	7c33      	ldrb	r3, [r6, #16]
 23fa364:	7423      	strb	r3, [r4, #16]
 23fa366:	4630      	mov	r0, r6
 23fa368:	f003 ff58 	bl	23fe21c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fa36c:	3e14      	subs	r6, #20
 23fa36e:	3c14      	subs	r4, #20
 23fa370:	e7f0      	b.n	23fa354 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fa372:	d00e      	beq.n	23fa392 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 23fa374:	42b5      	cmp	r5, r6
 23fa376:	d00c      	beq.n	23fa392 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 23fa378:	b12c      	cbz	r4, 23fa386 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 23fa37a:	4629      	mov	r1, r5
 23fa37c:	4620      	mov	r0, r4
 23fa37e:	f003 ffe4 	bl	23fe34a <_ZN6StringC1EOS_>
 23fa382:	7c2b      	ldrb	r3, [r5, #16]
 23fa384:	7423      	strb	r3, [r4, #16]
 23fa386:	4628      	mov	r0, r5
 23fa388:	f003 ff48 	bl	23fe21c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fa38c:	3514      	adds	r5, #20
 23fa38e:	3414      	adds	r4, #20
 23fa390:	e7f0      	b.n	23fa374 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
 23fa392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fa394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        capacity_(0) {
 23fa394:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
 23fa39a:	e9c0 3300 	strd	r3, r3, [r0]
 23fa39e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa3a0:	684f      	ldr	r7, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa3a2:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa3a4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fa3a6:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fa3a8:	dd24      	ble.n	23fa3f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fa3aa:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
 23fa3ae:	fb08 f007 	mul.w	r0, r8, r7
 23fa3b2:	f000 fe2b 	bl	23fb00c <malloc>
            if (!d) {
 23fa3b6:	4605      	mov	r5, r0
 23fa3b8:	b1e0      	cbz	r0, 23fa3f4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
            move(d, data_, data_ + size_);
 23fa3ba:	e9d4 1200 	ldrd	r1, r2, [r4]
 23fa3be:	fb08 1202 	mla	r2, r8, r2, r1
 23fa3c2:	f7ff ffb9 	bl	23fa338 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fa3c6:	6820      	ldr	r0, [r4, #0]
 23fa3c8:	f000 fe2e 	bl	23fb028 <free>
        data_ = d;
 23fa3cc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 23fa3ce:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fa3d0:	e9d6 7300 	ldrd	r7, r3, [r6]
 23fa3d4:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
 23fa3d8:	45b8      	cmp	r8, r7
 23fa3da:	d009      	beq.n	23fa3f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
 23fa3dc:	4639      	mov	r1, r7
 23fa3de:	4628      	mov	r0, r5
 23fa3e0:	f003 ffcd 	bl	23fe37e <_ZN6StringC1ERKS_>
 23fa3e4:	7c3b      	ldrb	r3, [r7, #16]
 23fa3e6:	3514      	adds	r5, #20
 23fa3e8:	f805 3c04 	strb.w	r3, [r5, #-4]
 23fa3ec:	3714      	adds	r7, #20
 23fa3ee:	e7f3      	b.n	23fa3d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
 23fa3f0:	6873      	ldr	r3, [r6, #4]
 23fa3f2:	6063      	str	r3, [r4, #4]
}
 23fa3f4:	4620      	mov	r0, r4
 23fa3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

023fa3fc <_GLOBAL__sub_I_SystemMode>:
 23fa3fc:	b570      	push	{r4, r5, r6, lr}
              error_(SYSTEM_ERROR_NONE) {
 23fa3fe:	2400      	movs	r4, #0
 23fa400:	4b23      	ldr	r3, [pc, #140]	; (23fa490 <_GLOBAL__sub_I_SystemMode+0x94>)
    SleepResult() {}
 23fa402:	4a24      	ldr	r2, [pc, #144]	; (23fa494 <_GLOBAL__sub_I_SystemMode+0x98>)
 23fa404:	b08c      	sub	sp, #48	; 0x30
 23fa406:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
 23fa408:	e9c3 4400 	strd	r4, r4, [r3]
        set_system_mode(mode);
 23fa40c:	2002      	movs	r0, #2
 23fa40e:	f000 fc59 	bl	23facc4 <set_system_mode>
        capacity_(0) {
 23fa412:	e9cd 4400 	strd	r4, r4, [sp]
 23fa416:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial1, level, filters) {
 23fa418:	f004 fecc 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
        filter_(level, filters) {
 23fa41c:	4c1e      	ldr	r4, [pc, #120]	; (23fa498 <_GLOBAL__sub_I_SystemMode+0x9c>)
 23fa41e:	4605      	mov	r5, r0
 23fa420:	4626      	mov	r6, r4
 23fa422:	4669      	mov	r1, sp
 23fa424:	a803      	add	r0, sp, #12
 23fa426:	f7ff ffb5 	bl	23fa394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
 23fa42a:	a903      	add	r1, sp, #12
 23fa42c:	a806      	add	r0, sp, #24
 23fa42e:	f7ff ffb1 	bl	23fa394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fa432:	4b1a      	ldr	r3, [pc, #104]	; (23fa49c <_GLOBAL__sub_I_SystemMode+0xa0>)
 23fa434:	a906      	add	r1, sp, #24
 23fa436:	f846 3b04 	str.w	r3, [r6], #4
 23fa43a:	a809      	add	r0, sp, #36	; 0x24
 23fa43c:	f7ff ffaa 	bl	23fa394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fa440:	aa09      	add	r2, sp, #36	; 0x24
 23fa442:	211e      	movs	r1, #30
 23fa444:	4630      	mov	r0, r6
 23fa446:	f003 f98b 	bl	23fd760 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fa44a:	a809      	add	r0, sp, #36	; 0x24
 23fa44c:	f7ff ff24 	bl	23fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fa450:	a806      	add	r0, sp, #24
 23fa452:	f7ff ff21 	bl	23fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa456:	4b12      	ldr	r3, [pc, #72]	; (23fa4a0 <_GLOBAL__sub_I_SystemMode+0xa4>)
 23fa458:	6225      	str	r5, [r4, #32]
 23fa45a:	6023      	str	r3, [r4, #0]
 23fa45c:	a803      	add	r0, sp, #12
 23fa45e:	f7ff ff1b 	bl	23fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fa462:	4b10      	ldr	r3, [pc, #64]	; (23fa4a4 <_GLOBAL__sub_I_SystemMode+0xa8>)
 23fa464:	6023      	str	r3, [r4, #0]
        Serial1.begin(baud);
 23fa466:	f004 fea5 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
 23fa46a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23fa46e:	f004 f8eb 	bl	23fe648 <_ZN11USARTSerial5beginEm>
        LogManager::instance()->addHandler(this);
 23fa472:	f002 fe89 	bl	23fd188 <_ZN5spark10LogManager8instanceEv>
 23fa476:	4621      	mov	r1, r4
 23fa478:	f003 f88c 	bl	23fd594 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
Serial1LogHandler logHandler(115200);
 23fa47c:	4668      	mov	r0, sp
 23fa47e:	f7ff ff0b 	bl	23fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
CloudEvent event;                         // define cloud event (publish)
 23fa482:	4809      	ldr	r0, [pc, #36]	; (23fa4a8 <_GLOBAL__sub_I_SystemMode+0xac>)
 23fa484:	b00c      	add	sp, #48	; 0x30
 23fa486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
CloudEvent event;                         // define cloud event (publish)
 23fa48a:	f001 bd65 	b.w	23fbf58 <_ZN8particle10CloudEventC1Ev>
 23fa48e:	bf00      	nop
 23fa490:	1007ae6c 	.word	0x1007ae6c
 23fa494:	ffff0000 	.word	0xffff0000
 23fa498:	1007ae94 	.word	0x1007ae94
 23fa49c:	023ff7a4 	.word	0x023ff7a4
 23fa4a0:	023ffca0 	.word	0x023ffca0
 23fa4a4:	023ff7bc 	.word	0x023ff7bc
 23fa4a8:	1007ae78 	.word	0x1007ae78

023fa4ac <_Z14publish_statusv>:
void publish_status() {
 23fa4ac:	b570      	push	{r4, r5, r6, lr}
 23fa4ae:	b08c      	sub	sp, #48	; 0x30
 23fa4b0:	a906      	add	r1, sp, #24
 23fa4b2:	2018      	movs	r0, #24
 23fa4b4:	f7ff fcdc 	bl	23f9e70 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
 23fa4b8:	1e04      	subs	r4, r0, #0
        return val;
 23fa4ba:	bfa8      	it	ge
 23fa4bc:	9c06      	ldrge	r4, [sp, #24]
  int batteryState = System.batteryState();
 23fa4be:	f7ff fd0b 	bl	23f9ed8 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23fa4c2:	4605      	mov	r5, r0
  float batterySoc = System.batteryCharge();                     
 23fa4c4:	f7ff fcf6 	bl	23f9eb4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23fa4c8:	ee10 6a10 	vmov	r6, s0
  particle::Variant obj;
 23fa4cc:	2218      	movs	r2, #24
 23fa4ce:	2100      	movs	r1, #0
 23fa4d0:	4668      	mov	r0, sp
 23fa4d2:	f004 ff06 	bl	23ff2e2 <memset>
  obj.set("Battery charge %:", batterySoc);
 23fa4d6:	4630      	mov	r0, r6
 23fa4d8:	f7ff fa16 	bl	23f9908 <__aeabi_f2d>
	_M_index{_Np}
 23fa4dc:	2306      	movs	r3, #6
 23fa4de:	aa06      	add	r2, sp, #24
 23fa4e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 23fa4e4:	4945      	ldr	r1, [pc, #276]	; (23fa5fc <_Z14publish_statusv+0x150>)
 23fa4e6:	4668      	mov	r0, sp
 23fa4e8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 23fa4ec:	f004 fc2e 	bl	23fed4c <_ZN8particle7Variant3setEPKcS0_>
      { _M_reset(); }
 23fa4f0:	a806      	add	r0, sp, #24
 23fa4f2:	f7ff fee5 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
  obj.set("Battery state:", batteryStates[std::max(0, batteryState)]);
 23fa4f6:	4b42      	ldr	r3, [pc, #264]	; (23fa600 <_Z14publish_statusv+0x154>)
 23fa4f8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 23fa4fc:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 23fa500:	a806      	add	r0, sp, #24
 23fa502:	f7ff fc8c 	bl	23f9e1e <_ZN8particle7VariantC1EPKc>
 23fa506:	aa06      	add	r2, sp, #24
 23fa508:	493e      	ldr	r1, [pc, #248]	; (23fa604 <_Z14publish_statusv+0x158>)
 23fa50a:	4668      	mov	r0, sp
 23fa50c:	f004 fc1e 	bl	23fed4c <_ZN8particle7Variant3setEPKcS0_>
 23fa510:	a806      	add	r0, sp, #24
 23fa512:	f7ff fed5 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
  obj.set("Power source:", powerSources[std::max(0, powerSource)]);
 23fa516:	4b3c      	ldr	r3, [pc, #240]	; (23fa608 <_Z14publish_statusv+0x15c>)
 23fa518:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 23fa51c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 23fa520:	a806      	add	r0, sp, #24
 23fa522:	f7ff fc7c 	bl	23f9e1e <_ZN8particle7VariantC1EPKc>
 23fa526:	4939      	ldr	r1, [pc, #228]	; (23fa60c <_Z14publish_statusv+0x160>)
 23fa528:	aa06      	add	r2, sp, #24
 23fa52a:	4668      	mov	r0, sp
 23fa52c:	f004 fc0e 	bl	23fed4c <_ZN8particle7Variant3setEPKcS0_>
 23fa530:	a806      	add	r0, sp, #24
 23fa532:	f7ff fec5 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
  if (state == STATE_WAIT_CONNECTED){
 23fa536:	4b36      	ldr	r3, [pc, #216]	; (23fa610 <_Z14publish_statusv+0x164>)
 23fa538:	781b      	ldrb	r3, [r3, #0]
 23fa53a:	2b00      	cmp	r3, #0
 23fa53c:	d137      	bne.n	23fa5ae <_Z14publish_statusv+0x102>
    event.name("Powered");
 23fa53e:	4935      	ldr	r1, [pc, #212]	; (23fa614 <_Z14publish_statusv+0x168>)
    event.name("Sleep");
 23fa540:	4835      	ldr	r0, [pc, #212]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa542:	f001 fdb1 	bl	23fc0a8 <_ZN8particle10CloudEvent4nameEPKc>
  event.data(obj);
 23fa546:	4669      	mov	r1, sp
 23fa548:	4833      	ldr	r0, [pc, #204]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa54a:	f001 fe2b 	bl	23fc1a4 <_ZN8particle10CloudEvent4dataERKNS_7VariantE>
  Particle.publish(event);
 23fa54e:	4932      	ldr	r1, [pc, #200]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa550:	a806      	add	r0, sp, #24
 23fa552:	f001 fb8d 	bl	23fbc70 <_ZN8particle10CloudEventC1ERKS0_>
 23fa556:	a906      	add	r1, sp, #24
 23fa558:	4830      	ldr	r0, [pc, #192]	; (23fa61c <_Z14publish_statusv+0x170>)
 23fa55a:	f000 ff54 	bl	23fb406 <_ZN10CloudClass7publishEN8particle10CloudEventE>
 23fa55e:	a806      	add	r0, sp, #24
 23fa560:	f001 fd12 	bl	23fbf88 <_ZN8particle10CloudEventD1Ev>
  Log.info("publishing %s", obj.toJSON().c_str());
 23fa564:	4669      	mov	r1, sp
 23fa566:	a806      	add	r0, sp, #24
 23fa568:	f004 f994 	bl	23fe894 <_ZNK8particle7Variant6toJSONEv>
 23fa56c:	9a06      	ldr	r2, [sp, #24]
 23fa56e:	492c      	ldr	r1, [pc, #176]	; (23fa620 <_Z14publish_statusv+0x174>)
 23fa570:	482c      	ldr	r0, [pc, #176]	; (23fa624 <_Z14publish_statusv+0x178>)
 23fa572:	f7ff fc65 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
 23fa576:	a806      	add	r0, sp, #24
 23fa578:	f003 fe50 	bl	23fe21c <_ZN6StringD1Ev>
        return hal_timer_millis(nullptr);
 23fa57c:	2000      	movs	r0, #0
 23fa57e:	f000 fa19 	bl	23fa9b4 <hal_timer_millis>
        while (_while() && !_condition()) {
 23fa582:	f64e 2560 	movw	r5, #60000	; 0xea60
        return hal_timer_millis(nullptr);
 23fa586:	4604      	mov	r4, r0
     * This method is a shorthand for `event.status() == CloudEvent::SENDING`.
     *
     * @return `true` if the event is being sent to the Cloud, otherwise `false`.
     */
    bool isSending() const {
        return status() == Status::SENDING;
 23fa588:	4e23      	ldr	r6, [pc, #140]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa58a:	2000      	movs	r0, #0
 23fa58c:	f000 fa12 	bl	23fa9b4 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
 23fa590:	1b00      	subs	r0, r0, r4
 23fa592:	f161 0100 	sbc.w	r1, r1, #0
        while (_while() && !_condition()) {
 23fa596:	42a8      	cmp	r0, r5
 23fa598:	f171 0300 	sbcs.w	r3, r1, #0
 23fa59c:	d209      	bcs.n	23fa5b2 <_Z14publish_statusv+0x106>
 23fa59e:	4630      	mov	r0, r6
 23fa5a0:	f001 fb8a 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
 23fa5a4:	2801      	cmp	r0, #1
 23fa5a6:	d104      	bne.n	23fa5b2 <_Z14publish_statusv+0x106>
            spark_process();
 23fa5a8:	f000 fc26 	bl	23fadf8 <spark_process>
        while (_while() && !_condition()) {
 23fa5ac:	e7ed      	b.n	23fa58a <_Z14publish_statusv+0xde>
    event.name("Sleep");
 23fa5ae:	491e      	ldr	r1, [pc, #120]	; (23fa628 <_Z14publish_statusv+0x17c>)
 23fa5b0:	e7c6      	b.n	23fa540 <_Z14publish_statusv+0x94>
 23fa5b2:	4819      	ldr	r0, [pc, #100]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa5b4:	f001 fb80 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
     * This method is a shorthand for `event.status() == CloudEvent::SENT`.
     *
     * @return `true` if the event was sent successfully, otherwise `false`.
     */
    bool isSent() const {
        return status() == Status::SENT;
 23fa5b8:	4817      	ldr	r0, [pc, #92]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa5ba:	f001 fb7d 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
  if (event.isSent()) {
 23fa5be:	2802      	cmp	r0, #2
 23fa5c0:	d10b      	bne.n	23fa5da <_Z14publish_statusv+0x12e>
    Log.info("publish succeeded");
 23fa5c2:	491a      	ldr	r1, [pc, #104]	; (23fa62c <_Z14publish_statusv+0x180>)
 23fa5c4:	4817      	ldr	r0, [pc, #92]	; (23fa624 <_Z14publish_statusv+0x178>)
 23fa5c6:	f7ff fc3b 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
    event.clear();
 23fa5ca:	4813      	ldr	r0, [pc, #76]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa5cc:	f001 fcf2 	bl	23fbfb4 <_ZN8particle10CloudEvent5clearEv>
 23fa5d0:	4668      	mov	r0, sp
 23fa5d2:	f7ff fe75 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23fa5d6:	b00c      	add	sp, #48	; 0x30
 23fa5d8:	bd70      	pop	{r4, r5, r6, pc}
     * via `error()`.
     *
     * @return `true` if the event is not in a failed or invalid state, otherwise `false`.
     */
    bool isOk() const {
        auto s = status();
 23fa5da:	480f      	ldr	r0, [pc, #60]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa5dc:	f001 fb6c 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
        return s != Status::FAILED && s != Status::INVALID;
 23fa5e0:	3803      	subs	r0, #3
  if (!event.isOk()) {
 23fa5e2:	b2c0      	uxtb	r0, r0
 23fa5e4:	2801      	cmp	r0, #1
 23fa5e6:	d8f3      	bhi.n	23fa5d0 <_Z14publish_statusv+0x124>
    Log.info("publish failed error=%d", event.error());
 23fa5e8:	480b      	ldr	r0, [pc, #44]	; (23fa618 <_Z14publish_statusv+0x16c>)
 23fa5ea:	f001 fbc7 	bl	23fbd7c <_ZNK8particle10CloudEvent5errorEv>
 23fa5ee:	4910      	ldr	r1, [pc, #64]	; (23fa630 <_Z14publish_statusv+0x184>)
 23fa5f0:	4602      	mov	r2, r0
 23fa5f2:	480c      	ldr	r0, [pc, #48]	; (23fa624 <_Z14publish_statusv+0x178>)
 23fa5f4:	f7ff fc24 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
 23fa5f8:	e7e7      	b.n	23fa5ca <_Z14publish_statusv+0x11e>
 23fa5fa:	bf00      	nop
 23fa5fc:	023ff62d 	.word	0x023ff62d
 23fa600:	023ff878 	.word	0x023ff878
 23fa604:	023ff63f 	.word	0x023ff63f
 23fa608:	023ff860 	.word	0x023ff860
 23fa60c:	023ff64e 	.word	0x023ff64e
 23fa610:	1007aeba 	.word	0x1007aeba
 23fa614:	023ff65c 	.word	0x023ff65c
 23fa618:	1007ae78 	.word	0x1007ae78
 23fa61c:	1007afc0 	.word	0x1007afc0
 23fa620:	023ff66a 	.word	0x023ff66a
 23fa624:	1007af38 	.word	0x1007af38
 23fa628:	023ff664 	.word	0x023ff664
 23fa62c:	023ff678 	.word	0x023ff678
 23fa630:	023ff68a 	.word	0x023ff68a

023fa634 <loop>:
void loop() {
 23fa634:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fa636:	ed2d 8b02 	vpush	{d8}
 23fa63a:	b08b      	sub	sp, #44	; 0x2c
  int batteryState = System.batteryState();     
 23fa63c:	f7ff fc4c 	bl	23f9ed8 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23fa640:	4604      	mov	r4, r0
  float batterySoc = System.batteryCharge();
 23fa642:	f7ff fc37 	bl	23f9eb4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23fa646:	ee10 5a10 	vmov	r5, s0
  Log.info("Battery state: %s", batteryStates[std::max(0, batteryState)]);
 23fa64a:	4e7f      	ldr	r6, [pc, #508]	; (23fa848 <loop+0x214>)
 23fa64c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 23fa650:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 23fa654:	497d      	ldr	r1, [pc, #500]	; (23fa84c <loop+0x218>)
 23fa656:	487e      	ldr	r0, [pc, #504]	; (23fa850 <loop+0x21c>)
 23fa658:	f7ff fbf2 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("Battery charge: %f", batterySoc);
 23fa65c:	4628      	mov	r0, r5
 23fa65e:	f7ff f953 	bl	23f9908 <__aeabi_f2d>
  switch(state) {
 23fa662:	4c7c      	ldr	r4, [pc, #496]	; (23fa854 <loop+0x220>)
  Log.info("Battery charge: %f", batterySoc);
 23fa664:	460b      	mov	r3, r1
 23fa666:	4602      	mov	r2, r0
 23fa668:	497b      	ldr	r1, [pc, #492]	; (23fa858 <loop+0x224>)
 23fa66a:	4879      	ldr	r0, [pc, #484]	; (23fa850 <loop+0x21c>)
 23fa66c:	f7ff fbe8 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
  switch(state) {
 23fa670:	7823      	ldrb	r3, [r4, #0]
 23fa672:	2b04      	cmp	r3, #4
 23fa674:	d85d      	bhi.n	23fa732 <loop+0xfe>
 23fa676:	e8df f013 	tbh	[pc, r3, lsl #1]
 23fa67a:	0005      	.short	0x0005
 23fa67c:	00940017 	.word	0x00940017
 23fa680:	00d6009f 	.word	0x00d6009f
 23fa684:	f000 fbd4 	bl	23fae30 <spark_cloud_flag_connected>
 23fa688:	4d74      	ldr	r5, [pc, #464]	; (23fa85c <loop+0x228>)
            if (Particle.connected()) {
 23fa68a:	2800      	cmp	r0, #0
 23fa68c:	d03e      	beq.n	23fa70c <loop+0xd8>
 23fa68e:	f000 f959 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
                Log.info("connected to the cloud in %lu ms", millis() - stateTime);
 23fa692:	682a      	ldr	r2, [r5, #0]
 23fa694:	4972      	ldr	r1, [pc, #456]	; (23fa860 <loop+0x22c>)
 23fa696:	1a82      	subs	r2, r0, r2
 23fa698:	486d      	ldr	r0, [pc, #436]	; (23fa850 <loop+0x21c>)
 23fa69a:	f7ff fbd1 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
                state = STATE_PUBLISH; 
 23fa69e:	2301      	movs	r3, #1
 23fa6a0:	7023      	strb	r3, [r4, #0]
 23fa6a2:	f000 f94f 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
                stateTime = millis(); 
 23fa6a6:	6028      	str	r0, [r5, #0]
            batteryState = System.batteryState();     
 23fa6a8:	f7ff fc16 	bl	23f9ed8 <_ZNK11SystemClass12batteryStateEv.isra.0>
 23fa6ac:	4605      	mov	r5, r0
            batterySoc = System.batteryCharge();
 23fa6ae:	f7ff fc01 	bl	23f9eb4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
 23fa6b2:	eeb0 8a40 	vmov.f32	s16, s0
            Log.info("Battery state: %s", batteryStates[std::max(0, batteryState)]);
 23fa6b6:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
 23fa6ba:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
 23fa6be:	4963      	ldr	r1, [pc, #396]	; (23fa84c <loop+0x218>)
 23fa6c0:	4863      	ldr	r0, [pc, #396]	; (23fa850 <loop+0x21c>)
 23fa6c2:	f7ff fbbd 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
            Log.info("Battery charge: %f", batterySoc);
 23fa6c6:	ee18 0a10 	vmov	r0, s16
 23fa6ca:	f7ff f91d 	bl	23f9908 <__aeabi_f2d>
            if ((batterySoc >= LOW_BATTERY_THRESHOLD) && ((batteryState == 2) || (batteryState == 3))) {
 23fa6ce:	eef2 8a0e 	vmov.f32	s17, #46	; 0x41700000  15.0
            Log.info("Battery charge: %f", batterySoc);
 23fa6d2:	4602      	mov	r2, r0
 23fa6d4:	460b      	mov	r3, r1
 23fa6d6:	485e      	ldr	r0, [pc, #376]	; (23fa850 <loop+0x21c>)
 23fa6d8:	495f      	ldr	r1, [pc, #380]	; (23fa858 <loop+0x224>)
 23fa6da:	f7ff fbb1 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
            if ((batterySoc >= LOW_BATTERY_THRESHOLD) && ((batteryState == 2) || (batteryState == 3))) {
 23fa6de:	eeb4 8ae8 	vcmpe.f32	s16, s17
 23fa6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fa6e6:	db28      	blt.n	23fa73a <loop+0x106>
 23fa6e8:	3d02      	subs	r5, #2
 23fa6ea:	2d01      	cmp	r5, #1
 23fa6ec:	d825      	bhi.n	23fa73a <loop+0x106>
              if ((lastPublish == 0) || (millis() - lastPublish >= PUBLISH_PERIOD.count())) {
 23fa6ee:	4d5d      	ldr	r5, [pc, #372]	; (23fa864 <loop+0x230>)
 23fa6f0:	682b      	ldr	r3, [r5, #0]
 23fa6f2:	b9bb      	cbnz	r3, 23fa724 <loop+0xf0>
 23fa6f4:	f000 f926 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
                state = STATE_WAIT_CONNECTED;    // go back to STATE_WAIT_CONNECTED
 23fa6f8:	2300      	movs	r3, #0
                lastPublish = millis();
 23fa6fa:	6028      	str	r0, [r5, #0]
                state = STATE_WAIT_CONNECTED;    // go back to STATE_WAIT_CONNECTED
 23fa6fc:	7023      	strb	r3, [r4, #0]
}
 23fa6fe:	b00b      	add	sp, #44	; 0x2c
 23fa700:	ecbd 8b02 	vpop	{d8}
 23fa704:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
                publish_status();
 23fa708:	f7ff bed0 	b.w	23fa4ac <_Z14publish_statusv>
 23fa70c:	f000 f91a 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
              if (millis() - stateTime >= connectMaxTime.count()) {
 23fa710:	682b      	ldr	r3, [r5, #0]
 23fa712:	1ac0      	subs	r0, r0, r3
 23fa714:	4b54      	ldr	r3, [pc, #336]	; (23fa868 <loop+0x234>)
 23fa716:	4298      	cmp	r0, r3
 23fa718:	d90b      	bls.n	23fa732 <loop+0xfe>
                Log.info("failed to connect, going to sleep");
 23fa71a:	4954      	ldr	r1, [pc, #336]	; (23fa86c <loop+0x238>)
                Log.info("firmware update timed out");
 23fa71c:	484c      	ldr	r0, [pc, #304]	; (23fa850 <loop+0x21c>)
 23fa71e:	f7ff fb8f 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
 23fa722:	e047      	b.n	23fa7b4 <loop+0x180>
 23fa724:	f000 f90e 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
              if ((lastPublish == 0) || (millis() - lastPublish >= PUBLISH_PERIOD.count())) {
 23fa728:	682b      	ldr	r3, [r5, #0]
 23fa72a:	1ac0      	subs	r0, r0, r3
 23fa72c:	4b50      	ldr	r3, [pc, #320]	; (23fa870 <loop+0x23c>)
 23fa72e:	4298      	cmp	r0, r3
 23fa730:	d8e0      	bhi.n	23fa6f4 <loop+0xc0>
}
 23fa732:	b00b      	add	sp, #44	; 0x2c
 23fa734:	ecbd 8b02 	vpop	{d8}
 23fa738:	bdf0      	pop	{r4, r5, r6, r7, pc}
              batterySoc = System.batteryCharge();
 23fa73a:	f7ff fbbb 	bl	23f9eb4 <_ZNK11SystemClass13batteryChargeEv.isra.0>
              Log.info("Battery charge: %f", batterySoc);
 23fa73e:	ee10 0a10 	vmov	r0, s0
              batterySoc = System.batteryCharge();
 23fa742:	eeb0 8a40 	vmov.f32	s16, s0
              Log.info("Battery charge: %f", batterySoc);
 23fa746:	f7ff f8df 	bl	23f9908 <__aeabi_f2d>
 23fa74a:	4602      	mov	r2, r0
 23fa74c:	460b      	mov	r3, r1
 23fa74e:	4606      	mov	r6, r0
 23fa750:	460f      	mov	r7, r1
 23fa752:	483f      	ldr	r0, [pc, #252]	; (23fa850 <loop+0x21c>)
 23fa754:	4940      	ldr	r1, [pc, #256]	; (23fa858 <loop+0x224>)
 23fa756:	f7ff fb73 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
              if (batterySoc >= LOW_BATTERY_THRESHOLD) {
 23fa75a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 23fa75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fa762:	db17      	blt.n	23fa794 <loop+0x160>
                publish_status();
 23fa764:	f7ff fea2 	bl	23fa4ac <_Z14publish_statusv>
 23fa768:	f000 f8ec 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
              if (millis() - stateTime < cloudMinTime.count()) {
 23fa76c:	4b3b      	ldr	r3, [pc, #236]	; (23fa85c <loop+0x228>)
 23fa76e:	681d      	ldr	r5, [r3, #0]
 23fa770:	f242 730f 	movw	r3, #9999	; 0x270f
 23fa774:	1b40      	subs	r0, r0, r5
 23fa776:	4298      	cmp	r0, r3
 23fa778:	d81c      	bhi.n	23fa7b4 <loop+0x180>
 23fa77a:	f000 f8e3 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
                Log.info("waiting %lu ms before sleeping", (unsigned long)(cloudMinTime.count() - (millis() - stateTime)));
 23fa77e:	f505 521c 	add.w	r2, r5, #9984	; 0x2700
 23fa782:	3210      	adds	r2, #16
 23fa784:	1a12      	subs	r2, r2, r0
 23fa786:	493b      	ldr	r1, [pc, #236]	; (23fa874 <loop+0x240>)
 23fa788:	4831      	ldr	r0, [pc, #196]	; (23fa850 <loop+0x21c>)
 23fa78a:	f7ff fb59 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
                state = STATE_PRE_SLEEP;
 23fa78e:	2302      	movs	r3, #2
                state = STATE_SLEEP;
 23fa790:	7023      	strb	r3, [r4, #0]
}
 23fa792:	e7ce      	b.n	23fa732 <loop+0xfe>
                Log.info("Fail to publish due to Battery charge: %f", batterySoc);
 23fa794:	4632      	mov	r2, r6
 23fa796:	463b      	mov	r3, r7
 23fa798:	4937      	ldr	r1, [pc, #220]	; (23fa878 <loop+0x244>)
 23fa79a:	482d      	ldr	r0, [pc, #180]	; (23fa850 <loop+0x21c>)
 23fa79c:	f7ff fb50 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
 23fa7a0:	e7e2      	b.n	23fa768 <loop+0x134>
 23fa7a2:	f000 f8cf 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
            if (millis() - stateTime >= cloudMinTime.count()) {
 23fa7a6:	4b2d      	ldr	r3, [pc, #180]	; (23fa85c <loop+0x228>)
 23fa7a8:	681b      	ldr	r3, [r3, #0]
 23fa7aa:	1ac0      	subs	r0, r0, r3
 23fa7ac:	f242 730f 	movw	r3, #9999	; 0x270f
 23fa7b0:	4298      	cmp	r0, r3
 23fa7b2:	d9be      	bls.n	23fa732 <loop+0xfe>
                state = STATE_SLEEP;
 23fa7b4:	2303      	movs	r3, #3
 23fa7b6:	e7eb      	b.n	23fa790 <loop+0x15c>
            if (firmwareUpdateInProgress) {
 23fa7b8:	4b30      	ldr	r3, [pc, #192]	; (23fa87c <loop+0x248>)
 23fa7ba:	781b      	ldrb	r3, [r3, #0]
 23fa7bc:	b153      	cbz	r3, 23fa7d4 <loop+0x1a0>
                Log.info("firmware update detected");
 23fa7be:	4930      	ldr	r1, [pc, #192]	; (23fa880 <loop+0x24c>)
 23fa7c0:	4823      	ldr	r0, [pc, #140]	; (23fa850 <loop+0x21c>)
 23fa7c2:	f7ff fb3d 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
                state = STATE_FIRMWARE_UPDATE;
 23fa7c6:	2304      	movs	r3, #4
 23fa7c8:	7023      	strb	r3, [r4, #0]
 23fa7ca:	f000 f8bb 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
                stateTime = millis();
 23fa7ce:	4b23      	ldr	r3, [pc, #140]	; (23fa85c <loop+0x228>)
 23fa7d0:	6018      	str	r0, [r3, #0]
                break;
 23fa7d2:	e7ae      	b.n	23fa732 <loop+0xfe>
            Log.info("going to sleep for %ld seconds", (long) sleepTime.count());
 23fa7d4:	4a2b      	ldr	r2, [pc, #172]	; (23fa884 <loop+0x250>)
 23fa7d6:	492c      	ldr	r1, [pc, #176]	; (23fa888 <loop+0x254>)
 23fa7d8:	481d      	ldr	r0, [pc, #116]	; (23fa850 <loop+0x21c>)
 23fa7da:	f7ff fb31 	bl	23f9e40 <_ZNK5spark6Logger4infoEPKcz>
              Network.disconnect();         
 23fa7de:	482b      	ldr	r0, [pc, #172]	; (23fa88c <loop+0x258>)
 23fa7e0:	f003 fadb 	bl	23fdd9a <_ZN5spark12NetworkClass10disconnectEv>
              Network.off();        
 23fa7e4:	4829      	ldr	r0, [pc, #164]	; (23fa88c <loop+0x258>)
 23fa7e6:	f003 faed 	bl	23fddc4 <_ZN5spark12NetworkClass3offEv>
              SystemSleepConfiguration config;
 23fa7ea:	a804      	add	r0, sp, #16
 23fa7ec:	f7ff fac3 	bl	23f9d76 <_ZN8particle24SystemSleepConfigurationC1Ev>
        if (valid_) {
 23fa7f0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 23fa7f4:	b113      	cbz	r3, 23fa7fc <loop+0x1c8>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 23fa7f6:	2302      	movs	r3, #2
 23fa7f8:	f88d 3018 	strb.w	r3, [sp, #24]
                .gpio(PMIC_INTERRUPT_PIN, FALLING)            // wake of PMIC _INT (toggle low when changed noted)
 23fa7fc:	2202      	movs	r2, #2
 23fa7fe:	211c      	movs	r1, #28
 23fa800:	a804      	add	r0, sp, #16
 23fa802:	f7ff fad5 	bl	23f9db0 <_ZN8particle24SystemSleepConfiguration4gpioEt13InterruptMode>
        return duration(ms.count());
 23fa806:	491f      	ldr	r1, [pc, #124]	; (23fa884 <loop+0x250>)
 23fa808:	f7ff fa5a 	bl	23f9cc0 <_ZN8particle24SystemSleepConfiguration8durationEm.isra.0>
              System.sleep(config);
 23fa80c:	a904      	add	r1, sp, #16
 23fa80e:	a801      	add	r0, sp, #4
 23fa810:	f003 fe48 	bl	23fe4a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
 23fa814:	a801      	add	r0, sp, #4
 23fa816:	f7ff faf9 	bl	23f9e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              System.reset();   // reset the system, ULP continues execution where it left off
 23fa81a:	f003 fe3f 	bl	23fe49c <_ZN11SystemClass5resetEv>
              SystemSleepConfiguration config;
 23fa81e:	a804      	add	r0, sp, #16
 23fa820:	f7ff fab9 	bl	23f9d96 <_ZN8particle24SystemSleepConfigurationD1Ev>
            break; 
 23fa824:	e785      	b.n	23fa732 <loop+0xfe>
            if (!firmwareUpdateInProgress) {
 23fa826:	4b15      	ldr	r3, [pc, #84]	; (23fa87c <loop+0x248>)
 23fa828:	781b      	ldrb	r3, [r3, #0]
 23fa82a:	b90b      	cbnz	r3, 23fa830 <loop+0x1fc>
                Log.info("firmware update completed");
 23fa82c:	4918      	ldr	r1, [pc, #96]	; (23fa890 <loop+0x25c>)
 23fa82e:	e775      	b.n	23fa71c <loop+0xe8>
 23fa830:	f000 f888 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
              if (millis() - stateTime >= firmwareUpdateMaxTime.count()) {
 23fa834:	4b09      	ldr	r3, [pc, #36]	; (23fa85c <loop+0x228>)
 23fa836:	681b      	ldr	r3, [r3, #0]
 23fa838:	1ac0      	subs	r0, r0, r3
 23fa83a:	4b16      	ldr	r3, [pc, #88]	; (23fa894 <loop+0x260>)
 23fa83c:	4298      	cmp	r0, r3
 23fa83e:	f67f af78 	bls.w	23fa732 <loop+0xfe>
                Log.info("firmware update timed out");
 23fa842:	4915      	ldr	r1, [pc, #84]	; (23fa898 <loop+0x264>)
 23fa844:	e76a      	b.n	23fa71c <loop+0xe8>
 23fa846:	bf00      	nop
 23fa848:	023ff878 	.word	0x023ff878
 23fa84c:	023ff5cd 	.word	0x023ff5cd
 23fa850:	1007af38 	.word	0x1007af38
 23fa854:	1007aeba 	.word	0x1007aeba
 23fa858:	023ff6fc 	.word	0x023ff6fc
 23fa85c:	1007aebc 	.word	0x1007aebc
 23fa860:	023ff6a2 	.word	0x023ff6a2
 23fa864:	1007ae90 	.word	0x1007ae90
 23fa868:	00057e3f 	.word	0x00057e3f
 23fa86c:	023ff6c3 	.word	0x023ff6c3
 23fa870:	000dbb9f 	.word	0x000dbb9f
 23fa874:	023ff70f 	.word	0x023ff70f
 23fa878:	023ff6e5 	.word	0x023ff6e5
 23fa87c:	1007ae8c 	.word	0x1007ae8c
 23fa880:	023ff72e 	.word	0x023ff72e
 23fa884:	0036ee80 	.word	0x0036ee80
 23fa888:	023ff747 	.word	0x023ff747
 23fa88c:	1007af64 	.word	0x1007af64
 23fa890:	023ff766 	.word	0x023ff766
 23fa894:	000493df 	.word	0x000493df
 23fa898:	023ff780 	.word	0x023ff780

023fa89c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fa89c:	b509      	push	{r0, r3, lr}
 23fa89e:	4804      	ldr	r0, [pc, #16]	; (23fa8b0 <os_mutex_recursive_create+0x14>)
 23fa8a0:	6800      	ldr	r0, [r0, #0]
 23fa8a2:	4b04      	ldr	r3, [pc, #16]	; (23fa8b4 <os_mutex_recursive_create+0x18>)
 23fa8a4:	4403      	add	r3, r0
 23fa8a6:	681b      	ldr	r3, [r3, #0]
 23fa8a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa8aa:	9302      	str	r3, [sp, #8]
 23fa8ac:	bd09      	pop	{r0, r3, pc}
 23fa8ae:	0000      	.short	0x0000
 23fa8b0:	1007adf8 	.word	0x1007adf8
 23fa8b4:	00000030 	.word	0x00000030

023fa8b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 23fa8b8:	b509      	push	{r0, r3, lr}
 23fa8ba:	4804      	ldr	r0, [pc, #16]	; (23fa8cc <os_mutex_recursive_destroy+0x14>)
 23fa8bc:	6800      	ldr	r0, [r0, #0]
 23fa8be:	4b04      	ldr	r3, [pc, #16]	; (23fa8d0 <os_mutex_recursive_destroy+0x18>)
 23fa8c0:	4403      	add	r3, r0
 23fa8c2:	681b      	ldr	r3, [r3, #0]
 23fa8c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fa8c6:	9302      	str	r3, [sp, #8]
 23fa8c8:	bd09      	pop	{r0, r3, pc}
 23fa8ca:	0000      	.short	0x0000
 23fa8cc:	1007adf8 	.word	0x1007adf8
 23fa8d0:	00000030 	.word	0x00000030

023fa8d4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 23fa8d4:	b509      	push	{r0, r3, lr}
 23fa8d6:	4804      	ldr	r0, [pc, #16]	; (23fa8e8 <os_mutex_recursive_lock+0x14>)
 23fa8d8:	6800      	ldr	r0, [r0, #0]
 23fa8da:	4b04      	ldr	r3, [pc, #16]	; (23fa8ec <os_mutex_recursive_lock+0x18>)
 23fa8dc:	4403      	add	r3, r0
 23fa8de:	681b      	ldr	r3, [r3, #0]
 23fa8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fa8e2:	9302      	str	r3, [sp, #8]
 23fa8e4:	bd09      	pop	{r0, r3, pc}
 23fa8e6:	0000      	.short	0x0000
 23fa8e8:	1007adf8 	.word	0x1007adf8
 23fa8ec:	00000030 	.word	0x00000030

023fa8f0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 23fa8f0:	b509      	push	{r0, r3, lr}
 23fa8f2:	4804      	ldr	r0, [pc, #16]	; (23fa904 <os_mutex_recursive_unlock+0x14>)
 23fa8f4:	6800      	ldr	r0, [r0, #0]
 23fa8f6:	4b04      	ldr	r3, [pc, #16]	; (23fa908 <os_mutex_recursive_unlock+0x18>)
 23fa8f8:	4403      	add	r3, r0
 23fa8fa:	681b      	ldr	r3, [r3, #0]
 23fa8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fa8fe:	9302      	str	r3, [sp, #8]
 23fa900:	bd09      	pop	{r0, r3, pc}
 23fa902:	0000      	.short	0x0000
 23fa904:	1007adf8 	.word	0x1007adf8
 23fa908:	00000030 	.word	0x00000030

023fa90c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fa90c:	b509      	push	{r0, r3, lr}
 23fa90e:	4804      	ldr	r0, [pc, #16]	; (23fa920 <HAL_RNG_GetRandomNumber+0x14>)
 23fa910:	6800      	ldr	r0, [r0, #0]
 23fa912:	4b04      	ldr	r3, [pc, #16]	; (23fa924 <HAL_RNG_GetRandomNumber+0x18>)
 23fa914:	4403      	add	r3, r0
 23fa916:	681b      	ldr	r3, [r3, #0]
 23fa918:	685b      	ldr	r3, [r3, #4]
 23fa91a:	9302      	str	r3, [sp, #8]
 23fa91c:	bd09      	pop	{r0, r3, pc}
 23fa91e:	0000      	.short	0x0000
 23fa920:	1007adf8 	.word	0x1007adf8
 23fa924:	00000000 	.word	0x00000000

023fa928 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fa928:	b509      	push	{r0, r3, lr}
 23fa92a:	4804      	ldr	r0, [pc, #16]	; (23fa93c <HAL_Delay_Microseconds+0x14>)
 23fa92c:	6800      	ldr	r0, [r0, #0]
 23fa92e:	4b04      	ldr	r3, [pc, #16]	; (23fa940 <HAL_Delay_Microseconds+0x18>)
 23fa930:	4403      	add	r3, r0
 23fa932:	681b      	ldr	r3, [r3, #0]
 23fa934:	68db      	ldr	r3, [r3, #12]
 23fa936:	9302      	str	r3, [sp, #8]
 23fa938:	bd09      	pop	{r0, r3, pc}
 23fa93a:	0000      	.short	0x0000
 23fa93c:	1007adf8 	.word	0x1007adf8
 23fa940:	00000000 	.word	0x00000000

023fa944 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fa944:	b509      	push	{r0, r3, lr}
 23fa946:	4804      	ldr	r0, [pc, #16]	; (23fa958 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fa948:	6800      	ldr	r0, [r0, #0]
 23fa94a:	4b04      	ldr	r3, [pc, #16]	; (23fa95c <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fa94c:	4403      	add	r3, r0
 23fa94e:	681b      	ldr	r3, [r3, #0]
 23fa950:	695b      	ldr	r3, [r3, #20]
 23fa952:	9302      	str	r3, [sp, #8]
 23fa954:	bd09      	pop	{r0, r3, pc}
 23fa956:	0000      	.short	0x0000
 23fa958:	1007adf8 	.word	0x1007adf8
 23fa95c:	00000000 	.word	0x00000000

023fa960 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 23fa960:	b509      	push	{r0, r3, lr}
 23fa962:	4804      	ldr	r0, [pc, #16]	; (23fa974 <HAL_EEPROM_Init+0x14>)
 23fa964:	6800      	ldr	r0, [r0, #0]
 23fa966:	4b04      	ldr	r3, [pc, #16]	; (23fa978 <HAL_EEPROM_Init+0x18>)
 23fa968:	4403      	add	r3, r0
 23fa96a:	681b      	ldr	r3, [r3, #0]
 23fa96c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fa96e:	9302      	str	r3, [sp, #8]
 23fa970:	bd09      	pop	{r0, r3, pc}
 23fa972:	0000      	.short	0x0000
 23fa974:	1007adf8 	.word	0x1007adf8
 23fa978:	00000000 	.word	0x00000000

023fa97c <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 23fa97c:	b509      	push	{r0, r3, lr}
 23fa97e:	4804      	ldr	r0, [pc, #16]	; (23fa990 <HAL_EEPROM_Get+0x14>)
 23fa980:	6800      	ldr	r0, [r0, #0]
 23fa982:	4b04      	ldr	r3, [pc, #16]	; (23fa994 <HAL_EEPROM_Get+0x18>)
 23fa984:	4403      	add	r3, r0
 23fa986:	681b      	ldr	r3, [r3, #0]
 23fa988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fa98a:	9302      	str	r3, [sp, #8]
 23fa98c:	bd09      	pop	{r0, r3, pc}
 23fa98e:	0000      	.short	0x0000
 23fa990:	1007adf8 	.word	0x1007adf8
 23fa994:	00000000 	.word	0x00000000

023fa998 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 23fa998:	b509      	push	{r0, r3, lr}
 23fa99a:	4804      	ldr	r0, [pc, #16]	; (23fa9ac <HAL_EEPROM_Put+0x14>)
 23fa99c:	6800      	ldr	r0, [r0, #0]
 23fa99e:	4b04      	ldr	r3, [pc, #16]	; (23fa9b0 <HAL_EEPROM_Put+0x18>)
 23fa9a0:	4403      	add	r3, r0
 23fa9a2:	681b      	ldr	r3, [r3, #0]
 23fa9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 23fa9a6:	9302      	str	r3, [sp, #8]
 23fa9a8:	bd09      	pop	{r0, r3, pc}
 23fa9aa:	0000      	.short	0x0000
 23fa9ac:	1007adf8 	.word	0x1007adf8
 23fa9b0:	00000000 	.word	0x00000000

023fa9b4 <hal_timer_millis>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 23fa9b4:	b509      	push	{r0, r3, lr}
 23fa9b6:	4804      	ldr	r0, [pc, #16]	; (23fa9c8 <hal_timer_millis+0x14>)
 23fa9b8:	6800      	ldr	r0, [r0, #0]
 23fa9ba:	4b04      	ldr	r3, [pc, #16]	; (23fa9cc <hal_timer_millis+0x18>)
 23fa9bc:	4403      	add	r3, r0
 23fa9be:	681b      	ldr	r3, [r3, #0]
 23fa9c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fa9c2:	9302      	str	r3, [sp, #8]
 23fa9c4:	bd09      	pop	{r0, r3, pc}
 23fa9c6:	0000      	.short	0x0000
 23fa9c8:	1007adf8 	.word	0x1007adf8
 23fa9cc:	00000000 	.word	0x00000000

023fa9d0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fa9d0:	b509      	push	{r0, r3, lr}
 23fa9d2:	4804      	ldr	r0, [pc, #16]	; (23fa9e4 <inet_inet_ntop+0x14>)
 23fa9d4:	6800      	ldr	r0, [r0, #0]
 23fa9d6:	4b04      	ldr	r3, [pc, #16]	; (23fa9e8 <inet_inet_ntop+0x18>)
 23fa9d8:	4403      	add	r3, r0
 23fa9da:	681b      	ldr	r3, [r3, #0]
 23fa9dc:	695b      	ldr	r3, [r3, #20]
 23fa9de:	9302      	str	r3, [sp, #8]
 23fa9e0:	bd09      	pop	{r0, r3, pc}
 23fa9e2:	0000      	.short	0x0000
 23fa9e4:	1007adf8 	.word	0x1007adf8
 23fa9e8:	0000004c 	.word	0x0000004c

023fa9ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fa9ec:	b509      	push	{r0, r3, lr}
 23fa9ee:	4804      	ldr	r0, [pc, #16]	; (23faa00 <netdb_freeaddrinfo+0x14>)
 23fa9f0:	6800      	ldr	r0, [r0, #0]
 23fa9f2:	4b04      	ldr	r3, [pc, #16]	; (23faa04 <netdb_freeaddrinfo+0x18>)
 23fa9f4:	4403      	add	r3, r0
 23fa9f6:	681b      	ldr	r3, [r3, #0]
 23fa9f8:	689b      	ldr	r3, [r3, #8]
 23fa9fa:	9302      	str	r3, [sp, #8]
 23fa9fc:	bd09      	pop	{r0, r3, pc}
 23fa9fe:	0000      	.short	0x0000
 23faa00:	1007adf8 	.word	0x1007adf8
 23faa04:	00000050 	.word	0x00000050

023faa08 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23faa08:	b509      	push	{r0, r3, lr}
 23faa0a:	4804      	ldr	r0, [pc, #16]	; (23faa1c <netdb_getaddrinfo+0x14>)
 23faa0c:	6800      	ldr	r0, [r0, #0]
 23faa0e:	4b04      	ldr	r3, [pc, #16]	; (23faa20 <netdb_getaddrinfo+0x18>)
 23faa10:	4403      	add	r3, r0
 23faa12:	681b      	ldr	r3, [r3, #0]
 23faa14:	68db      	ldr	r3, [r3, #12]
 23faa16:	9302      	str	r3, [sp, #8]
 23faa18:	bd09      	pop	{r0, r3, pc}
 23faa1a:	0000      	.short	0x0000
 23faa1c:	1007adf8 	.word	0x1007adf8
 23faa20:	00000050 	.word	0x00000050

023faa24 <hal_usart_end>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
 23faa24:	b509      	push	{r0, r3, lr}
 23faa26:	4804      	ldr	r0, [pc, #16]	; (23faa38 <hal_usart_end+0x14>)
 23faa28:	6800      	ldr	r0, [r0, #0]
 23faa2a:	4b04      	ldr	r3, [pc, #16]	; (23faa3c <hal_usart_end+0x18>)
 23faa2c:	4403      	add	r3, r0
 23faa2e:	681b      	ldr	r3, [r3, #0]
 23faa30:	689b      	ldr	r3, [r3, #8]
 23faa32:	9302      	str	r3, [sp, #8]
 23faa34:	bd09      	pop	{r0, r3, pc}
 23faa36:	0000      	.short	0x0000
 23faa38:	1007adf8 	.word	0x1007adf8
 23faa3c:	00000024 	.word	0x00000024

023faa40 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23faa40:	b509      	push	{r0, r3, lr}
 23faa42:	4804      	ldr	r0, [pc, #16]	; (23faa54 <hal_usart_write+0x14>)
 23faa44:	6800      	ldr	r0, [r0, #0]
 23faa46:	4b04      	ldr	r3, [pc, #16]	; (23faa58 <hal_usart_write+0x18>)
 23faa48:	4403      	add	r3, r0
 23faa4a:	681b      	ldr	r3, [r3, #0]
 23faa4c:	68db      	ldr	r3, [r3, #12]
 23faa4e:	9302      	str	r3, [sp, #8]
 23faa50:	bd09      	pop	{r0, r3, pc}
 23faa52:	0000      	.short	0x0000
 23faa54:	1007adf8 	.word	0x1007adf8
 23faa58:	00000024 	.word	0x00000024

023faa5c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23faa5c:	b509      	push	{r0, r3, lr}
 23faa5e:	4804      	ldr	r0, [pc, #16]	; (23faa70 <hal_usart_available+0x14>)
 23faa60:	6800      	ldr	r0, [r0, #0]
 23faa62:	4b04      	ldr	r3, [pc, #16]	; (23faa74 <hal_usart_available+0x18>)
 23faa64:	4403      	add	r3, r0
 23faa66:	681b      	ldr	r3, [r3, #0]
 23faa68:	691b      	ldr	r3, [r3, #16]
 23faa6a:	9302      	str	r3, [sp, #8]
 23faa6c:	bd09      	pop	{r0, r3, pc}
 23faa6e:	0000      	.short	0x0000
 23faa70:	1007adf8 	.word	0x1007adf8
 23faa74:	00000024 	.word	0x00000024

023faa78 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23faa78:	b509      	push	{r0, r3, lr}
 23faa7a:	4804      	ldr	r0, [pc, #16]	; (23faa8c <hal_usart_read+0x14>)
 23faa7c:	6800      	ldr	r0, [r0, #0]
 23faa7e:	4b04      	ldr	r3, [pc, #16]	; (23faa90 <hal_usart_read+0x18>)
 23faa80:	4403      	add	r3, r0
 23faa82:	681b      	ldr	r3, [r3, #0]
 23faa84:	695b      	ldr	r3, [r3, #20]
 23faa86:	9302      	str	r3, [sp, #8]
 23faa88:	bd09      	pop	{r0, r3, pc}
 23faa8a:	0000      	.short	0x0000
 23faa8c:	1007adf8 	.word	0x1007adf8
 23faa90:	00000024 	.word	0x00000024

023faa94 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23faa94:	b509      	push	{r0, r3, lr}
 23faa96:	4804      	ldr	r0, [pc, #16]	; (23faaa8 <hal_usart_peek+0x14>)
 23faa98:	6800      	ldr	r0, [r0, #0]
 23faa9a:	4b04      	ldr	r3, [pc, #16]	; (23faaac <hal_usart_peek+0x18>)
 23faa9c:	4403      	add	r3, r0
 23faa9e:	681b      	ldr	r3, [r3, #0]
 23faaa0:	699b      	ldr	r3, [r3, #24]
 23faaa2:	9302      	str	r3, [sp, #8]
 23faaa4:	bd09      	pop	{r0, r3, pc}
 23faaa6:	0000      	.short	0x0000
 23faaa8:	1007adf8 	.word	0x1007adf8
 23faaac:	00000024 	.word	0x00000024

023faab0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23faab0:	b509      	push	{r0, r3, lr}
 23faab2:	4804      	ldr	r0, [pc, #16]	; (23faac4 <hal_usart_flush+0x14>)
 23faab4:	6800      	ldr	r0, [r0, #0]
 23faab6:	4b04      	ldr	r3, [pc, #16]	; (23faac8 <hal_usart_flush+0x18>)
 23faab8:	4403      	add	r3, r0
 23faaba:	681b      	ldr	r3, [r3, #0]
 23faabc:	69db      	ldr	r3, [r3, #28]
 23faabe:	9302      	str	r3, [sp, #8]
 23faac0:	bd09      	pop	{r0, r3, pc}
 23faac2:	0000      	.short	0x0000
 23faac4:	1007adf8 	.word	0x1007adf8
 23faac8:	00000024 	.word	0x00000024

023faacc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23faacc:	b509      	push	{r0, r3, lr}
 23faace:	4804      	ldr	r0, [pc, #16]	; (23faae0 <hal_usart_is_enabled+0x14>)
 23faad0:	6800      	ldr	r0, [r0, #0]
 23faad2:	4b04      	ldr	r3, [pc, #16]	; (23faae4 <hal_usart_is_enabled+0x18>)
 23faad4:	4403      	add	r3, r0
 23faad6:	681b      	ldr	r3, [r3, #0]
 23faad8:	6a1b      	ldr	r3, [r3, #32]
 23faada:	9302      	str	r3, [sp, #8]
 23faadc:	bd09      	pop	{r0, r3, pc}
 23faade:	0000      	.short	0x0000
 23faae0:	1007adf8 	.word	0x1007adf8
 23faae4:	00000024 	.word	0x00000024

023faae8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23faae8:	b509      	push	{r0, r3, lr}
 23faaea:	4804      	ldr	r0, [pc, #16]	; (23faafc <hal_usart_available_data_for_write+0x14>)
 23faaec:	6800      	ldr	r0, [r0, #0]
 23faaee:	4b04      	ldr	r3, [pc, #16]	; (23fab00 <hal_usart_available_data_for_write+0x18>)
 23faaf0:	4403      	add	r3, r0
 23faaf2:	681b      	ldr	r3, [r3, #0]
 23faaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23faaf6:	9302      	str	r3, [sp, #8]
 23faaf8:	bd09      	pop	{r0, r3, pc}
 23faafa:	0000      	.short	0x0000
 23faafc:	1007adf8 	.word	0x1007adf8
 23fab00:	00000024 	.word	0x00000024

023fab04 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
 23fab04:	b509      	push	{r0, r3, lr}
 23fab06:	4804      	ldr	r0, [pc, #16]	; (23fab18 <hal_usart_begin_config+0x14>)
 23fab08:	6800      	ldr	r0, [r0, #0]
 23fab0a:	4b04      	ldr	r3, [pc, #16]	; (23fab1c <hal_usart_begin_config+0x18>)
 23fab0c:	4403      	add	r3, r0
 23fab0e:	681b      	ldr	r3, [r3, #0]
 23fab10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fab12:	9302      	str	r3, [sp, #8]
 23fab14:	bd09      	pop	{r0, r3, pc}
 23fab16:	0000      	.short	0x0000
 23fab18:	1007adf8 	.word	0x1007adf8
 23fab1c:	00000024 	.word	0x00000024

023fab20 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fab20:	b509      	push	{r0, r3, lr}
 23fab22:	4804      	ldr	r0, [pc, #16]	; (23fab34 <hal_usart_init_ex+0x14>)
 23fab24:	6800      	ldr	r0, [r0, #0]
 23fab26:	4b04      	ldr	r3, [pc, #16]	; (23fab38 <hal_usart_init_ex+0x18>)
 23fab28:	4403      	add	r3, r0
 23fab2a:	681b      	ldr	r3, [r3, #0]
 23fab2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fab2e:	9302      	str	r3, [sp, #8]
 23fab30:	bd09      	pop	{r0, r3, pc}
 23fab32:	0000      	.short	0x0000
 23fab34:	1007adf8 	.word	0x1007adf8
 23fab38:	00000024 	.word	0x00000024

023fab3c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fab3c:	b509      	push	{r0, r3, lr}
 23fab3e:	4804      	ldr	r0, [pc, #16]	; (23fab50 <HAL_USB_USART_Init+0x14>)
 23fab40:	6800      	ldr	r0, [r0, #0]
 23fab42:	4b04      	ldr	r3, [pc, #16]	; (23fab54 <HAL_USB_USART_Init+0x18>)
 23fab44:	4403      	add	r3, r0
 23fab46:	681b      	ldr	r3, [r3, #0]
 23fab48:	681b      	ldr	r3, [r3, #0]
 23fab4a:	9302      	str	r3, [sp, #8]
 23fab4c:	bd09      	pop	{r0, r3, pc}
 23fab4e:	0000      	.short	0x0000
 23fab50:	1007adf8 	.word	0x1007adf8
 23fab54:	00000034 	.word	0x00000034

023fab58 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fab58:	b509      	push	{r0, r3, lr}
 23fab5a:	4804      	ldr	r0, [pc, #16]	; (23fab6c <HAL_USB_USART_Begin+0x14>)
 23fab5c:	6800      	ldr	r0, [r0, #0]
 23fab5e:	4b04      	ldr	r3, [pc, #16]	; (23fab70 <HAL_USB_USART_Begin+0x18>)
 23fab60:	4403      	add	r3, r0
 23fab62:	681b      	ldr	r3, [r3, #0]
 23fab64:	685b      	ldr	r3, [r3, #4]
 23fab66:	9302      	str	r3, [sp, #8]
 23fab68:	bd09      	pop	{r0, r3, pc}
 23fab6a:	0000      	.short	0x0000
 23fab6c:	1007adf8 	.word	0x1007adf8
 23fab70:	00000034 	.word	0x00000034

023fab74 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 23fab74:	b509      	push	{r0, r3, lr}
 23fab76:	4804      	ldr	r0, [pc, #16]	; (23fab88 <HAL_USB_USART_End+0x14>)
 23fab78:	6800      	ldr	r0, [r0, #0]
 23fab7a:	4b04      	ldr	r3, [pc, #16]	; (23fab8c <HAL_USB_USART_End+0x18>)
 23fab7c:	4403      	add	r3, r0
 23fab7e:	681b      	ldr	r3, [r3, #0]
 23fab80:	689b      	ldr	r3, [r3, #8]
 23fab82:	9302      	str	r3, [sp, #8]
 23fab84:	bd09      	pop	{r0, r3, pc}
 23fab86:	0000      	.short	0x0000
 23fab88:	1007adf8 	.word	0x1007adf8
 23fab8c:	00000034 	.word	0x00000034

023fab90 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN_WRAP(4, hal_usb, HAL_USB_USART_Available_Data, protected, int32_t(HAL_USB_USART_Serial))
 23fab90:	b509      	push	{r0, r3, lr}
 23fab92:	4804      	ldr	r0, [pc, #16]	; (23faba4 <HAL_USB_USART_Available_Data+0x14>)
 23fab94:	6800      	ldr	r0, [r0, #0]
 23fab96:	4b04      	ldr	r3, [pc, #16]	; (23faba8 <HAL_USB_USART_Available_Data+0x18>)
 23fab98:	4403      	add	r3, r0
 23fab9a:	681b      	ldr	r3, [r3, #0]
 23fab9c:	691b      	ldr	r3, [r3, #16]
 23fab9e:	9302      	str	r3, [sp, #8]
 23faba0:	bd09      	pop	{r0, r3, pc}
 23faba2:	0000      	.short	0x0000
 23faba4:	1007adf8 	.word	0x1007adf8
 23faba8:	00000034 	.word	0x00000034

023fabac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN_WRAP(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, protected, int32_t(HAL_USB_USART_Serial))
 23fabac:	b509      	push	{r0, r3, lr}
 23fabae:	4804      	ldr	r0, [pc, #16]	; (23fabc0 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fabb0:	6800      	ldr	r0, [r0, #0]
 23fabb2:	4b04      	ldr	r3, [pc, #16]	; (23fabc4 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fabb4:	4403      	add	r3, r0
 23fabb6:	681b      	ldr	r3, [r3, #0]
 23fabb8:	695b      	ldr	r3, [r3, #20]
 23fabba:	9302      	str	r3, [sp, #8]
 23fabbc:	bd09      	pop	{r0, r3, pc}
 23fabbe:	0000      	.short	0x0000
 23fabc0:	1007adf8 	.word	0x1007adf8
 23fabc4:	00000034 	.word	0x00000034

023fabc8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN_WRAP(6, hal_usb, HAL_USB_USART_Receive_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fabc8:	b509      	push	{r0, r3, lr}
 23fabca:	4804      	ldr	r0, [pc, #16]	; (23fabdc <HAL_USB_USART_Receive_Data+0x14>)
 23fabcc:	6800      	ldr	r0, [r0, #0]
 23fabce:	4b04      	ldr	r3, [pc, #16]	; (23fabe0 <HAL_USB_USART_Receive_Data+0x18>)
 23fabd0:	4403      	add	r3, r0
 23fabd2:	681b      	ldr	r3, [r3, #0]
 23fabd4:	699b      	ldr	r3, [r3, #24]
 23fabd6:	9302      	str	r3, [sp, #8]
 23fabd8:	bd09      	pop	{r0, r3, pc}
 23fabda:	0000      	.short	0x0000
 23fabdc:	1007adf8 	.word	0x1007adf8
 23fabe0:	00000034 	.word	0x00000034

023fabe4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN_WRAP(7, hal_usb, HAL_USB_USART_Send_Data, protected, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fabe4:	b509      	push	{r0, r3, lr}
 23fabe6:	4804      	ldr	r0, [pc, #16]	; (23fabf8 <HAL_USB_USART_Send_Data+0x14>)
 23fabe8:	6800      	ldr	r0, [r0, #0]
 23fabea:	4b04      	ldr	r3, [pc, #16]	; (23fabfc <HAL_USB_USART_Send_Data+0x18>)
 23fabec:	4403      	add	r3, r0
 23fabee:	681b      	ldr	r3, [r3, #0]
 23fabf0:	69db      	ldr	r3, [r3, #28]
 23fabf2:	9302      	str	r3, [sp, #8]
 23fabf4:	bd09      	pop	{r0, r3, pc}
 23fabf6:	0000      	.short	0x0000
 23fabf8:	1007adf8 	.word	0x1007adf8
 23fabfc:	00000034 	.word	0x00000034

023fac00 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN_WRAP(8, hal_usb, HAL_USB_USART_Flush_Data, protected, void(HAL_USB_USART_Serial))
 23fac00:	b509      	push	{r0, r3, lr}
 23fac02:	4804      	ldr	r0, [pc, #16]	; (23fac14 <HAL_USB_USART_Flush_Data+0x14>)
 23fac04:	6800      	ldr	r0, [r0, #0]
 23fac06:	4b04      	ldr	r3, [pc, #16]	; (23fac18 <HAL_USB_USART_Flush_Data+0x18>)
 23fac08:	4403      	add	r3, r0
 23fac0a:	681b      	ldr	r3, [r3, #0]
 23fac0c:	6a1b      	ldr	r3, [r3, #32]
 23fac0e:	9302      	str	r3, [sp, #8]
 23fac10:	bd09      	pop	{r0, r3, pc}
 23fac12:	0000      	.short	0x0000
 23fac14:	1007adf8 	.word	0x1007adf8
 23fac18:	00000034 	.word	0x00000034

023fac1c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fac1c:	b509      	push	{r0, r3, lr}
 23fac1e:	4804      	ldr	r0, [pc, #16]	; (23fac30 <panic_+0x14>)
 23fac20:	6800      	ldr	r0, [r0, #0]
 23fac22:	4b04      	ldr	r3, [pc, #16]	; (23fac34 <panic_+0x18>)
 23fac24:	4403      	add	r3, r0
 23fac26:	681b      	ldr	r3, [r3, #0]
 23fac28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fac2a:	9302      	str	r3, [sp, #8]
 23fac2c:	bd09      	pop	{r0, r3, pc}
 23fac2e:	0000      	.short	0x0000
 23fac30:	1007adf8 	.word	0x1007adf8
 23fac34:	00000048 	.word	0x00000048

023fac38 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fac38:	b509      	push	{r0, r3, lr}
 23fac3a:	4804      	ldr	r0, [pc, #16]	; (23fac4c <log_message+0x14>)
 23fac3c:	6800      	ldr	r0, [r0, #0]
 23fac3e:	4b04      	ldr	r3, [pc, #16]	; (23fac50 <log_message+0x18>)
 23fac40:	4403      	add	r3, r0
 23fac42:	681b      	ldr	r3, [r3, #0]
 23fac44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fac46:	9302      	str	r3, [sp, #8]
 23fac48:	bd09      	pop	{r0, r3, pc}
 23fac4a:	0000      	.short	0x0000
 23fac4c:	1007adf8 	.word	0x1007adf8
 23fac50:	00000048 	.word	0x00000048

023fac54 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 23fac54:	b509      	push	{r0, r3, lr}
 23fac56:	4804      	ldr	r0, [pc, #16]	; (23fac68 <log_message_v+0x14>)
 23fac58:	6800      	ldr	r0, [r0, #0]
 23fac5a:	4b04      	ldr	r3, [pc, #16]	; (23fac6c <log_message_v+0x18>)
 23fac5c:	4403      	add	r3, r0
 23fac5e:	681b      	ldr	r3, [r3, #0]
 23fac60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fac62:	9302      	str	r3, [sp, #8]
 23fac64:	bd09      	pop	{r0, r3, pc}
 23fac66:	0000      	.short	0x0000
 23fac68:	1007adf8 	.word	0x1007adf8
 23fac6c:	00000048 	.word	0x00000048

023fac70 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 23fac70:	b509      	push	{r0, r3, lr}
 23fac72:	4804      	ldr	r0, [pc, #16]	; (23fac84 <log_level_name+0x14>)
 23fac74:	6800      	ldr	r0, [r0, #0]
 23fac76:	4b04      	ldr	r3, [pc, #16]	; (23fac88 <log_level_name+0x18>)
 23fac78:	4403      	add	r3, r0
 23fac7a:	681b      	ldr	r3, [r3, #0]
 23fac7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 23fac7e:	9302      	str	r3, [sp, #8]
 23fac80:	bd09      	pop	{r0, r3, pc}
 23fac82:	0000      	.short	0x0000
 23fac84:	1007adf8 	.word	0x1007adf8
 23fac88:	00000048 	.word	0x00000048

023fac8c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 23fac8c:	b509      	push	{r0, r3, lr}
 23fac8e:	4804      	ldr	r0, [pc, #16]	; (23faca0 <log_set_callbacks+0x14>)
 23fac90:	6800      	ldr	r0, [r0, #0]
 23fac92:	4b04      	ldr	r3, [pc, #16]	; (23faca4 <log_set_callbacks+0x18>)
 23fac94:	4403      	add	r3, r0
 23fac96:	681b      	ldr	r3, [r3, #0]
 23fac98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 23fac9a:	9302      	str	r3, [sp, #8]
 23fac9c:	bd09      	pop	{r0, r3, pc}
 23fac9e:	0000      	.short	0x0000
 23faca0:	1007adf8 	.word	0x1007adf8
 23faca4:	00000048 	.word	0x00000048

023faca8 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
 23faca8:	b509      	push	{r0, r3, lr}
 23facaa:	4804      	ldr	r0, [pc, #16]	; (23facbc <diag_get_source+0x14>)
 23facac:	6800      	ldr	r0, [r0, #0]
 23facae:	4b04      	ldr	r3, [pc, #16]	; (23facc0 <diag_get_source+0x18>)
 23facb0:	4403      	add	r3, r0
 23facb2:	681b      	ldr	r3, [r3, #0]
 23facb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23facb8:	9302      	str	r3, [sp, #8]
 23facba:	bd09      	pop	{r0, r3, pc}
 23facbc:	1007adf8 	.word	0x1007adf8
 23facc0:	00000048 	.word	0x00000048

023facc4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23facc4:	b509      	push	{r0, r3, lr}
 23facc6:	4804      	ldr	r0, [pc, #16]	; (23facd8 <set_system_mode+0x14>)
 23facc8:	6800      	ldr	r0, [r0, #0]
 23facca:	4b04      	ldr	r3, [pc, #16]	; (23facdc <set_system_mode+0x18>)
 23faccc:	4403      	add	r3, r0
 23facce:	681b      	ldr	r3, [r3, #0]
 23facd0:	685b      	ldr	r3, [r3, #4]
 23facd2:	9302      	str	r3, [sp, #8]
 23facd4:	bd09      	pop	{r0, r3, pc}
 23facd6:	0000      	.short	0x0000
 23facd8:	1007adf8 	.word	0x1007adf8
 23facdc:	00000008 	.word	0x00000008

023face0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler_deprecated, void(void*))
DYNALIB_FN(3, system, system_firmwareUpdate_deprecated, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer_deprecated, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23face0:	b509      	push	{r0, r3, lr}
 23face2:	4804      	ldr	r0, [pc, #16]	; (23facf4 <system_delay_ms+0x14>)
 23face4:	6800      	ldr	r0, [r0, #0]
 23face6:	4b04      	ldr	r3, [pc, #16]	; (23facf8 <system_delay_ms+0x18>)
 23face8:	4403      	add	r3, r0
 23facea:	681b      	ldr	r3, [r3, #0]
 23facec:	695b      	ldr	r3, [r3, #20]
 23facee:	9302      	str	r3, [sp, #8]
 23facf0:	bd09      	pop	{r0, r3, pc}
 23facf2:	0000      	.short	0x0000
 23facf4:	1007adf8 	.word	0x1007adf8
 23facf8:	00000008 	.word	0x00000008

023facfc <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
 23facfc:	b509      	push	{r0, r3, lr}
 23facfe:	4804      	ldr	r0, [pc, #16]	; (23fad10 <system_subscribe_event+0x14>)
 23fad00:	6800      	ldr	r0, [r0, #0]
 23fad02:	4b04      	ldr	r3, [pc, #16]	; (23fad14 <system_subscribe_event+0x18>)
 23fad04:	4403      	add	r3, r0
 23fad06:	681b      	ldr	r3, [r3, #0]
 23fad08:	6a1b      	ldr	r3, [r3, #32]
 23fad0a:	9302      	str	r3, [sp, #8]
 23fad0c:	bd09      	pop	{r0, r3, pc}
 23fad0e:	0000      	.short	0x0000
 23fad10:	1007adf8 	.word	0x1007adf8
 23fad14:	00000008 	.word	0x00000008

023fad18 <application_thread_invoke>:
DYNALIB_FN_WRAP(17, system, Spark_Save_Firmware_Chunk, protected, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN_WRAP(18, system, Spark_Finish_Firmware_Update, protected, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fad18:	b509      	push	{r0, r3, lr}
 23fad1a:	4804      	ldr	r0, [pc, #16]	; (23fad2c <application_thread_invoke+0x14>)
 23fad1c:	6800      	ldr	r0, [r0, #0]
 23fad1e:	4b04      	ldr	r3, [pc, #16]	; (23fad30 <application_thread_invoke+0x18>)
 23fad20:	4403      	add	r3, r0
 23fad22:	681b      	ldr	r3, [r3, #0]
 23fad24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fad26:	9302      	str	r3, [sp, #8]
 23fad28:	bd09      	pop	{r0, r3, pc}
 23fad2a:	0000      	.short	0x0000
 23fad2c:	1007adf8 	.word	0x1007adf8
 23fad30:	00000008 	.word	0x00000008

023fad34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fad34:	b509      	push	{r0, r3, lr}
 23fad36:	4804      	ldr	r0, [pc, #16]	; (23fad48 <system_ctrl_set_app_request_handler+0x14>)
 23fad38:	6800      	ldr	r0, [r0, #0]
 23fad3a:	4b04      	ldr	r3, [pc, #16]	; (23fad4c <system_ctrl_set_app_request_handler+0x18>)
 23fad3c:	4403      	add	r3, r0
 23fad3e:	681b      	ldr	r3, [r3, #0]
 23fad40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fad44:	9302      	str	r3, [sp, #8]
 23fad46:	bd09      	pop	{r0, r3, pc}
 23fad48:	1007adf8 	.word	0x1007adf8
 23fad4c:	00000008 	.word	0x00000008

023fad50 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fad50:	b509      	push	{r0, r3, lr}
 23fad52:	4804      	ldr	r0, [pc, #16]	; (23fad64 <system_ctrl_set_result+0x14>)
 23fad54:	6800      	ldr	r0, [r0, #0]
 23fad56:	4b04      	ldr	r3, [pc, #16]	; (23fad68 <system_ctrl_set_result+0x18>)
 23fad58:	4403      	add	r3, r0
 23fad5a:	681b      	ldr	r3, [r3, #0]
 23fad5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fad60:	9302      	str	r3, [sp, #8]
 23fad62:	bd09      	pop	{r0, r3, pc}
 23fad64:	1007adf8 	.word	0x1007adf8
 23fad68:	00000008 	.word	0x00000008

023fad6c <system_pool_alloc>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
 23fad6c:	b509      	push	{r0, r3, lr}
 23fad6e:	4804      	ldr	r0, [pc, #16]	; (23fad80 <system_pool_alloc+0x14>)
 23fad70:	6800      	ldr	r0, [r0, #0]
 23fad72:	4b04      	ldr	r3, [pc, #16]	; (23fad84 <system_pool_alloc+0x18>)
 23fad74:	4403      	add	r3, r0
 23fad76:	681b      	ldr	r3, [r3, #0]
 23fad78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23fad7c:	9302      	str	r3, [sp, #8]
 23fad7e:	bd09      	pop	{r0, r3, pc}
 23fad80:	1007adf8 	.word	0x1007adf8
 23fad84:	00000008 	.word	0x00000008

023fad88 <system_pool_free>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
 23fad88:	b509      	push	{r0, r3, lr}
 23fad8a:	4804      	ldr	r0, [pc, #16]	; (23fad9c <system_pool_free+0x14>)
 23fad8c:	6800      	ldr	r0, [r0, #0]
 23fad8e:	4b04      	ldr	r3, [pc, #16]	; (23fada0 <system_pool_free+0x18>)
 23fad90:	4403      	add	r3, r0
 23fad92:	681b      	ldr	r3, [r3, #0]
 23fad94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 23fad98:	9302      	str	r3, [sp, #8]
 23fad9a:	bd09      	pop	{r0, r3, pc}
 23fad9c:	1007adf8 	.word	0x1007adf8
 23fada0:	00000008 	.word	0x00000008

023fada4 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
 23fada4:	b509      	push	{r0, r3, lr}
 23fada6:	4804      	ldr	r0, [pc, #16]	; (23fadb8 <system_power_management_set_config+0x14>)
 23fada8:	6800      	ldr	r0, [r0, #0]
 23fadaa:	4b04      	ldr	r3, [pc, #16]	; (23fadbc <system_power_management_set_config+0x18>)
 23fadac:	4403      	add	r3, r0
 23fadae:	681b      	ldr	r3, [r3, #0]
 23fadb0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23fadb4:	9302      	str	r3, [sp, #8]
 23fadb6:	bd09      	pop	{r0, r3, pc}
 23fadb8:	1007adf8 	.word	0x1007adf8
 23fadbc:	00000008 	.word	0x00000008

023fadc0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 23fadc0:	b509      	push	{r0, r3, lr}
 23fadc2:	4804      	ldr	r0, [pc, #16]	; (23fadd4 <system_sleep_ext+0x14>)
 23fadc4:	6800      	ldr	r0, [r0, #0]
 23fadc6:	4b04      	ldr	r3, [pc, #16]	; (23fadd8 <system_sleep_ext+0x18>)
 23fadc8:	4403      	add	r3, r0
 23fadca:	681b      	ldr	r3, [r3, #0]
 23fadcc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 23fadd0:	9302      	str	r3, [sp, #8]
 23fadd2:	bd09      	pop	{r0, r3, pc}
 23fadd4:	1007adf8 	.word	0x1007adf8
 23fadd8:	00000008 	.word	0x00000008

023faddc <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
 23faddc:	b509      	push	{r0, r3, lr}
 23fadde:	4804      	ldr	r0, [pc, #16]	; (23fadf0 <system_reset+0x14>)
 23fade0:	6800      	ldr	r0, [r0, #0]
 23fade2:	4b04      	ldr	r3, [pc, #16]	; (23fadf4 <system_reset+0x18>)
 23fade4:	4403      	add	r3, r0
 23fade6:	681b      	ldr	r3, [r3, #0]
 23fade8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 23fadec:	9302      	str	r3, [sp, #8]
 23fadee:	bd09      	pop	{r0, r3, pc}
 23fadf0:	1007adf8 	.word	0x1007adf8
 23fadf4:	00000008 	.word	0x00000008

023fadf8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fadf8:	b509      	push	{r0, r3, lr}
 23fadfa:	4804      	ldr	r0, [pc, #16]	; (23fae0c <spark_process+0x14>)
 23fadfc:	6800      	ldr	r0, [r0, #0]
 23fadfe:	4b04      	ldr	r3, [pc, #16]	; (23fae10 <spark_process+0x18>)
 23fae00:	4403      	add	r3, r0
 23fae02:	681b      	ldr	r3, [r3, #0]
 23fae04:	689b      	ldr	r3, [r3, #8]
 23fae06:	9302      	str	r3, [sp, #8]
 23fae08:	bd09      	pop	{r0, r3, pc}
 23fae0a:	0000      	.short	0x0000
 23fae0c:	1007adf8 	.word	0x1007adf8
 23fae10:	0000002c 	.word	0x0000002c

023fae14 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fae14:	b509      	push	{r0, r3, lr}
 23fae16:	4804      	ldr	r0, [pc, #16]	; (23fae28 <spark_cloud_flag_connect+0x14>)
 23fae18:	6800      	ldr	r0, [r0, #0]
 23fae1a:	4b04      	ldr	r3, [pc, #16]	; (23fae2c <spark_cloud_flag_connect+0x18>)
 23fae1c:	4403      	add	r3, r0
 23fae1e:	681b      	ldr	r3, [r3, #0]
 23fae20:	68db      	ldr	r3, [r3, #12]
 23fae22:	9302      	str	r3, [sp, #8]
 23fae24:	bd09      	pop	{r0, r3, pc}
 23fae26:	0000      	.short	0x0000
 23fae28:	1007adf8 	.word	0x1007adf8
 23fae2c:	0000002c 	.word	0x0000002c

023fae30 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fae30:	b509      	push	{r0, r3, lr}
 23fae32:	4804      	ldr	r0, [pc, #16]	; (23fae44 <spark_cloud_flag_connected+0x14>)
 23fae34:	6800      	ldr	r0, [r0, #0]
 23fae36:	4b04      	ldr	r3, [pc, #16]	; (23fae48 <spark_cloud_flag_connected+0x18>)
 23fae38:	4403      	add	r3, r0
 23fae3a:	681b      	ldr	r3, [r3, #0]
 23fae3c:	695b      	ldr	r3, [r3, #20]
 23fae3e:	9302      	str	r3, [sp, #8]
 23fae40:	bd09      	pop	{r0, r3, pc}
 23fae42:	0000      	.short	0x0000
 23fae44:	1007adf8 	.word	0x1007adf8
 23fae48:	0000002c 	.word	0x0000002c

023fae4c <spark_set_connection_property>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, spark_subscribe_param*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
 23fae4c:	b509      	push	{r0, r3, lr}
 23fae4e:	4804      	ldr	r0, [pc, #16]	; (23fae60 <spark_set_connection_property+0x14>)
 23fae50:	6800      	ldr	r0, [r0, #0]
 23fae52:	4b04      	ldr	r3, [pc, #16]	; (23fae64 <spark_set_connection_property+0x18>)
 23fae54:	4403      	add	r3, r0
 23fae56:	681b      	ldr	r3, [r3, #0]
 23fae58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 23fae5a:	9302      	str	r3, [sp, #8]
 23fae5c:	bd09      	pop	{r0, r3, pc}
 23fae5e:	0000      	.short	0x0000
 23fae60:	1007adf8 	.word	0x1007adf8
 23fae64:	0000002c 	.word	0x0000002c

023fae68 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fae68:	b509      	push	{r0, r3, lr}
 23fae6a:	4804      	ldr	r0, [pc, #16]	; (23fae7c <spark_set_random_seed_from_cloud_handler+0x14>)
 23fae6c:	6800      	ldr	r0, [r0, #0]
 23fae6e:	4b04      	ldr	r3, [pc, #16]	; (23fae80 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fae70:	4403      	add	r3, r0
 23fae72:	681b      	ldr	r3, [r3, #0]
 23fae74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fae76:	9302      	str	r3, [sp, #8]
 23fae78:	bd09      	pop	{r0, r3, pc}
 23fae7a:	0000      	.short	0x0000
 23fae7c:	1007adf8 	.word	0x1007adf8
 23fae80:	0000002c 	.word	0x0000002c

023fae84 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fae84:	b509      	push	{r0, r3, lr}
 23fae86:	4804      	ldr	r0, [pc, #16]	; (23fae98 <network_connect+0x14>)
 23fae88:	6800      	ldr	r0, [r0, #0]
 23fae8a:	4b04      	ldr	r3, [pc, #16]	; (23fae9c <network_connect+0x18>)
 23fae8c:	4403      	add	r3, r0
 23fae8e:	681b      	ldr	r3, [r3, #0]
 23fae90:	685b      	ldr	r3, [r3, #4]
 23fae92:	9302      	str	r3, [sp, #8]
 23fae94:	bd09      	pop	{r0, r3, pc}
 23fae96:	0000      	.short	0x0000
 23fae98:	1007adf8 	.word	0x1007adf8
 23fae9c:	00000028 	.word	0x00000028

023faea0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23faea0:	b509      	push	{r0, r3, lr}
 23faea2:	4804      	ldr	r0, [pc, #16]	; (23faeb4 <network_connecting+0x14>)
 23faea4:	6800      	ldr	r0, [r0, #0]
 23faea6:	4b04      	ldr	r3, [pc, #16]	; (23faeb8 <network_connecting+0x18>)
 23faea8:	4403      	add	r3, r0
 23faeaa:	681b      	ldr	r3, [r3, #0]
 23faeac:	689b      	ldr	r3, [r3, #8]
 23faeae:	9302      	str	r3, [sp, #8]
 23faeb0:	bd09      	pop	{r0, r3, pc}
 23faeb2:	0000      	.short	0x0000
 23faeb4:	1007adf8 	.word	0x1007adf8
 23faeb8:	00000028 	.word	0x00000028

023faebc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23faebc:	b509      	push	{r0, r3, lr}
 23faebe:	4804      	ldr	r0, [pc, #16]	; (23faed0 <network_disconnect+0x14>)
 23faec0:	6800      	ldr	r0, [r0, #0]
 23faec2:	4b04      	ldr	r3, [pc, #16]	; (23faed4 <network_disconnect+0x18>)
 23faec4:	4403      	add	r3, r0
 23faec6:	681b      	ldr	r3, [r3, #0]
 23faec8:	68db      	ldr	r3, [r3, #12]
 23faeca:	9302      	str	r3, [sp, #8]
 23faecc:	bd09      	pop	{r0, r3, pc}
 23faece:	0000      	.short	0x0000
 23faed0:	1007adf8 	.word	0x1007adf8
 23faed4:	00000028 	.word	0x00000028

023faed8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23faed8:	b509      	push	{r0, r3, lr}
 23faeda:	4804      	ldr	r0, [pc, #16]	; (23faeec <network_ready+0x14>)
 23faedc:	6800      	ldr	r0, [r0, #0]
 23faede:	4b04      	ldr	r3, [pc, #16]	; (23faef0 <network_ready+0x18>)
 23faee0:	4403      	add	r3, r0
 23faee2:	681b      	ldr	r3, [r3, #0]
 23faee4:	691b      	ldr	r3, [r3, #16]
 23faee6:	9302      	str	r3, [sp, #8]
 23faee8:	bd09      	pop	{r0, r3, pc}
 23faeea:	0000      	.short	0x0000
 23faeec:	1007adf8 	.word	0x1007adf8
 23faef0:	00000028 	.word	0x00000028

023faef4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23faef4:	b509      	push	{r0, r3, lr}
 23faef6:	4804      	ldr	r0, [pc, #16]	; (23faf08 <network_on+0x14>)
 23faef8:	6800      	ldr	r0, [r0, #0]
 23faefa:	4b04      	ldr	r3, [pc, #16]	; (23faf0c <network_on+0x18>)
 23faefc:	4403      	add	r3, r0
 23faefe:	681b      	ldr	r3, [r3, #0]
 23faf00:	695b      	ldr	r3, [r3, #20]
 23faf02:	9302      	str	r3, [sp, #8]
 23faf04:	bd09      	pop	{r0, r3, pc}
 23faf06:	0000      	.short	0x0000
 23faf08:	1007adf8 	.word	0x1007adf8
 23faf0c:	00000028 	.word	0x00000028

023faf10 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23faf10:	b509      	push	{r0, r3, lr}
 23faf12:	4804      	ldr	r0, [pc, #16]	; (23faf24 <network_off+0x14>)
 23faf14:	6800      	ldr	r0, [r0, #0]
 23faf16:	4b04      	ldr	r3, [pc, #16]	; (23faf28 <network_off+0x18>)
 23faf18:	4403      	add	r3, r0
 23faf1a:	681b      	ldr	r3, [r3, #0]
 23faf1c:	699b      	ldr	r3, [r3, #24]
 23faf1e:	9302      	str	r3, [sp, #8]
 23faf20:	bd09      	pop	{r0, r3, pc}
 23faf22:	0000      	.short	0x0000
 23faf24:	1007adf8 	.word	0x1007adf8
 23faf28:	00000028 	.word	0x00000028

023faf2c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23faf2c:	b509      	push	{r0, r3, lr}
 23faf2e:	4804      	ldr	r0, [pc, #16]	; (23faf40 <network_listen+0x14>)
 23faf30:	6800      	ldr	r0, [r0, #0]
 23faf32:	4b04      	ldr	r3, [pc, #16]	; (23faf44 <network_listen+0x18>)
 23faf34:	4403      	add	r3, r0
 23faf36:	681b      	ldr	r3, [r3, #0]
 23faf38:	69db      	ldr	r3, [r3, #28]
 23faf3a:	9302      	str	r3, [sp, #8]
 23faf3c:	bd09      	pop	{r0, r3, pc}
 23faf3e:	0000      	.short	0x0000
 23faf40:	1007adf8 	.word	0x1007adf8
 23faf44:	00000028 	.word	0x00000028

023faf48 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23faf48:	b509      	push	{r0, r3, lr}
 23faf4a:	4804      	ldr	r0, [pc, #16]	; (23faf5c <network_listening+0x14>)
 23faf4c:	6800      	ldr	r0, [r0, #0]
 23faf4e:	4b04      	ldr	r3, [pc, #16]	; (23faf60 <network_listening+0x18>)
 23faf50:	4403      	add	r3, r0
 23faf52:	681b      	ldr	r3, [r3, #0]
 23faf54:	6a1b      	ldr	r3, [r3, #32]
 23faf56:	9302      	str	r3, [sp, #8]
 23faf58:	bd09      	pop	{r0, r3, pc}
 23faf5a:	0000      	.short	0x0000
 23faf5c:	1007adf8 	.word	0x1007adf8
 23faf60:	00000028 	.word	0x00000028

023faf64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23faf64:	b509      	push	{r0, r3, lr}
 23faf66:	4804      	ldr	r0, [pc, #16]	; (23faf78 <network_set_listen_timeout+0x14>)
 23faf68:	6800      	ldr	r0, [r0, #0]
 23faf6a:	4b04      	ldr	r3, [pc, #16]	; (23faf7c <network_set_listen_timeout+0x18>)
 23faf6c:	4403      	add	r3, r0
 23faf6e:	681b      	ldr	r3, [r3, #0]
 23faf70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23faf72:	9302      	str	r3, [sp, #8]
 23faf74:	bd09      	pop	{r0, r3, pc}
 23faf76:	0000      	.short	0x0000
 23faf78:	1007adf8 	.word	0x1007adf8
 23faf7c:	00000028 	.word	0x00000028

023faf80 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23faf80:	b509      	push	{r0, r3, lr}
 23faf82:	4804      	ldr	r0, [pc, #16]	; (23faf94 <network_get_listen_timeout+0x14>)
 23faf84:	6800      	ldr	r0, [r0, #0]
 23faf86:	4b04      	ldr	r3, [pc, #16]	; (23faf98 <network_get_listen_timeout+0x18>)
 23faf88:	4403      	add	r3, r0
 23faf8a:	681b      	ldr	r3, [r3, #0]
 23faf8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23faf8e:	9302      	str	r3, [sp, #8]
 23faf90:	bd09      	pop	{r0, r3, pc}
 23faf92:	0000      	.short	0x0000
 23faf94:	1007adf8 	.word	0x1007adf8
 23faf98:	00000028 	.word	0x00000028

023faf9c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23faf9c:	b509      	push	{r0, r3, lr}
 23faf9e:	4804      	ldr	r0, [pc, #16]	; (23fafb0 <network_is_on+0x14>)
 23fafa0:	6800      	ldr	r0, [r0, #0]
 23fafa2:	4b04      	ldr	r3, [pc, #16]	; (23fafb4 <network_is_on+0x18>)
 23fafa4:	4403      	add	r3, r0
 23fafa6:	681b      	ldr	r3, [r3, #0]
 23fafa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fafaa:	9302      	str	r3, [sp, #8]
 23fafac:	bd09      	pop	{r0, r3, pc}
 23fafae:	0000      	.short	0x0000
 23fafb0:	1007adf8 	.word	0x1007adf8
 23fafb4:	00000028 	.word	0x00000028

023fafb8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fafb8:	b509      	push	{r0, r3, lr}
 23fafba:	4804      	ldr	r0, [pc, #16]	; (23fafcc <network_is_off+0x14>)
 23fafbc:	6800      	ldr	r0, [r0, #0]
 23fafbe:	4b04      	ldr	r3, [pc, #16]	; (23fafd0 <network_is_off+0x18>)
 23fafc0:	4403      	add	r3, r0
 23fafc2:	681b      	ldr	r3, [r3, #0]
 23fafc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fafc6:	9302      	str	r3, [sp, #8]
 23fafc8:	bd09      	pop	{r0, r3, pc}
 23fafca:	0000      	.short	0x0000
 23fafcc:	1007adf8 	.word	0x1007adf8
 23fafd0:	00000028 	.word	0x00000028

023fafd4 <network_prefer>:
DYNALIB_FN(18, system_net, network_set_configuration, int(network_handle_t, const network_configuration_t*, void*))
DYNALIB_FN(19, system_net, network_get_configuration, int(network_handle_t, network_configuration_t**, size_t*, const char*, size_t, void*))
DYNALIB_FN(20, system_net, network_free_configuration, int(network_configuration_t*, size_t, void*))
DYNALIB_FN(21, system_net, network_prefer, network_handle_t(network_handle_t, bool, void*))
 23fafd4:	b509      	push	{r0, r3, lr}
 23fafd6:	4804      	ldr	r0, [pc, #16]	; (23fafe8 <network_prefer+0x14>)
 23fafd8:	6800      	ldr	r0, [r0, #0]
 23fafda:	4b04      	ldr	r3, [pc, #16]	; (23fafec <network_prefer+0x18>)
 23fafdc:	4403      	add	r3, r0
 23fafde:	681b      	ldr	r3, [r3, #0]
 23fafe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fafe2:	9302      	str	r3, [sp, #8]
 23fafe4:	bd09      	pop	{r0, r3, pc}
 23fafe6:	0000      	.short	0x0000
 23fafe8:	1007adf8 	.word	0x1007adf8
 23fafec:	00000028 	.word	0x00000028

023faff0 <network_is_preferred>:
DYNALIB_FN(22, system_net, network_is_preferred, bool(network_handle_t, void*))
 23faff0:	b509      	push	{r0, r3, lr}
 23faff2:	4804      	ldr	r0, [pc, #16]	; (23fb004 <network_is_preferred+0x14>)
 23faff4:	6800      	ldr	r0, [r0, #0]
 23faff6:	4b04      	ldr	r3, [pc, #16]	; (23fb008 <network_is_preferred+0x18>)
 23faff8:	4403      	add	r3, r0
 23faffa:	681b      	ldr	r3, [r3, #0]
 23faffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23faffe:	9302      	str	r3, [sp, #8]
 23fb000:	bd09      	pop	{r0, r3, pc}
 23fb002:	0000      	.short	0x0000
 23fb004:	1007adf8 	.word	0x1007adf8
 23fb008:	00000028 	.word	0x00000028

023fb00c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fb00c:	b509      	push	{r0, r3, lr}
 23fb00e:	4804      	ldr	r0, [pc, #16]	; (23fb020 <malloc+0x14>)
 23fb010:	6800      	ldr	r0, [r0, #0]
 23fb012:	4b04      	ldr	r3, [pc, #16]	; (23fb024 <malloc+0x18>)
 23fb014:	4403      	add	r3, r0
 23fb016:	681b      	ldr	r3, [r3, #0]
 23fb018:	681b      	ldr	r3, [r3, #0]
 23fb01a:	9302      	str	r3, [sp, #8]
 23fb01c:	bd09      	pop	{r0, r3, pc}
 23fb01e:	0000      	.short	0x0000
 23fb020:	1007adf8 	.word	0x1007adf8
 23fb024:	00000004 	.word	0x00000004

023fb028 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fb028:	b509      	push	{r0, r3, lr}
 23fb02a:	4804      	ldr	r0, [pc, #16]	; (23fb03c <free+0x14>)
 23fb02c:	6800      	ldr	r0, [r0, #0]
 23fb02e:	4b04      	ldr	r3, [pc, #16]	; (23fb040 <free+0x18>)
 23fb030:	4403      	add	r3, r0
 23fb032:	681b      	ldr	r3, [r3, #0]
 23fb034:	685b      	ldr	r3, [r3, #4]
 23fb036:	9302      	str	r3, [sp, #8]
 23fb038:	bd09      	pop	{r0, r3, pc}
 23fb03a:	0000      	.short	0x0000
 23fb03c:	1007adf8 	.word	0x1007adf8
 23fb040:	00000004 	.word	0x00000004

023fb044 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fb044:	b509      	push	{r0, r3, lr}
 23fb046:	4804      	ldr	r0, [pc, #16]	; (23fb058 <realloc+0x14>)
 23fb048:	6800      	ldr	r0, [r0, #0]
 23fb04a:	4b04      	ldr	r3, [pc, #16]	; (23fb05c <realloc+0x18>)
 23fb04c:	4403      	add	r3, r0
 23fb04e:	681b      	ldr	r3, [r3, #0]
 23fb050:	689b      	ldr	r3, [r3, #8]
 23fb052:	9302      	str	r3, [sp, #8]
 23fb054:	bd09      	pop	{r0, r3, pc}
 23fb056:	0000      	.short	0x0000
 23fb058:	1007adf8 	.word	0x1007adf8
 23fb05c:	00000004 	.word	0x00000004

023fb060 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 23fb060:	b509      	push	{r0, r3, lr}
 23fb062:	4804      	ldr	r0, [pc, #16]	; (23fb074 <snprintf+0x14>)
 23fb064:	6800      	ldr	r0, [r0, #0]
 23fb066:	4b04      	ldr	r3, [pc, #16]	; (23fb078 <snprintf+0x18>)
 23fb068:	4403      	add	r3, r0
 23fb06a:	681b      	ldr	r3, [r3, #0]
 23fb06c:	69db      	ldr	r3, [r3, #28]
 23fb06e:	9302      	str	r3, [sp, #8]
 23fb070:	bd09      	pop	{r0, r3, pc}
 23fb072:	0000      	.short	0x0000
 23fb074:	1007adf8 	.word	0x1007adf8
 23fb078:	00000004 	.word	0x00000004

023fb07c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 23fb07c:	b509      	push	{r0, r3, lr}
 23fb07e:	4804      	ldr	r0, [pc, #16]	; (23fb090 <vsnprintf+0x14>)
 23fb080:	6800      	ldr	r0, [r0, #0]
 23fb082:	4b04      	ldr	r3, [pc, #16]	; (23fb094 <vsnprintf+0x18>)
 23fb084:	4403      	add	r3, r0
 23fb086:	681b      	ldr	r3, [r3, #0]
 23fb088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb08a:	9302      	str	r3, [sp, #8]
 23fb08c:	bd09      	pop	{r0, r3, pc}
 23fb08e:	0000      	.short	0x0000
 23fb090:	1007adf8 	.word	0x1007adf8
 23fb094:	00000004 	.word	0x00000004

023fb098 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fb098:	b509      	push	{r0, r3, lr}
 23fb09a:	4804      	ldr	r0, [pc, #16]	; (23fb0ac <abort+0x14>)
 23fb09c:	6800      	ldr	r0, [r0, #0]
 23fb09e:	4b04      	ldr	r3, [pc, #16]	; (23fb0b0 <abort+0x18>)
 23fb0a0:	4403      	add	r3, r0
 23fb0a2:	681b      	ldr	r3, [r3, #0]
 23fb0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb0a6:	9302      	str	r3, [sp, #8]
 23fb0a8:	bd09      	pop	{r0, r3, pc}
 23fb0aa:	0000      	.short	0x0000
 23fb0ac:	1007adf8 	.word	0x1007adf8
 23fb0b0:	00000004 	.word	0x00000004

023fb0b4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fb0b4:	b509      	push	{r0, r3, lr}
 23fb0b6:	4804      	ldr	r0, [pc, #16]	; (23fb0c8 <_malloc_r+0x14>)
 23fb0b8:	6800      	ldr	r0, [r0, #0]
 23fb0ba:	4b04      	ldr	r3, [pc, #16]	; (23fb0cc <_malloc_r+0x18>)
 23fb0bc:	4403      	add	r3, r0
 23fb0be:	681b      	ldr	r3, [r3, #0]
 23fb0c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb0c2:	9302      	str	r3, [sp, #8]
 23fb0c4:	bd09      	pop	{r0, r3, pc}
 23fb0c6:	0000      	.short	0x0000
 23fb0c8:	1007adf8 	.word	0x1007adf8
 23fb0cc:	00000004 	.word	0x00000004

023fb0d0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 23fb0d0:	b509      	push	{r0, r3, lr}
 23fb0d2:	4804      	ldr	r0, [pc, #16]	; (23fb0e4 <__errno+0x14>)
 23fb0d4:	6800      	ldr	r0, [r0, #0]
 23fb0d6:	4b04      	ldr	r3, [pc, #16]	; (23fb0e8 <__errno+0x18>)
 23fb0d8:	4403      	add	r3, r0
 23fb0da:	681b      	ldr	r3, [r3, #0]
 23fb0dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb0de:	9302      	str	r3, [sp, #8]
 23fb0e0:	bd09      	pop	{r0, r3, pc}
 23fb0e2:	0000      	.short	0x0000
 23fb0e4:	1007adf8 	.word	0x1007adf8
 23fb0e8:	00000004 	.word	0x00000004

023fb0ec <__assert_func>:

#if defined(DYNALIB_EXPORT) || defined(DYNALIB_IMPORT)
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fb0ec:	b509      	push	{r0, r3, lr}
 23fb0ee:	4804      	ldr	r0, [pc, #16]	; (23fb100 <__assert_func+0x14>)
 23fb0f0:	6800      	ldr	r0, [r0, #0]
 23fb0f2:	4b04      	ldr	r3, [pc, #16]	; (23fb104 <__assert_func+0x18>)
 23fb0f4:	4403      	add	r3, r0
 23fb0f6:	681b      	ldr	r3, [r3, #0]
 23fb0f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb0fa:	9302      	str	r3, [sp, #8]
 23fb0fc:	bd09      	pop	{r0, r3, pc}
 23fb0fe:	0000      	.short	0x0000
 23fb100:	1007adf8 	.word	0x1007adf8
 23fb104:	00000004 	.word	0x00000004

023fb108 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fb108:	b509      	push	{r0, r3, lr}
 23fb10a:	4804      	ldr	r0, [pc, #16]	; (23fb11c <newlib_impure_ptr_callback+0x14>)
 23fb10c:	6800      	ldr	r0, [r0, #0]
 23fb10e:	4b04      	ldr	r3, [pc, #16]	; (23fb120 <newlib_impure_ptr_callback+0x18>)
 23fb110:	4403      	add	r3, r0
 23fb112:	681b      	ldr	r3, [r3, #0]
 23fb114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb116:	9302      	str	r3, [sp, #8]
 23fb118:	bd09      	pop	{r0, r3, pc}
 23fb11a:	0000      	.short	0x0000
 23fb11c:	1007adf8 	.word	0x1007adf8
 23fb120:	00000004 	.word	0x00000004

023fb124 <__cxa_guard_acquire>:

DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
DYNALIB_FN(22, rt, __cxa_guard_acquire, int(__guard*))
 23fb124:	b509      	push	{r0, r3, lr}
 23fb126:	4804      	ldr	r0, [pc, #16]	; (23fb138 <__cxa_guard_acquire+0x14>)
 23fb128:	6800      	ldr	r0, [r0, #0]
 23fb12a:	4b04      	ldr	r3, [pc, #16]	; (23fb13c <__cxa_guard_acquire+0x18>)
 23fb12c:	4403      	add	r3, r0
 23fb12e:	681b      	ldr	r3, [r3, #0]
 23fb130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 23fb132:	9302      	str	r3, [sp, #8]
 23fb134:	bd09      	pop	{r0, r3, pc}
 23fb136:	0000      	.short	0x0000
 23fb138:	1007adf8 	.word	0x1007adf8
 23fb13c:	00000004 	.word	0x00000004

023fb140 <__cxa_guard_release>:
DYNALIB_FN(23, rt, __cxa_guard_release, void(__guard*))
 23fb140:	b509      	push	{r0, r3, lr}
 23fb142:	4804      	ldr	r0, [pc, #16]	; (23fb154 <__cxa_guard_release+0x14>)
 23fb144:	6800      	ldr	r0, [r0, #0]
 23fb146:	4b04      	ldr	r3, [pc, #16]	; (23fb158 <__cxa_guard_release+0x18>)
 23fb148:	4403      	add	r3, r0
 23fb14a:	681b      	ldr	r3, [r3, #0]
 23fb14c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 23fb14e:	9302      	str	r3, [sp, #8]
 23fb150:	bd09      	pop	{r0, r3, pc}
 23fb152:	0000      	.short	0x0000
 23fb154:	1007adf8 	.word	0x1007adf8
 23fb158:	00000004 	.word	0x00000004

023fb15c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fb15c:	2100      	movs	r1, #0
 23fb15e:	f7ff bdbf 	b.w	23face0 <system_delay_ms>

023fb162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fb162:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fb164:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fb166:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fb168:	b17c      	cbz	r4, 23fb18a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fb16a:	6863      	ldr	r3, [r4, #4]
 23fb16c:	3b01      	subs	r3, #1
 23fb16e:	6063      	str	r3, [r4, #4]
 23fb170:	b95b      	cbnz	r3, 23fb18a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fb172:	6823      	ldr	r3, [r4, #0]
 23fb174:	4620      	mov	r0, r4
 23fb176:	689b      	ldr	r3, [r3, #8]
 23fb178:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fb17a:	68a3      	ldr	r3, [r4, #8]
 23fb17c:	3b01      	subs	r3, #1
 23fb17e:	60a3      	str	r3, [r4, #8]
 23fb180:	b91b      	cbnz	r3, 23fb18a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fb182:	6823      	ldr	r3, [r4, #0]
 23fb184:	4620      	mov	r0, r4
 23fb186:	68db      	ldr	r3, [r3, #12]
 23fb188:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fb18a:	4628      	mov	r0, r5
 23fb18c:	bd38      	pop	{r3, r4, r5, pc}

023fb18e <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 23fb18e:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
 23fb190:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
 23fb192:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fb194:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fb196:	dd03      	ble.n	23fb1a0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x12>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 23fb198:	f7ff ff54 	bl	23fb044 <realloc>
            if (!d) {
 23fb19c:	b918      	cbnz	r0, 23fb1a6 <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x18>
    }
 23fb19e:	bd38      	pop	{r3, r4, r5, pc}
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 23fb1a0:	f7ff ff42 	bl	23fb028 <free>
        T* d = nullptr;
 23fb1a4:	2000      	movs	r0, #0
        data_ = d;
 23fb1a6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fb1a8:	60a5      	str	r5, [r4, #8]
        return true;
 23fb1aa:	2001      	movs	r0, #1
 23fb1ac:	e7f7      	b.n	23fb19e <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi+0x10>

023fb1ae <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb1ae:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fb1b0:	2300      	movs	r3, #0
 23fb1b2:	e9c0 3300 	strd	r3, r3, [r0]
 23fb1b6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb1b8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb1ba:	6849      	ldr	r1, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fb1bc:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fb1be:	4299      	cmp	r1, r3
 23fb1c0:	dd10      	ble.n	23fb1e4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
 23fb1c2:	f7ff ffe4 	bl	23fb18e <_ZN5spark6VectorIcNS_16DefaultAllocatorEE7reallocIcLi0EEEbi>
 23fb1c6:	b168      	cbz	r0, 23fb1e4 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fb1c8:	e9d5 3100 	ldrd	r3, r1, [r5]
 23fb1cc:	6822      	ldr	r2, [r4, #0]
 23fb1ce:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
 23fb1d0:	4299      	cmp	r1, r3
 23fb1d2:	d005      	beq.n	23fb1e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
 23fb1d4:	b10a      	cbz	r2, 23fb1da <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
 23fb1d6:	7818      	ldrb	r0, [r3, #0]
 23fb1d8:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
 23fb1da:	3301      	adds	r3, #1
 23fb1dc:	3201      	adds	r2, #1
 23fb1de:	e7f7      	b.n	23fb1d0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
 23fb1e0:	686b      	ldr	r3, [r5, #4]
 23fb1e2:	6063      	str	r3, [r4, #4]
    }
}
 23fb1e4:	4620      	mov	r0, r4
 23fb1e6:	bd38      	pop	{r3, r4, r5, pc}

023fb1e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
 23fb1e8:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
 23fb1ea:	6843      	ldr	r3, [r0, #4]
    {
 23fb1ec:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
 23fb1ee:	3b01      	subs	r3, #1
 23fb1f0:	6043      	str	r3, [r0, #4]
 23fb1f2:	b963      	cbnz	r3, 23fb20e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
 23fb1f4:	6803      	ldr	r3, [r0, #0]
 23fb1f6:	689b      	ldr	r3, [r3, #8]
 23fb1f8:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fb1fa:	68a3      	ldr	r3, [r4, #8]
 23fb1fc:	3b01      	subs	r3, #1
 23fb1fe:	60a3      	str	r3, [r4, #8]
 23fb200:	b92b      	cbnz	r3, 23fb20e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
 23fb202:	6823      	ldr	r3, [r4, #0]
 23fb204:	4620      	mov	r0, r4
    }
 23fb206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
 23fb20a:	68db      	ldr	r3, [r3, #12]
 23fb20c:	4718      	bx	r3
    }
 23fb20e:	bd10      	pop	{r4, pc}

023fb210 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb210:	b570      	push	{r4, r5, r6, lr}
 23fb212:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb214:	e9d0 5300 	ldrd	r5, r3, [r0]
 23fb218:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
 23fb21c:	42ae      	cmp	r6, r5
 23fb21e:	d004      	beq.n	23fb22a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 23fb220:	4628      	mov	r0, r5
 23fb222:	f002 fffb 	bl	23fe21c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
 23fb226:	3510      	adds	r5, #16
 23fb228:	e7f8      	b.n	23fb21c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
 23fb22a:	6820      	ldr	r0, [r4, #0]
 23fb22c:	f7ff fefc 	bl	23fb028 <free>
    AllocatorT::free(data_);
}
 23fb230:	4620      	mov	r0, r4
 23fb232:	bd70      	pop	{r4, r5, r6, pc}

023fb234 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fb234:	2300      	movs	r3, #0
 23fb236:	4802      	ldr	r0, [pc, #8]	; (23fb240 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fb238:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fb23a:	f7ff bb2f 	b.w	23fa89c <os_mutex_recursive_create>
 23fb23e:	bf00      	nop
 23fb240:	1007aec0 	.word	0x1007aec0

023fb244 <_ZNK8particle6Buffer5toHexEPcj>:
    }
    toHex(&s.operator[](0), s.length() + 1); // Overwrites the term. null
    return s;
}

size_t Buffer::toHex(char* out, size_t size) const {
 23fb244:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fb246:	e9d0 4600 	ldrd	r4, r6, [r0]
 *
 * @return Number of characters written to the destination buffer, not including the trailing `\0`.
 */
inline size_t toHex(const void* src, size_t srcSize, char* dest, size_t destSize) {
    static const char alpha[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
    size_t n = 0;
 23fb24a:	2000      	movs	r0, #0
    auto srcBytes = (const uint8_t*)src;
    for (size_t i = 0; i < srcSize && n + 1 < destSize; ++i) {
        const auto b = srcBytes[i];
        dest[n++] = alpha[b >> 4];
 23fb24c:	4f0e      	ldr	r7, [pc, #56]	; (23fb288 <_ZNK8particle6Buffer5toHexEPcj+0x44>)
 23fb24e:	4426      	add	r6, r4
    for (size_t i = 0; i < srcSize && n + 1 < destSize; ++i) {
 23fb250:	42b4      	cmp	r4, r6
 23fb252:	d014      	beq.n	23fb27e <_ZNK8particle6Buffer5toHexEPcj+0x3a>
 23fb254:	1c43      	adds	r3, r0, #1
 23fb256:	429a      	cmp	r2, r3
 23fb258:	d911      	bls.n	23fb27e <_ZNK8particle6Buffer5toHexEPcj+0x3a>
        const auto b = srcBytes[i];
 23fb25a:	f814 5b01 	ldrb.w	r5, [r4], #1
        dest[n++] = alpha[b >> 4];
 23fb25e:	ea4f 1c15 	mov.w	ip, r5, lsr #4
 23fb262:	f817 c00c 	ldrb.w	ip, [r7, ip]
 23fb266:	f801 c000 	strb.w	ip, [r1, r0]
        if (n + 1 < destSize) {
 23fb26a:	3002      	adds	r0, #2
 23fb26c:	4282      	cmp	r2, r0
            dest[n++] = alpha[b & 0x0f];
 23fb26e:	bf81      	itttt	hi
 23fb270:	f005 050f 	andhi.w	r5, r5, #15
 23fb274:	5d7d      	ldrbhi	r5, [r7, r5]
 23fb276:	54cd      	strbhi	r5, [r1, r3]
 23fb278:	4603      	movhi	r3, r0
    for (size_t i = 0; i < srcSize && n + 1 < destSize; ++i) {
 23fb27a:	4618      	mov	r0, r3
 23fb27c:	e7e8      	b.n	23fb250 <_ZNK8particle6Buffer5toHexEPcj+0xc>
        }
    }
    if (n < destSize) {
 23fb27e:	4282      	cmp	r2, r0
        dest[n] = '\0';
 23fb280:	bf84      	itt	hi
 23fb282:	2300      	movhi	r3, #0
 23fb284:	540b      	strbhi	r3, [r1, r0]
    return particle::toHex(d_.data(), d_.size(), out, size);
}
 23fb286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fb288:	023ff894 	.word	0x023ff894

023fb28c <_ZNK8particle6Buffer5toHexEv>:
String Buffer::toHex() const {
 23fb28c:	b530      	push	{r4, r5, lr}
 23fb28e:	460d      	mov	r5, r1
 23fb290:	b085      	sub	sp, #20
    String s;
 23fb292:	4912      	ldr	r1, [pc, #72]	; (23fb2dc <_ZNK8particle6Buffer5toHexEv+0x50>)
String Buffer::toHex() const {
 23fb294:	4604      	mov	r4, r0
    String s;
 23fb296:	4668      	mov	r0, sp
 23fb298:	f003 f825 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
    if (!s.resize(d_.size() * 2)) {
 23fb29c:	6869      	ldr	r1, [r5, #4]
 23fb29e:	4668      	mov	r0, sp
 23fb2a0:	0049      	lsls	r1, r1, #1
 23fb2a2:	f002 ffed 	bl	23fe280 <_ZN6String6resizeEj>
 23fb2a6:	b948      	cbnz	r0, 23fb2bc <_ZNK8particle6Buffer5toHexEv+0x30>
        return String();
 23fb2a8:	4620      	mov	r0, r4
 23fb2aa:	490c      	ldr	r1, [pc, #48]	; (23fb2dc <_ZNK8particle6Buffer5toHexEv+0x50>)
 23fb2ac:	f003 f81b 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
    String s;
 23fb2b0:	4668      	mov	r0, sp
 23fb2b2:	f002 ffb3 	bl	23fe21c <_ZN6StringD1Ev>
}
 23fb2b6:	4620      	mov	r0, r4
 23fb2b8:	b005      	add	sp, #20
 23fb2ba:	bd30      	pop	{r4, r5, pc}
    toHex(&s.operator[](0), s.length() + 1); // Overwrites the term. null
 23fb2bc:	2100      	movs	r1, #0
 23fb2be:	4668      	mov	r0, sp
 23fb2c0:	f003 f8a8 	bl	23fe414 <_ZN6StringixEj>
 23fb2c4:	9a02      	ldr	r2, [sp, #8]
 23fb2c6:	4601      	mov	r1, r0
 23fb2c8:	3201      	adds	r2, #1
 23fb2ca:	4628      	mov	r0, r5
 23fb2cc:	f7ff ffba 	bl	23fb244 <_ZNK8particle6Buffer5toHexEPcj>
    return s;
 23fb2d0:	4669      	mov	r1, sp
 23fb2d2:	4620      	mov	r0, r4
 23fb2d4:	f003 f839 	bl	23fe34a <_ZN6StringC1EOS_>
 23fb2d8:	e7ea      	b.n	23fb2b0 <_ZNK8particle6Buffer5toHexEv+0x24>
 23fb2da:	bf00      	nop
 23fb2dc:	023ffc6a 	.word	0x023ffc6a

023fb2e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>:
        capacity_(0) {
 23fb2e0:	2200      	movs	r2, #0
 23fb2e2:	e9c0 2200 	strd	r2, r2, [r0]
 23fb2e6:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fb2e8:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 23fb2ea:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb2ec:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb2ee:	6004      	str	r4, [r0, #0]
 23fb2f0:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb2f2:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb2f4:	6044      	str	r4, [r0, #4]
 23fb2f6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb2f8:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb2fa:	6084      	str	r4, [r0, #8]
}
 23fb2fc:	bd10      	pop	{r4, pc}

023fb2fe <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 23fb2fe:	2200      	movs	r2, #0
 23fb300:	6840      	ldr	r0, [r0, #4]
 23fb302:	4611      	mov	r1, r2
 23fb304:	f7ff bde8 	b.w	23faed8 <network_ready>

023fb308 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
 23fb308:	2200      	movs	r2, #0
 23fb30a:	6840      	ldr	r0, [r0, #4]
 23fb30c:	4611      	mov	r1, r2
 23fb30e:	f7ff be1b 	b.w	23faf48 <network_listening>

023fb312 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fb312:	2200      	movs	r2, #0
 23fb314:	6840      	ldr	r0, [r0, #4]
 23fb316:	4611      	mov	r1, r2
 23fb318:	f7ff be32 	b.w	23faf80 <network_get_listen_timeout>

023fb31c <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fb31c:	2200      	movs	r2, #0
 23fb31e:	6840      	ldr	r0, [r0, #4]
 23fb320:	f7ff be20 	b.w	23faf64 <network_set_listen_timeout>

023fb324 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fb324:	2200      	movs	r2, #0
 23fb326:	6840      	ldr	r0, [r0, #4]
 23fb328:	f081 0101 	eor.w	r1, r1, #1
 23fb32c:	f7ff bdfe 	b.w	23faf2c <network_listen>

023fb330 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fb330:	2300      	movs	r3, #0
 23fb332:	6840      	ldr	r0, [r0, #4]
 23fb334:	461a      	mov	r2, r3
 23fb336:	4619      	mov	r1, r3
 23fb338:	f7ff bdea 	b.w	23faf10 <network_off>

023fb33c <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fb33c:	2300      	movs	r3, #0
 23fb33e:	6840      	ldr	r0, [r0, #4]
 23fb340:	461a      	mov	r2, r3
 23fb342:	4619      	mov	r1, r3
 23fb344:	f7ff bdd6 	b.w	23faef4 <network_on>

023fb348 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fb348:	2200      	movs	r2, #0
 23fb34a:	6840      	ldr	r0, [r0, #4]
 23fb34c:	4611      	mov	r1, r2
 23fb34e:	f7ff bda7 	b.w	23faea0 <network_connecting>

023fb352 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fb352:	2200      	movs	r2, #0
 23fb354:	2102      	movs	r1, #2
 23fb356:	6840      	ldr	r0, [r0, #4]
 23fb358:	f7ff bdb0 	b.w	23faebc <network_disconnect>

023fb35c <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fb35c:	2300      	movs	r3, #0
 23fb35e:	6840      	ldr	r0, [r0, #4]
 23fb360:	461a      	mov	r2, r3
 23fb362:	f7ff bd8f 	b.w	23fae84 <network_connect>
	...

023fb368 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 23fb368:	b510      	push	{r4, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 23fb36a:	2428      	movs	r4, #40	; 0x28
 23fb36c:	4b07      	ldr	r3, [pc, #28]	; (23fb38c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 23fb36e:	4622      	mov	r2, r4
 23fb370:	4618      	mov	r0, r3
 23fb372:	2100      	movs	r1, #0
 23fb374:	f003 ffb5 	bl	23ff2e2 <memset>
        cid = -1;
 23fb378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fb37c:	6042      	str	r2, [r0, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fb37e:	2204      	movs	r2, #4
 23fb380:	4b03      	ldr	r3, [pc, #12]	; (23fb390 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
 23fb382:	8004      	strh	r4, [r0, #0]
 23fb384:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 23fb386:	4a03      	ldr	r2, [pc, #12]	; (23fb394 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
 23fb388:	601a      	str	r2, [r3, #0]
 23fb38a:	bd10      	pop	{r4, pc}
 23fb38c:	1007aecc 	.word	0x1007aecc
 23fb390:	1007aec4 	.word	0x1007aec4
 23fb394:	023ff8ac 	.word	0x023ff8ac

023fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>:
      operator=(_Move_assign_base&& __rhs)
 23fb398:	b507      	push	{r0, r1, r2, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fb39a:	f991 3010 	ldrsb.w	r3, [r1, #16]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fb39e:	4a05      	ldr	r2, [pc, #20]	; (23fb3b4 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0+0x1c>)
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 23fb3a0:	3301      	adds	r3, #1
	__variant::__raw_idx_visit(
 23fb3a2:	9001      	str	r0, [sp, #4]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fb3a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fb3a8:	a801      	add	r0, sp, #4
 23fb3aa:	4798      	blx	r3
      }
 23fb3ac:	b003      	add	sp, #12
 23fb3ae:	f85d fb04 	ldr.w	pc, [sp], #4
 23fb3b2:	bf00      	nop
 23fb3b4:	023ff8e8 	.word	0x023ff8e8

023fb3b8 <_ZSt26__throw_bad_variant_accessb>:
  {
 23fb3b8:	b508      	push	{r3, lr}
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23fb3ba:	f7ff fe6d 	bl	23fb098 <abort>
	...

023fb3c0 <_ZN8particle7VariantC1EOS0_>:
	_M_index{_Np}
 23fb3c0:	2200      	movs	r2, #0
    /**
     * Move constructor.
     *
     * @param var Variant to move from.
     */
    Variant(Variant&& var) :
 23fb3c2:	b513      	push	{r0, r1, r4, lr}
 23fb3c4:	4604      	mov	r4, r0
 23fb3c6:	7402      	strb	r2, [r0, #16]
	  return make_signed_t<__index_type>(this->_M_index);
 23fb3c8:	f991 3010 	ldrsb.w	r3, [r1, #16]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fb3cc:	4a05      	ldr	r2, [pc, #20]	; (23fb3e4 <_ZN8particle7VariantC1EOS0_+0x24>)
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 23fb3ce:	3301      	adds	r3, #1
	__detail::__variant::__raw_idx_visit(
 23fb3d0:	e9cd 0100 	strd	r0, r1, [sp]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fb3d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fb3d8:	4668      	mov	r0, sp
 23fb3da:	4798      	blx	r3
            Variant() {
        swap(*this, var);
    }
 23fb3dc:	4620      	mov	r0, r4
 23fb3de:	b002      	add	sp, #8
 23fb3e0:	bd10      	pop	{r4, pc}
 23fb3e2:	bf00      	nop
 23fb3e4:	023ff918 	.word	0x023ff918

023fb3e8 <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>:

} // namespace

spark_cloud_disconnect_options CloudDisconnectOptions::toSystemOptions() const
{
    spark_cloud_disconnect_options opts = {};
 23fb3e8:	2200      	movs	r2, #0
 23fb3ea:	8142      	strh	r2, [r0, #10]
    opts.size = sizeof(opts);
 23fb3ec:	220c      	movs	r2, #12
 23fb3ee:	8002      	strh	r2, [r0, #0]
    opts.flags = flags_;
 23fb3f0:	680a      	ldr	r2, [r1, #0]
 23fb3f2:	7082      	strb	r2, [r0, #2]
    opts.graceful = graceful_;
 23fb3f4:	7a0a      	ldrb	r2, [r1, #8]
 23fb3f6:	70c2      	strb	r2, [r0, #3]
    opts.timeout = timeout_;
 23fb3f8:	684a      	ldr	r2, [r1, #4]
 23fb3fa:	6042      	str	r2, [r0, #4]
    opts.clear_session = clearSession_;
 23fb3fc:	7a4a      	ldrb	r2, [r1, #9]
 23fb3fe:	7202      	strb	r2, [r0, #8]
    opts.reconnect_immediately = reconnect_;
 23fb400:	7a8a      	ldrb	r2, [r1, #10]
 23fb402:	7242      	strb	r2, [r0, #9]
    return opts;
}
 23fb404:	4770      	bx	lr

023fb406 <_ZN10CloudClass7publishEN8particle10CloudEventE>:
    return publish_event(name, s.c_str(), s.length(), static_cast<int>(protocol::CoapContentFormat::PARTICLE_STRUCTURED),
            DEFAULT_CLOUD_EVENT_TTL, flags);
}

bool CloudClass::publish(CloudEvent event) {
    int r = event.publish();
 23fb406:	4608      	mov	r0, r1
bool CloudClass::publish(CloudEvent event) {
 23fb408:	b508      	push	{r3, lr}
    int r = event.publish();
 23fb40a:	f000 ff85 	bl	23fc318 <_ZN8particle10CloudEvent7publishEv>
    if (r < 0) {
        return false;
    }
    return true;
}
 23fb40e:	43c0      	mvns	r0, r0
 23fb410:	0fc0      	lsrs	r0, r0, #31
 23fb412:	bd08      	pop	{r3, pc}

023fb414 <_ZN10CloudClass20setDisconnectOptionsERK22CloudDisconnectOptions>:
void CloudClass::disconnect(const CloudDisconnectOptions& options) {
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
}

void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23fb414:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const auto opts = options.toSystemOptions();
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23fb416:	2300      	movs	r3, #0
void CloudClass::setDisconnectOptions(const CloudDisconnectOptions& options) {
 23fb418:	4601      	mov	r1, r0
    const auto opts = options.toSystemOptions();
 23fb41a:	a801      	add	r0, sp, #4
 23fb41c:	f7ff ffe4 	bl	23fb3e8 <_ZNK22CloudDisconnectOptions15toSystemOptionsEv>
    spark_set_connection_property(SPARK_CLOUD_DISCONNECT_OPTIONS, 0 /* value */, &opts, nullptr /* reserved */);
 23fb420:	4602      	mov	r2, r0
 23fb422:	4619      	mov	r1, r3
 23fb424:	2002      	movs	r0, #2
 23fb426:	f7ff fd11 	bl	23fae4c <spark_set_connection_property>
}
 23fb42a:	b005      	add	sp, #20
 23fb42c:	f85d fb04 	ldr.w	pc, [sp], #4

023fb430 <_ZN8particle6BufferaSEOS0_.isra.0>:
namespace particle {

/**
 * A dynamically allocated buffer.
 */
class Buffer {
 23fb430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fb432:	4604      	mov	r4, r0
 23fb434:	a801      	add	r0, sp, #4
 23fb436:	f7ff ff53 	bl	23fb2e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
 23fb43a:	9b01      	ldr	r3, [sp, #4]
 23fb43c:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb43e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb440:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb442:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb444:	6062      	str	r2, [r4, #4]
 23fb446:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb448:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb44a:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb44c:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb44e:	9001      	str	r0, [sp, #4]
 23fb450:	9303      	str	r3, [sp, #12]
    ::free(ptr);
 23fb452:	f7ff fde9 	bl	23fb028 <free>
 23fb456:	b004      	add	sp, #16
 23fb458:	bd10      	pop	{r4, pc}

023fb45a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>:
        capacity_(0) {
 23fb45a:	2200      	movs	r2, #0
 23fb45c:	e9c0 2200 	strd	r2, r2, [r0]
 23fb460:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fb462:	b510      	push	{r4, lr}
      __a = _GLIBCXX_MOVE(__b);
 23fb464:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb466:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb468:	6004      	str	r4, [r0, #0]
 23fb46a:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb46c:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb46e:	6044      	str	r4, [r0, #4]
 23fb470:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb472:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb474:	6084      	str	r4, [r0, #8]
}
 23fb476:	bd10      	pop	{r4, pc}

023fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>:
        capacity_(0) {
 23fb478:	2200      	movs	r2, #0
 23fb47a:	e9c0 2200 	strd	r2, r2, [r0]
 23fb47e:	6082      	str	r2, [r0, #8]
    /**
     * Move constructor.
     *
     * @param map Map to move from.
     */
    Map(Map&& map) :
 23fb480:	b510      	push	{r4, lr}
 23fb482:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb484:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb486:	6004      	str	r4, [r0, #0]
 23fb488:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb48a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb48c:	6044      	str	r4, [r0, #4]
 23fb48e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb490:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb492:	6084      	str	r4, [r0, #8]
            Map() {
        swap(*this, map);
    }
 23fb494:	bd10      	pop	{r4, pc}

023fb496 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb496:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb498:	2628      	movs	r6, #40	; 0x28
 23fb49a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb49e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb4a0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb4a4:	42ae      	cmp	r6, r5
 23fb4a6:	d008      	beq.n	23fb4ba <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev+0x24>
      { _M_reset(); }
 23fb4a8:	f105 0010 	add.w	r0, r5, #16
 23fb4ac:	f7fe ff08 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fb4b0:	4628      	mov	r0, r5
 23fb4b2:	f002 feb3 	bl	23fe21c <_ZN6StringD1Ev>
 23fb4b6:	3528      	adds	r5, #40	; 0x28
 23fb4b8:	e7f4      	b.n	23fb4a4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb4ba:	6820      	ldr	r0, [r4, #0]
 23fb4bc:	f7ff fdb4 	bl	23fb028 <free>
}
 23fb4c0:	4620      	mov	r0, r4
 23fb4c2:	bd70      	pop	{r4, r5, r6, pc}

023fb4c4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb4c4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fb4c6:	2618      	movs	r6, #24
 23fb4c8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fb4cc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fb4ce:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fb4d2:	42ae      	cmp	r6, r5
 23fb4d4:	d004      	beq.n	23fb4e0 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev+0x1c>
 23fb4d6:	4628      	mov	r0, r5
 23fb4d8:	f7fe fef2 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fb4dc:	3518      	adds	r5, #24
 23fb4de:	e7f8      	b.n	23fb4d2 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fb4e0:	6820      	ldr	r0, [r4, #0]
 23fb4e2:	f7ff fda1 	bl	23fb028 <free>
}
 23fb4e6:	4620      	mov	r0, r4
 23fb4e8:	bd70      	pop	{r4, r5, r6, pc}

023fb4ea <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb4ea:	b508      	push	{r3, lr}
	      this->_M_reset();
 23fb4ec:	6800      	ldr	r0, [r0, #0]
 23fb4ee:	f7fe fee7 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb4f2:	bd08      	pop	{r3, pc}

023fb4f4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb4f4:	b510      	push	{r4, lr}
 23fb4f6:	6804      	ldr	r4, [r0, #0]
		if (this->_M_index == __rhs_index)
 23fb4f8:	7c23      	ldrb	r3, [r4, #16]
 23fb4fa:	b123      	cbz	r3, 23fb506 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SR_+0x12>
	      this->_M_reset();
 23fb4fc:	4620      	mov	r0, r4
 23fb4fe:	f7fe fedf 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb502:	2300      	movs	r3, #0
 23fb504:	7423      	strb	r3, [r4, #16]
      }
 23fb506:	bd10      	pop	{r4, pc}

023fb508 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb508:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb50a:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb50c:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb50e:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb510:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fb512:	2b03      	cmp	r3, #3
 23fb514:	d104      	bne.n	23fb520 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb516:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb518:	680a      	ldr	r2, [r1, #0]
 23fb51a:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb51c:	600b      	str	r3, [r1, #0]
      }
 23fb51e:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb520:	2bff      	cmp	r3, #255	; 0xff
 23fb522:	d00c      	beq.n	23fb53e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
 23fb524:	680e      	ldr	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb526:	6840      	ldr	r0, [r0, #4]
 23fb528:	4621      	mov	r1, r4
 23fb52a:	f7ff ff35 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb52e:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23fb530:	4620      	mov	r0, r4
 23fb532:	f7fe fec5 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb536:	2303      	movs	r3, #3
        ::new (__storage)
 23fb538:	6026      	str	r6, [r4, #0]
	  this->_M_index = __rhs_index;
 23fb53a:	7423      	strb	r3, [r4, #16]
 23fb53c:	e7ef      	b.n	23fb51e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
 23fb53e:	4620      	mov	r0, r4
 23fb540:	f7fe febe 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb544:	6833      	ldr	r3, [r6, #0]
 23fb546:	6023      	str	r3, [r4, #0]
	  this->_M_index = __rhs_index;
 23fb548:	2303      	movs	r3, #3
 23fb54a:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fb54c:	6868      	ldr	r0, [r5, #4]
 23fb54e:	f7fe feb7 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb552:	e7e4      	b.n	23fb51e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SJ_+0x16>

023fb554 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb554:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb556:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb558:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb55a:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb55c:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fb55e:	2b02      	cmp	r3, #2
 23fb560:	d104      	bne.n	23fb56c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb562:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb564:	680a      	ldr	r2, [r1, #0]
 23fb566:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb568:	600b      	str	r3, [r1, #0]
      }
 23fb56a:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb56c:	2bff      	cmp	r3, #255	; 0xff
 23fb56e:	d00c      	beq.n	23fb58a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
 23fb570:	680e      	ldr	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb572:	6840      	ldr	r0, [r0, #4]
 23fb574:	4621      	mov	r1, r4
 23fb576:	f7ff ff0f 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb57a:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23fb57c:	4620      	mov	r0, r4
 23fb57e:	f7fe fe9f 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb582:	2302      	movs	r3, #2
        ::new (__storage)
 23fb584:	6026      	str	r6, [r4, #0]
	  this->_M_index = __rhs_index;
 23fb586:	7423      	strb	r3, [r4, #16]
 23fb588:	e7ef      	b.n	23fb56a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
 23fb58a:	4620      	mov	r0, r4
 23fb58c:	f7fe fe98 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb590:	6833      	ldr	r3, [r6, #0]
 23fb592:	6023      	str	r3, [r4, #0]
	  this->_M_index = __rhs_index;
 23fb594:	2302      	movs	r3, #2
 23fb596:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fb598:	6868      	ldr	r0, [r5, #4]
 23fb59a:	f7fe fe91 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb59e:	e7e4      	b.n	23fb56a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SJ_+0x16>

023fb5a0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb5a0:	b570      	push	{r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb5a2:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb5a4:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb5a6:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb5a8:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fb5aa:	2b01      	cmp	r3, #1
 23fb5ac:	d104      	bne.n	23fb5b8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x18>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb5ae:	7823      	ldrb	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb5b0:	780a      	ldrb	r2, [r1, #0]
 23fb5b2:	7022      	strb	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb5b4:	700b      	strb	r3, [r1, #0]
      }
 23fb5b6:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb5b8:	2bff      	cmp	r3, #255	; 0xff
 23fb5ba:	d00c      	beq.n	23fb5d6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x36>
			auto __tmp(std::move(__rhs_mem));
 23fb5bc:	780e      	ldrb	r6, [r1, #0]
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb5be:	6840      	ldr	r0, [r0, #4]
 23fb5c0:	4621      	mov	r1, r4
 23fb5c2:	f7ff fee9 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb5c6:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23fb5c8:	4620      	mov	r0, r4
 23fb5ca:	f7fe fe79 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb5ce:	2301      	movs	r3, #1
        ::new (__storage)
 23fb5d0:	7026      	strb	r6, [r4, #0]
	  this->_M_index = __rhs_index;
 23fb5d2:	7423      	strb	r3, [r4, #16]
 23fb5d4:	e7ef      	b.n	23fb5b6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x16>
	  this->_M_reset();
 23fb5d6:	4620      	mov	r0, r4
 23fb5d8:	f7fe fe72 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb5dc:	7833      	ldrb	r3, [r6, #0]
 23fb5de:	7023      	strb	r3, [r4, #0]
	  this->_M_index = __rhs_index;
 23fb5e0:	2301      	movs	r3, #1
 23fb5e2:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fb5e4:	6868      	ldr	r0, [r5, #4]
 23fb5e6:	f7fe fe6b 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb5ea:	e7e4      	b.n	23fb5b6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SJ_+0x16>

023fb5ec <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb5ec:	b510      	push	{r4, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb5ee:	6801      	ldr	r1, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb5f0:	4604      	mov	r4, r0
		if (!this->valueless_by_exception()) [[__likely__]]
 23fb5f2:	7c0b      	ldrb	r3, [r1, #16]
 23fb5f4:	2bff      	cmp	r3, #255	; 0xff
 23fb5f6:	d005      	beq.n	23fb604 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESO_SJ_+0x18>
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb5f8:	6840      	ldr	r0, [r0, #4]
 23fb5fa:	f7ff fecd 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
		    this->_M_reset();
 23fb5fe:	6820      	ldr	r0, [r4, #0]
 23fb600:	f7fe fe5e 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb604:	bd10      	pop	{r4, pc}

023fb606 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb606:	b538      	push	{r3, r4, r5, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb608:	6805      	ldr	r5, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb60a:	4604      	mov	r4, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb60c:	7c2b      	ldrb	r3, [r5, #16]
		if (this->index() == __rhs_index)
 23fb60e:	b15b      	cbz	r3, 23fb628 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x22>
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb610:	2bff      	cmp	r3, #255	; 0xff
 23fb612:	d00a      	beq.n	23fb62a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x24>
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb614:	4629      	mov	r1, r5
 23fb616:	6840      	ldr	r0, [r0, #4]
 23fb618:	f7ff febe 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb61c:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
 23fb61e:	4620      	mov	r0, r4
 23fb620:	f7fe fe4e 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb624:	2300      	movs	r3, #0
 23fb626:	7423      	strb	r3, [r4, #16]
      }
 23fb628:	bd38      	pop	{r3, r4, r5, pc}
	  this->_M_reset();
 23fb62a:	4628      	mov	r0, r5
 23fb62c:	f7fe fe48 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb630:	2300      	movs	r3, #0
 23fb632:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
 23fb634:	6860      	ldr	r0, [r4, #4]
 23fb636:	f7fe fe43 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb63a:	e7f5      	b.n	23fb628 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESO_SJ_+0x22>

023fb63c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb63c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb63e:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb640:	4605      	mov	r5, r0
		if (this->_M_index == __rhs_index)
 23fb642:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb644:	460e      	mov	r6, r1
		if (this->_M_index == __rhs_index)
 23fb646:	2b0a      	cmp	r3, #10
 23fb648:	d114      	bne.n	23fb674 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_+0x38>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23fb64a:	4668      	mov	r0, sp
 23fb64c:	f7ff ff14 	bl	23fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb650:	682b      	ldr	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb652:	9900      	ldr	r1, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb654:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb656:	6019      	str	r1, [r3, #0]
 23fb658:	9901      	ldr	r1, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb65a:	9200      	str	r2, [sp, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb65c:	685a      	ldr	r2, [r3, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb65e:	6059      	str	r1, [r3, #4]
 23fb660:	9902      	ldr	r1, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb662:	9201      	str	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb664:	689a      	ldr	r2, [r3, #8]
class Map {
 23fb666:	4668      	mov	r0, sp
      __a = _GLIBCXX_MOVE(__b);
 23fb668:	6099      	str	r1, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb66a:	9202      	str	r2, [sp, #8]
 23fb66c:	f7ff ff13 	bl	23fb496 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      }
 23fb670:	b004      	add	sp, #16
 23fb672:	bd70      	pop	{r4, r5, r6, pc}
	      this->_M_reset();
 23fb674:	4620      	mov	r0, r4
 23fb676:	f7fe fe23 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb67a:	230a      	movs	r3, #10
      ::new ((void*)std::addressof(__storage))
 23fb67c:	4631      	mov	r1, r6
 23fb67e:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23fb680:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23fb682:	f7ff fef9 	bl	23fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  return make_signed_t<__index_type>(this->_M_index);
 23fb686:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23fb688:	280a      	cmp	r0, #10
 23fb68a:	d0f1      	beq.n	23fb670 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SR_+0x34>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fb68c:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23fb690:	4258      	negs	r0, r3
 23fb692:	4158      	adcs	r0, r3
 23fb694:	f7ff fe90 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>

023fb698 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb698:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb69a:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb69c:	4605      	mov	r5, r0
		if (this->_M_index == __rhs_index)
 23fb69e:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb6a0:	460e      	mov	r6, r1
		if (this->_M_index == __rhs_index)
 23fb6a2:	2b09      	cmp	r3, #9
 23fb6a4:	d114      	bne.n	23fb6d0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_+0x38>
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23fb6a6:	a801      	add	r0, sp, #4
 23fb6a8:	f7ff fed7 	bl	23fb45a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  [this](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb6ac:	682b      	ldr	r3, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb6ae:	9901      	ldr	r1, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb6b0:	681a      	ldr	r2, [r3, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb6b2:	6019      	str	r1, [r3, #0]
 23fb6b4:	9902      	ldr	r1, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb6b6:	9201      	str	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb6b8:	685a      	ldr	r2, [r3, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb6ba:	6059      	str	r1, [r3, #4]
 23fb6bc:	9903      	ldr	r1, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb6be:	9202      	str	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb6c0:	689a      	ldr	r2, [r3, #8]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23fb6c2:	a801      	add	r0, sp, #4
      __a = _GLIBCXX_MOVE(__b);
 23fb6c4:	6099      	str	r1, [r3, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb6c6:	9203      	str	r2, [sp, #12]
 23fb6c8:	f7ff fefc 	bl	23fb4c4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
      }
 23fb6cc:	b004      	add	sp, #16
 23fb6ce:	bd70      	pop	{r4, r5, r6, pc}
	      this->_M_reset();
 23fb6d0:	4620      	mov	r0, r4
 23fb6d2:	f7fe fdf5 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb6d6:	2309      	movs	r3, #9
      ::new ((void*)std::addressof(__storage))
 23fb6d8:	4631      	mov	r1, r6
 23fb6da:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23fb6dc:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23fb6de:	f7ff febc 	bl	23fb45a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  return make_signed_t<__index_type>(this->_M_index);
 23fb6e2:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23fb6e4:	2809      	cmp	r0, #9
 23fb6e6:	d0f1      	beq.n	23fb6cc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SR_+0x34>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fb6e8:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23fb6ec:	4258      	negs	r0, r3
 23fb6ee:	4158      	adcs	r0, r3
 23fb6f0:	f7ff fe62 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>

023fb6f4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb6f4:	b538      	push	{r3, r4, r5, lr}
 23fb6f6:	6804      	ldr	r4, [r0, #0]
 23fb6f8:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb6fa:	7c23      	ldrb	r3, [r4, #16]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23fb6fc:	4620      	mov	r0, r4
		if (this->_M_index == __rhs_index)
 23fb6fe:	2b08      	cmp	r3, #8
 23fb700:	d103      	bne.n	23fb70a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_+0x16>
      }
 23fb702:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23fb706:	f7ff be93 	b.w	23fb430 <_ZN8particle6BufferaSEOS0_.isra.0>
	      this->_M_reset();
 23fb70a:	f7fe fdd9 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb70e:	2308      	movs	r3, #8
 23fb710:	4629      	mov	r1, r5
 23fb712:	4620      	mov	r0, r4
 23fb714:	7423      	strb	r3, [r4, #16]
 23fb716:	f7ff fde3 	bl	23fb2e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  return make_signed_t<__index_type>(this->_M_index);
 23fb71a:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23fb71c:	2808      	cmp	r0, #8
 23fb71e:	d005      	beq.n	23fb72c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SR_+0x38>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fb720:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23fb724:	4258      	negs	r0, r3
 23fb726:	4158      	adcs	r0, r3
 23fb728:	f7ff fe46 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
      }
 23fb72c:	bd38      	pop	{r3, r4, r5, pc}

023fb72e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb72e:	b538      	push	{r3, r4, r5, lr}
 23fb730:	6804      	ldr	r4, [r0, #0]
 23fb732:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb734:	7c23      	ldrb	r3, [r4, #16]
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23fb736:	4620      	mov	r0, r4
		if (this->_M_index == __rhs_index)
 23fb738:	2b07      	cmp	r3, #7
 23fb73a:	d103      	bne.n	23fb744 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_+0x16>
      }
 23fb73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		  __variant::__get<__rhs_index>(*this) = std::move(__rhs_mem);
 23fb740:	f002 be28 	b.w	23fe394 <_ZN6StringaSEOS_>
	      this->_M_reset();
 23fb744:	f7fe fdbc 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb748:	2307      	movs	r3, #7
      ::new ((void*)std::addressof(__storage))
 23fb74a:	4629      	mov	r1, r5
 23fb74c:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23fb74e:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23fb750:	f002 fdfb 	bl	23fe34a <_ZN6StringC1EOS_>
	  return make_signed_t<__index_type>(this->_M_index);
 23fb754:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23fb756:	2807      	cmp	r0, #7
 23fb758:	d005      	beq.n	23fb766 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SR_+0x38>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fb75a:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23fb75e:	4258      	negs	r0, r3
 23fb760:	4158      	adcs	r0, r3
 23fb762:	f7ff fe29 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
      }
 23fb766:	bd38      	pop	{r3, r4, r5, pc}

023fb768 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb768:	b538      	push	{r3, r4, r5, lr}
 23fb76a:	6804      	ldr	r4, [r0, #0]
 23fb76c:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb76e:	7c23      	ldrb	r3, [r4, #16]
 23fb770:	2b06      	cmp	r3, #6
 23fb772:	d104      	bne.n	23fb77e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
 23fb774:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fb778:	e9c4 2300 	strd	r2, r3, [r4]
      }
 23fb77c:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23fb77e:	4620      	mov	r0, r4
 23fb780:	f7fe fd9e 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb784:	2306      	movs	r3, #6
 23fb786:	7423      	strb	r3, [r4, #16]
 23fb788:	e7f4      	b.n	23fb774 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SR_+0xc>

023fb78a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb78a:	b538      	push	{r3, r4, r5, lr}
 23fb78c:	6804      	ldr	r4, [r0, #0]
 23fb78e:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb790:	7c23      	ldrb	r3, [r4, #16]
 23fb792:	2b05      	cmp	r3, #5
 23fb794:	d104      	bne.n	23fb7a0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
 23fb796:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fb79a:	e9c4 2300 	strd	r2, r3, [r4]
      }
 23fb79e:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23fb7a0:	4620      	mov	r0, r4
 23fb7a2:	f7fe fd8d 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb7a6:	2305      	movs	r3, #5
 23fb7a8:	7423      	strb	r3, [r4, #16]
 23fb7aa:	e7f4      	b.n	23fb796 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SR_+0xc>

023fb7ac <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb7ac:	b538      	push	{r3, r4, r5, lr}
 23fb7ae:	6804      	ldr	r4, [r0, #0]
 23fb7b0:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb7b2:	7c23      	ldrb	r3, [r4, #16]
 23fb7b4:	2b04      	cmp	r3, #4
 23fb7b6:	d104      	bne.n	23fb7c2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_+0x16>
      ::new ((void*)std::addressof(__storage))
 23fb7b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 23fb7bc:	e9c4 2300 	strd	r2, r3, [r4]
      }
 23fb7c0:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23fb7c2:	4620      	mov	r0, r4
 23fb7c4:	f7fe fd7c 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb7c8:	2304      	movs	r3, #4
 23fb7ca:	7423      	strb	r3, [r4, #16]
 23fb7cc:	e7f4      	b.n	23fb7b8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SR_+0xc>

023fb7ce <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb7ce:	b538      	push	{r3, r4, r5, lr}
 23fb7d0:	6804      	ldr	r4, [r0, #0]
 23fb7d2:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb7d4:	7c23      	ldrb	r3, [r4, #16]
 23fb7d6:	2b03      	cmp	r3, #3
 23fb7d8:	d102      	bne.n	23fb7e0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
 23fb7da:	682b      	ldr	r3, [r5, #0]
 23fb7dc:	6023      	str	r3, [r4, #0]
      }
 23fb7de:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23fb7e0:	4620      	mov	r0, r4
 23fb7e2:	f7fe fd6d 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb7e6:	2303      	movs	r3, #3
 23fb7e8:	7423      	strb	r3, [r4, #16]
 23fb7ea:	e7f6      	b.n	23fb7da <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESO_SR_+0xc>

023fb7ec <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb7ec:	b538      	push	{r3, r4, r5, lr}
 23fb7ee:	6804      	ldr	r4, [r0, #0]
 23fb7f0:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb7f2:	7c23      	ldrb	r3, [r4, #16]
 23fb7f4:	2b02      	cmp	r3, #2
 23fb7f6:	d102      	bne.n	23fb7fe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
 23fb7f8:	682b      	ldr	r3, [r5, #0]
 23fb7fa:	6023      	str	r3, [r4, #0]
      }
 23fb7fc:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23fb7fe:	4620      	mov	r0, r4
 23fb800:	f7fe fd5e 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb804:	2302      	movs	r3, #2
 23fb806:	7423      	strb	r3, [r4, #16]
 23fb808:	e7f6      	b.n	23fb7f8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESO_SR_+0xc>

023fb80a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb80a:	b538      	push	{r3, r4, r5, lr}
 23fb80c:	6804      	ldr	r4, [r0, #0]
 23fb80e:	460d      	mov	r5, r1
		if (this->_M_index == __rhs_index)
 23fb810:	7c23      	ldrb	r3, [r4, #16]
 23fb812:	2b01      	cmp	r3, #1
 23fb814:	d102      	bne.n	23fb81c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_+0x12>
      ::new ((void*)std::addressof(__storage))
 23fb816:	782b      	ldrb	r3, [r5, #0]
 23fb818:	7023      	strb	r3, [r4, #0]
      }
 23fb81a:	bd38      	pop	{r3, r4, r5, pc}
	      this->_M_reset();
 23fb81c:	4620      	mov	r0, r4
 23fb81e:	f7fe fd4f 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fb822:	2301      	movs	r3, #1
 23fb824:	7423      	strb	r3, [r4, #16]
 23fb826:	e7f6      	b.n	23fb816 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEEaSEOSI_EUlOT_T0_E_RSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESO_SR_+0xc>

023fb828 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb82a:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb82c:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb82e:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb830:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fb832:	2b06      	cmp	r3, #6
 23fb834:	d108      	bne.n	23fb848 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb836:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
 23fb83a:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb83e:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb842:	e9c6 2300 	strd	r2, r3, [r6]
      }
 23fb846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb848:	2bff      	cmp	r3, #255	; 0xff
 23fb84a:	d00e      	beq.n	23fb86a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
 23fb84c:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb850:	6840      	ldr	r0, [r0, #4]
 23fb852:	4621      	mov	r1, r4
 23fb854:	f7ff fda0 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb858:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23fb85a:	4620      	mov	r0, r4
 23fb85c:	f7fe fd30 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb860:	2306      	movs	r3, #6
        ::new (__storage)
 23fb862:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
 23fb866:	7423      	strb	r3, [r4, #16]
 23fb868:	e7ed      	b.n	23fb846 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
 23fb86a:	4620      	mov	r0, r4
 23fb86c:	f7fe fd28 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb870:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fb874:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
 23fb878:	2306      	movs	r3, #6
 23fb87a:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fb87c:	6868      	ldr	r0, [r5, #4]
 23fb87e:	f7fe fd1f 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb882:	e7e0      	b.n	23fb846 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESO_SJ_+0x1e>

023fb884 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb886:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb888:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb88a:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb88c:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fb88e:	2b05      	cmp	r3, #5
 23fb890:	d108      	bne.n	23fb8a4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb892:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
 23fb896:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb89a:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb89e:	e9c6 2300 	strd	r2, r3, [r6]
      }
 23fb8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb8a4:	2bff      	cmp	r3, #255	; 0xff
 23fb8a6:	d00e      	beq.n	23fb8c6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
 23fb8a8:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb8ac:	6840      	ldr	r0, [r0, #4]
 23fb8ae:	4621      	mov	r1, r4
 23fb8b0:	f7ff fd72 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb8b4:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23fb8b6:	4620      	mov	r0, r4
 23fb8b8:	f7fe fd02 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb8bc:	2305      	movs	r3, #5
        ::new (__storage)
 23fb8be:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
 23fb8c2:	7423      	strb	r3, [r4, #16]
 23fb8c4:	e7ed      	b.n	23fb8a2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
 23fb8c6:	4620      	mov	r0, r4
 23fb8c8:	f7fe fcfa 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb8cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fb8d0:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
 23fb8d4:	2305      	movs	r3, #5
 23fb8d6:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fb8d8:	6868      	ldr	r0, [r5, #4]
 23fb8da:	f7fe fcf1 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb8de:	e7e0      	b.n	23fb8a2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESO_SJ_+0x1e>

023fb8e0 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb8e2:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb8e4:	4605      	mov	r5, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb8e6:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb8e8:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fb8ea:	2b04      	cmp	r3, #4
 23fb8ec:	d108      	bne.n	23fb900 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x20>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb8ee:	e9d4 2300 	ldrd	r2, r3, [r4]
      __a = _GLIBCXX_MOVE(__b);
 23fb8f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fb8f6:	e9c4 0100 	strd	r0, r1, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb8fa:	e9c6 2300 	strd	r2, r3, [r6]
      }
 23fb8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb900:	2bff      	cmp	r3, #255	; 0xff
 23fb902:	d00e      	beq.n	23fb922 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x42>
			auto __tmp(std::move(__rhs_mem));
 23fb904:	e9d1 6700 	ldrd	r6, r7, [r1]
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb908:	6840      	ldr	r0, [r0, #4]
 23fb90a:	4621      	mov	r1, r4
 23fb90c:	f7ff fd44 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb910:	682c      	ldr	r4, [r5, #0]
	  this->_M_reset();
 23fb912:	4620      	mov	r0, r4
 23fb914:	f7fe fcd4 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
	  this->_M_index = __rhs_index;
 23fb918:	2304      	movs	r3, #4
        ::new (__storage)
 23fb91a:	e9c4 6700 	strd	r6, r7, [r4]
	  this->_M_index = __rhs_index;
 23fb91e:	7423      	strb	r3, [r4, #16]
 23fb920:	e7ed      	b.n	23fb8fe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x1e>
	  this->_M_reset();
 23fb922:	4620      	mov	r0, r4
 23fb924:	f7fe fccc 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb928:	e9d6 2300 	ldrd	r2, r3, [r6]
 23fb92c:	e9c4 2300 	strd	r2, r3, [r4]
	  this->_M_index = __rhs_index;
 23fb930:	2304      	movs	r3, #4
 23fb932:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fb934:	6868      	ldr	r0, [r5, #4]
 23fb936:	f7fe fcc3 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb93a:	e7e0      	b.n	23fb8fe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESO_SJ_+0x1e>

023fb93c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb93c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb93e:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb940:	4606      	mov	r6, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb942:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb944:	460d      	mov	r5, r1
		if (this->index() == __rhs_index)
 23fb946:	2b0a      	cmp	r3, #10
 23fb948:	d10d      	bne.n	23fb966 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x2a>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb94a:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb94c:	680a      	ldr	r2, [r1, #0]
 23fb94e:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb950:	600b      	str	r3, [r1, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb952:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb954:	684a      	ldr	r2, [r1, #4]
 23fb956:	6062      	str	r2, [r4, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb958:	604b      	str	r3, [r1, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb95a:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb95c:	688a      	ldr	r2, [r1, #8]
 23fb95e:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb960:	608b      	str	r3, [r1, #8]
      }
 23fb962:	b004      	add	sp, #16
 23fb964:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb966:	2bff      	cmp	r3, #255	; 0xff
 23fb968:	d014      	beq.n	23fb994 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x58>
			auto __tmp(std::move(__rhs_mem));
 23fb96a:	4668      	mov	r0, sp
 23fb96c:	f7ff fd84 	bl	23fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb970:	e9d6 1000 	ldrd	r1, r0, [r6]
 23fb974:	f7ff fd10 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb978:	6834      	ldr	r4, [r6, #0]
	  this->_M_reset();
 23fb97a:	4620      	mov	r0, r4
 23fb97c:	f7fe fca0 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb980:	4669      	mov	r1, sp
 23fb982:	4620      	mov	r0, r4
 23fb984:	f7ff fd78 	bl	23fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  this->_M_index = __rhs_index;
 23fb988:	230a      	movs	r3, #10
 23fb98a:	4668      	mov	r0, sp
 23fb98c:	7423      	strb	r3, [r4, #16]
 23fb98e:	f7ff fd82 	bl	23fb496 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
 23fb992:	e7e6      	b.n	23fb962 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
 23fb994:	4620      	mov	r0, r4
 23fb996:	f7fe fc93 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb99a:	4629      	mov	r1, r5
 23fb99c:	4620      	mov	r0, r4
 23fb99e:	f7ff fd6b 	bl	23fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  this->_M_index = __rhs_index;
 23fb9a2:	230a      	movs	r3, #10
 23fb9a4:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fb9a6:	6870      	ldr	r0, [r6, #4]
 23fb9a8:	f7fe fc8a 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fb9ac:	e7d9      	b.n	23fb962 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESO_SJ_+0x26>

023fb9ae <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb9ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb9b0:	6804      	ldr	r4, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb9b2:	4606      	mov	r6, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fb9b4:	7c23      	ldrb	r3, [r4, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fb9b6:	460d      	mov	r5, r1
		if (this->index() == __rhs_index)
 23fb9b8:	2b09      	cmp	r3, #9
 23fb9ba:	d10d      	bne.n	23fb9d8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x2a>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb9bc:	6823      	ldr	r3, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fb9be:	680a      	ldr	r2, [r1, #0]
 23fb9c0:	6022      	str	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb9c2:	600b      	str	r3, [r1, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb9c4:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fb9c6:	684a      	ldr	r2, [r1, #4]
 23fb9c8:	6062      	str	r2, [r4, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb9ca:	604b      	str	r3, [r1, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fb9cc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fb9ce:	688a      	ldr	r2, [r1, #8]
 23fb9d0:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fb9d2:	608b      	str	r3, [r1, #8]
      }
 23fb9d4:	b004      	add	sp, #16
 23fb9d6:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fb9d8:	2bff      	cmp	r3, #255	; 0xff
 23fb9da:	d014      	beq.n	23fba06 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x58>
			auto __tmp(std::move(__rhs_mem));
 23fb9dc:	a801      	add	r0, sp, #4
 23fb9de:	f7ff fd3c 	bl	23fb45a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23fb9e2:	e9d6 1000 	ldrd	r1, r0, [r6]
 23fb9e6:	f7ff fcd7 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fb9ea:	6834      	ldr	r4, [r6, #0]
	  this->_M_reset();
 23fb9ec:	4620      	mov	r0, r4
 23fb9ee:	f7fe fc67 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fb9f2:	4620      	mov	r0, r4
 23fb9f4:	a901      	add	r1, sp, #4
 23fb9f6:	f7ff fd30 	bl	23fb45a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  this->_M_index = __rhs_index;
 23fb9fa:	2309      	movs	r3, #9
			auto __tmp(std::move(__rhs_mem));
 23fb9fc:	a801      	add	r0, sp, #4
	  this->_M_index = __rhs_index;
 23fb9fe:	7423      	strb	r3, [r4, #16]
			auto __tmp(std::move(__rhs_mem));
 23fba00:	f7ff fd60 	bl	23fb4c4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEED1Ev>
 23fba04:	e7e6      	b.n	23fb9d4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
 23fba06:	4620      	mov	r0, r4
 23fba08:	f7fe fc5a 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fba0c:	4629      	mov	r1, r5
 23fba0e:	4620      	mov	r0, r4
 23fba10:	f7ff fd23 	bl	23fb45a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1EOS4_>
	  this->_M_index = __rhs_index;
 23fba14:	2309      	movs	r3, #9
 23fba16:	7423      	strb	r3, [r4, #16]
			__rhs._M_reset();
 23fba18:	6870      	ldr	r0, [r6, #4]
 23fba1a:	f7fe fc51 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fba1e:	e7d9      	b.n	23fb9d4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESO_SJ_+0x26>

023fba20 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fba20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fba22:	6805      	ldr	r5, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fba24:	4604      	mov	r4, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fba26:	7c2b      	ldrb	r3, [r5, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fba28:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fba2a:	2b08      	cmp	r3, #8
 23fba2c:	d110      	bne.n	23fba50 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x30>
 23fba2e:	4629      	mov	r1, r5
 23fba30:	a801      	add	r0, sp, #4
 23fba32:	f7ff fc55 	bl	23fb2e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
      __a = _GLIBCXX_MOVE(__b);
 23fba36:	4631      	mov	r1, r6
 23fba38:	4628      	mov	r0, r5
 23fba3a:	f7ff fcf9 	bl	23fb430 <_ZN8particle6BufferaSEOS0_.isra.0>
      __b = _GLIBCXX_MOVE(__tmp);
 23fba3e:	4630      	mov	r0, r6
 23fba40:	a901      	add	r1, sp, #4
 23fba42:	f7ff fcf5 	bl	23fb430 <_ZN8particle6BufferaSEOS0_.isra.0>
    ::free(ptr);
 23fba46:	9801      	ldr	r0, [sp, #4]
 23fba48:	f7ff faee 	bl	23fb028 <free>
      }
 23fba4c:	b004      	add	sp, #16
 23fba4e:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fba50:	2bff      	cmp	r3, #255	; 0xff
 23fba52:	d011      	beq.n	23fba78 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x58>
 23fba54:	a801      	add	r0, sp, #4
 23fba56:	f7ff fc43 	bl	23fb2e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23fba5a:	e9d4 1000 	ldrd	r1, r0, [r4]
 23fba5e:	f7ff fc9b 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fba62:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
 23fba64:	4620      	mov	r0, r4
 23fba66:	f7fe fc2b 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fba6a:	4620      	mov	r0, r4
 23fba6c:	a901      	add	r1, sp, #4
 23fba6e:	f7ff fc37 	bl	23fb2e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  this->_M_index = __rhs_index;
 23fba72:	2308      	movs	r3, #8
 23fba74:	7423      	strb	r3, [r4, #16]
 23fba76:	e7e6      	b.n	23fba46 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
 23fba78:	4628      	mov	r0, r5
 23fba7a:	f7fe fc21 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fba7e:	4631      	mov	r1, r6
 23fba80:	4628      	mov	r0, r5
 23fba82:	f7ff fc2d 	bl	23fb2e0 <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1EOS2_>
	  this->_M_index = __rhs_index;
 23fba86:	2308      	movs	r3, #8
 23fba88:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
 23fba8a:	6860      	ldr	r0, [r4, #4]
 23fba8c:	f7fe fc18 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fba90:	e7dc      	b.n	23fba4c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESO_SJ_+0x2c>

023fba92 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fba92:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fba94:	6805      	ldr	r5, [r0, #0]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fba96:	4604      	mov	r4, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fba98:	7c2b      	ldrb	r3, [r5, #16]
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fba9a:	460e      	mov	r6, r1
		if (this->index() == __rhs_index)
 23fba9c:	2b07      	cmp	r3, #7
 23fba9e:	d110      	bne.n	23fbac2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x30>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbaa0:	4629      	mov	r1, r5
 23fbaa2:	4668      	mov	r0, sp
 23fbaa4:	f002 fc51 	bl	23fe34a <_ZN6StringC1EOS_>
      __a = _GLIBCXX_MOVE(__b);
 23fbaa8:	4631      	mov	r1, r6
 23fbaaa:	4628      	mov	r0, r5
 23fbaac:	f002 fc72 	bl	23fe394 <_ZN6StringaSEOS_>
      __b = _GLIBCXX_MOVE(__tmp);
 23fbab0:	4669      	mov	r1, sp
 23fbab2:	4630      	mov	r0, r6
 23fbab4:	f002 fc6e 	bl	23fe394 <_ZN6StringaSEOS_>
			auto __tmp(std::move(__rhs_mem));
 23fbab8:	4668      	mov	r0, sp
 23fbaba:	f002 fbaf 	bl	23fe21c <_ZN6StringD1Ev>
      }
 23fbabe:	b004      	add	sp, #16
 23fbac0:	bd70      	pop	{r4, r5, r6, pc}
		    if (!this->valueless_by_exception()) [[__likely__]]
 23fbac2:	2bff      	cmp	r3, #255	; 0xff
 23fbac4:	d011      	beq.n	23fbaea <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x58>
			auto __tmp(std::move(__rhs_mem));
 23fbac6:	4668      	mov	r0, sp
 23fbac8:	f002 fc3f 	bl	23fe34a <_ZN6StringC1EOS_>
      _Variant_base& operator=(_Variant_base&&) = default;
 23fbacc:	e9d4 1000 	ldrd	r1, r0, [r4]
 23fbad0:	f7ff fc62 	bl	23fb398 <_ZNSt8__detail9__variant17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEaSEOSF_.isra.0>
	  [this, &__rhs](auto&& __rhs_mem, auto __rhs_index) mutable
 23fbad4:	6824      	ldr	r4, [r4, #0]
	  this->_M_reset();
 23fbad6:	4620      	mov	r0, r4
 23fbad8:	f7fe fbf2 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fbadc:	4669      	mov	r1, sp
 23fbade:	4620      	mov	r0, r4
 23fbae0:	f002 fc33 	bl	23fe34a <_ZN6StringC1EOS_>
	  this->_M_index = __rhs_index;
 23fbae4:	2307      	movs	r3, #7
 23fbae6:	7423      	strb	r3, [r4, #16]
 23fbae8:	e7e6      	b.n	23fbab8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x26>
	  this->_M_reset();
 23fbaea:	4628      	mov	r0, r5
 23fbaec:	f7fe fbe8 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
        ::new (__storage)
 23fbaf0:	4631      	mov	r1, r6
 23fbaf2:	4628      	mov	r0, r5
 23fbaf4:	f002 fc29 	bl	23fe34a <_ZN6StringC1EOS_>
	  this->_M_index = __rhs_index;
 23fbaf8:	2307      	movs	r3, #7
 23fbafa:	742b      	strb	r3, [r5, #16]
			__rhs._M_reset();
 23fbafc:	6860      	ldr	r0, [r4, #4]
 23fbafe:	f7fe fbdf 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      }
 23fbb02:	e7dc      	b.n	23fbabe <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEEE4swapERSI_EUlOT_T0_E_SJ_EJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESO_SJ_+0x2c>

023fbb04 <_ZN8particle10CloudEvent5writeEh>:
        return (unsigned char)c;
    }

    int available() override;

    size_t write(uint8_t b) override {
 23fbb04:	b507      	push	{r0, r1, r2, lr}
        return write(&b, 1);
 23fbb06:	6803      	ldr	r3, [r0, #0]
    size_t write(uint8_t b) override {
 23fbb08:	f88d 1007 	strb.w	r1, [sp, #7]
        return write(&b, 1);
 23fbb0c:	2201      	movs	r2, #1
 23fbb0e:	68db      	ldr	r3, [r3, #12]
 23fbb10:	f10d 0107 	add.w	r1, sp, #7
 23fbb14:	4798      	blx	r3
    }
 23fbb16:	b003      	add	sp, #12
 23fbb18:	f85d fb04 	ldr.w	pc, [sp], #4

023fbb1c <_ZN8particle10CloudEvent5flushEv>:
        }
        return r;
    }

    void flush() override {
    }
 23fbb1c:	4770      	bx	lr

023fbb1e <_ZN8particle12_GLOBAL__N_111RateLimiter16sizeInFullBlocksEj>:
    RateLimiter() :
            dataInFlight_(0) {
    }

    static size_t sizeInFullBlocks(size_t size) {
        return std::max<size_t>(((size + COAP_BLOCK_SIZE - 1) / COAP_BLOCK_SIZE) * COAP_BLOCK_SIZE, COAP_BLOCK_SIZE);
 23fbb1e:	f200 30ff 	addw	r0, r0, #1023	; 0x3ff
 23fbb22:	f420 707f 	bic.w	r0, r0, #1020	; 0x3fc
 23fbb26:	f020 0003 	bic.w	r0, r0, #3
    }
 23fbb2a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 23fbb2e:	bf38      	it	cc
 23fbb30:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 23fbb34:	4770      	bx	lr
	...

023fbb38 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv>:
    static RateLimiter& instance() {
 23fbb38:	b538      	push	{r3, r4, r5, lr}
        static RateLimiter limiter;
 23fbb3a:	4d08      	ldr	r5, [pc, #32]	; (23fbb5c <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv+0x24>)
 23fbb3c:	e8d5 3f8f 	ldab	r3, [r5]
 23fbb40:	f013 0401 	ands.w	r4, r3, #1
 23fbb44:	d108      	bne.n	23fbb58 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv+0x20>
 23fbb46:	4628      	mov	r0, r5
 23fbb48:	f7ff faec 	bl	23fb124 <__cxa_guard_acquire>
 23fbb4c:	b120      	cbz	r0, 23fbb58 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv+0x20>
            dataInFlight_(0) {
 23fbb4e:	4b04      	ldr	r3, [pc, #16]	; (23fbb60 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv+0x28>)
        static RateLimiter limiter;
 23fbb50:	4628      	mov	r0, r5
            dataInFlight_(0) {
 23fbb52:	601c      	str	r4, [r3, #0]
        static RateLimiter limiter;
 23fbb54:	f7ff faf4 	bl	23fb140 <__cxa_guard_release>
    }
 23fbb58:	4801      	ldr	r0, [pc, #4]	; (23fbb60 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv+0x28>)
 23fbb5a:	bd38      	pop	{r3, r4, r5, pc}
 23fbb5c:	1007aef4 	.word	0x1007aef4
 23fbb60:	1007af08 	.word	0x1007af08

023fbb64 <__tcf_2>:
        if (mutex_) {
 23fbb64:	4b02      	ldr	r3, [pc, #8]	; (23fbb70 <__tcf_2+0xc>)
 23fbb66:	6818      	ldr	r0, [r3, #0]
 23fbb68:	b108      	cbz	r0, 23fbb6e <__tcf_2+0xa>
            os_mutex_recursive_destroy(mutex_);
 23fbb6a:	f7fe bea5 	b.w	23fa8b8 <os_mutex_recursive_destroy>
        static EventLock lock;
 23fbb6e:	4770      	bx	lr
 23fbb70:	1007af0c 	.word	0x1007af0c

023fbb74 <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv>:
    static EventLock& instance() {
 23fbb74:	b538      	push	{r3, r4, r5, lr}
        static EventLock lock;
 23fbb76:	4d0b      	ldr	r5, [pc, #44]	; (23fbba4 <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv+0x30>)
 23fbb78:	e8d5 3f8f 	ldab	r3, [r5]
 23fbb7c:	f013 0401 	ands.w	r4, r3, #1
 23fbb80:	d10d      	bne.n	23fbb9e <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv+0x2a>
 23fbb82:	4628      	mov	r0, r5
 23fbb84:	f7ff face 	bl	23fb124 <__cxa_guard_acquire>
 23fbb88:	b148      	cbz	r0, 23fbb9e <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv+0x2a>
            mutex_(nullptr) {
 23fbb8a:	4807      	ldr	r0, [pc, #28]	; (23fbba8 <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv+0x34>)
 23fbb8c:	6004      	str	r4, [r0, #0]
        os_mutex_recursive_create(&mutex_);
 23fbb8e:	f7fe fe85 	bl	23fa89c <os_mutex_recursive_create>
        static EventLock lock;
 23fbb92:	4628      	mov	r0, r5
 23fbb94:	f7ff fad4 	bl	23fb140 <__cxa_guard_release>
 23fbb98:	4804      	ldr	r0, [pc, #16]	; (23fbbac <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv+0x38>)
 23fbb9a:	f003 fb6c 	bl	23ff276 <atexit>
    }
 23fbb9e:	4802      	ldr	r0, [pc, #8]	; (23fbba8 <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv+0x34>)
 23fbba0:	bd38      	pop	{r3, r4, r5, pc}
 23fbba2:	bf00      	nop
 23fbba4:	1007aef8 	.word	0x1007aef8
 23fbba8:	1007af0c 	.word	0x1007af0c
 23fbbac:	023fbb65 	.word	0x023fbb65

023fbbb0 <_ZN8particle12_GLOBAL__N_19EventLock4lockEv.isra.0>:
        if (mutex_) {
 23fbbb0:	b108      	cbz	r0, 23fbbb6 <_ZN8particle12_GLOBAL__N_19EventLock4lockEv.isra.0+0x6>
            os_mutex_recursive_lock(mutex_);
 23fbbb2:	f7fe be8f 	b.w	23fa8d4 <os_mutex_recursive_lock>
    }
 23fbbb6:	4770      	bx	lr

023fbbb8 <_ZN8particle12_GLOBAL__N_111RateLimiter4giveEj>:
    void give(size_t size) {
 23fbbb8:	b570      	push	{r4, r5, r6, lr}
 23fbbba:	4604      	mov	r4, r0
 23fbbbc:	460e      	mov	r6, r1
        std::lock_guard lock(EventLock::instance());
 23fbbbe:	f7ff ffd9 	bl	23fbb74 <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv>
 23fbbc2:	4605      	mov	r5, r0
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 23fbbc4:	6800      	ldr	r0, [r0, #0]
 23fbbc6:	f7ff fff3 	bl	23fbbb0 <_ZN8particle12_GLOBAL__N_19EventLock4lockEv.isra.0>
        dataInFlight_ -= sizeInFullBlocks(size);
 23fbbca:	4630      	mov	r0, r6
 23fbbcc:	f7ff ffa7 	bl	23fbb1e <_ZN8particle12_GLOBAL__N_111RateLimiter16sizeInFullBlocksEj>
 23fbbd0:	6823      	ldr	r3, [r4, #0]
        if (dataInFlight_ < 0) {
 23fbbd2:	1a18      	subs	r0, r3, r0
            dataInFlight_ = 0;
 23fbbd4:	bf4a      	itet	mi
 23fbbd6:	2300      	movmi	r3, #0
        dataInFlight_ -= sizeInFullBlocks(size);
 23fbbd8:	6020      	strpl	r0, [r4, #0]
            dataInFlight_ = 0;
 23fbbda:	6023      	strmi	r3, [r4, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 23fbbdc:	6828      	ldr	r0, [r5, #0]
        if (mutex_) {
 23fbbde:	b118      	cbz	r0, 23fbbe8 <_ZN8particle12_GLOBAL__N_111RateLimiter4giveEj+0x30>
    }
 23fbbe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            os_mutex_recursive_unlock(mutex_);
 23fbbe4:	f7fe be84 	b.w	23fa8f0 <os_mutex_recursive_unlock>
    }
 23fbbe8:	bd70      	pop	{r4, r5, r6, pc}

023fbbea <_ZNK8particle8RefCount7releaseEv>:

    void addRef() const {
        count_.fetch_add(1, std::memory_order_relaxed);
    }

    void release() const {
 23fbbea:	4603      	mov	r3, r0
 23fbbec:	b500      	push	{lr}
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }

      _GLIBCXX_ALWAYS_INLINE __int_type
      fetch_sub(__int_type __i,
		memory_order __m = memory_order_seq_cst) noexcept
      { return __atomic_fetch_sub(&_M_i, __i, int(__m)); }
 23fbbee:	1d02      	adds	r2, r0, #4
 23fbbf0:	e8d2 1fef 	ldaex	r1, [r2]
 23fbbf4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 23fbbf8:	e8c2 cfee 	stlex	lr, ip, [r2]
 23fbbfc:	f1be 0f00 	cmp.w	lr, #0
 23fbc00:	d1f6      	bne.n	23fbbf0 <_ZNK8particle8RefCount7releaseEv+0x6>
        if (count_.fetch_sub(1, std::memory_order_acq_rel) == 1) {
 23fbc02:	2901      	cmp	r1, #1
 23fbc04:	d104      	bne.n	23fbc10 <_ZNK8particle8RefCount7releaseEv+0x26>
            delete this;
 23fbc06:	681b      	ldr	r3, [r3, #0]
        }
    }
 23fbc08:	f85d eb04 	ldr.w	lr, [sp], #4
            delete this;
 23fbc0c:	685b      	ldr	r3, [r3, #4]
 23fbc0e:	4718      	bx	r3
    }
 23fbc10:	f85d fb04 	ldr.w	pc, [sp], #4

023fbc14 <_ZN8particle14CoapMessagePtrD1Ev>:
    CoapMessagePtr(CoapMessagePtr&& ptr) :
            msg_(ptr.msg_) {
        ptr.msg_ = nullptr;
    }

    ~CoapMessagePtr() {
 23fbc14:	b510      	push	{r4, lr}
 23fbc16:	4604      	mov	r4, r0
        coap_destroy_message(msg_, nullptr);
 23fbc18:	2100      	movs	r1, #0
 23fbc1a:	6800      	ldr	r0, [r0, #0]
 23fbc1c:	f003 fa00 	bl	23ff020 <coap_destroy_message>
    }
 23fbc20:	4620      	mov	r0, r4
 23fbc22:	bd10      	pop	{r4, pc}

023fbc24 <_ZN8particle7CStringD1Ev>:

    CString(CString&& str) : CString() {
        swap(*this, str);
    }

    ~CString() {
 23fbc24:	b510      	push	{r4, lr}
 23fbc26:	4604      	mov	r4, r0
        free(const_cast<char*>(s_));
 23fbc28:	6800      	ldr	r0, [r0, #0]
 23fbc2a:	f7ff f9fd 	bl	23fb028 <free>
    }
 23fbc2e:	4620      	mov	r0, r4
 23fbc30:	bd10      	pop	{r4, pc}
	...

023fbc34 <_ZN8particle10CloudEvent4DataD1Ev>:
    return p - path;
}

} // namespace

struct CloudEvent::Data: public RefCount {
 23fbc34:	b510      	push	{r4, lr}
 23fbc36:	4604      	mov	r4, r0
 23fbc38:	4b07      	ldr	r3, [pc, #28]	; (23fbc58 <_ZN8particle10CloudEvent4DataD1Ev+0x24>)
 23fbc3a:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
 23fbc3e:	f7fe f885 	bl	23f9d4c <_ZNSt14_Function_baseD1Ev>
            p_(ptr.p_) {
        ptr.p_ = nullptr;
    }

    ~CoapPayloadPtr() {
        coap_destroy_payload(p_, nullptr);
 23fbc42:	2100      	movs	r1, #0
 23fbc44:	68e0      	ldr	r0, [r4, #12]
 23fbc46:	f003 fa07 	bl	23ff058 <coap_destroy_payload>
 23fbc4a:	f104 0008 	add.w	r0, r4, #8
 23fbc4e:	f7ff ffe9 	bl	23fbc24 <_ZN8particle7CStringD1Ev>
 23fbc52:	4620      	mov	r0, r4
 23fbc54:	bd10      	pop	{r4, pc}
 23fbc56:	bf00      	nop
 23fbc58:	023ffafc 	.word	0x023ffafc

023fbc5c <_ZN8particle10CloudEvent4DataD0Ev>:
 23fbc5c:	b510      	push	{r4, lr}
 23fbc5e:	4604      	mov	r4, r0
 23fbc60:	f7ff ffe8 	bl	23fbc34 <_ZN8particle10CloudEvent4DataD1Ev>
 23fbc64:	4620      	mov	r0, r4
 23fbc66:	213c      	movs	r1, #60	; 0x3c
 23fbc68:	f7fd ffc7 	bl	23f9bfa <_ZdlPvj>
 23fbc6c:	4620      	mov	r0, r4
 23fbc6e:	bd10      	pop	{r4, pc}

023fbc70 <_ZN8particle10CloudEventC1ERKS0_>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fbc70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbc74:	2200      	movs	r2, #0
 23fbc76:	e9c0 2301 	strd	r2, r3, [r0, #4]
CloudEvent::CloudEvent() :
        d_(makeRefCountPtr<Data>()) {
}

CloudEvent::CloudEvent(const CloudEvent& event) :
        d_(event.d_) {
 23fbc7a:	4b07      	ldr	r3, [pc, #28]	; (23fbc98 <_ZN8particle10CloudEventC1ERKS0_+0x28>)
 23fbc7c:	6003      	str	r3, [r0, #0]
    RefCountPtr(T* ptr) :
            RefCountPtr(ptr, true /* addRef */) {
    }

    RefCountPtr(const RefCountPtr& ptr) :
            RefCountPtr(ptr.p_) {
 23fbc7e:	690b      	ldr	r3, [r1, #16]

private:
    T* p_;

    RefCountPtr(T* p, bool addRef) :
            p_(p) {
 23fbc80:	6103      	str	r3, [r0, #16]
        if (p_ && addRef) {
 23fbc82:	b13b      	cbz	r3, 23fbc94 <_ZN8particle10CloudEventC1ERKS0_+0x24>
      { return __atomic_fetch_add(&_M_i, __i, int(__m)); }
 23fbc84:	3304      	adds	r3, #4
 23fbc86:	e853 2f00 	ldrex	r2, [r3]
 23fbc8a:	3201      	adds	r2, #1
 23fbc8c:	e843 2100 	strex	r1, r2, [r3]
 23fbc90:	2900      	cmp	r1, #0
 23fbc92:	d1f8      	bne.n	23fbc86 <_ZN8particle10CloudEventC1ERKS0_+0x16>
}
 23fbc94:	4770      	bx	lr
 23fbc96:	bf00      	nop
 23fbc98:	023ffb0c 	.word	0x023ffb0c

023fbc9c <_ZN8particle10CloudEventC1ENS_11RefCountPtrINS0_4DataEEE>:
 23fbc9c:	2200      	movs	r2, #0

CloudEvent::CloudEvent(CloudEvent&& event) {
    swap(*this, event);
}

CloudEvent::CloudEvent(RefCountPtr<Data> data) :
 23fbc9e:	b510      	push	{r4, lr}
 23fbca0:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 23fbca4:	e9c0 2401 	strd	r2, r4, [r0, #4]
        d_(std::move(data)) {
 23fbca8:	4c02      	ldr	r4, [pc, #8]	; (23fbcb4 <_ZN8particle10CloudEventC1ENS_11RefCountPtrINS0_4DataEEE+0x18>)
 23fbcaa:	6004      	str	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fbcac:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbcae:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fbcb0:	6104      	str	r4, [r0, #16]
}
 23fbcb2:	bd10      	pop	{r4, pc}
 23fbcb4:	023ffb0c 	.word	0x023ffb0c

023fbcb8 <_ZNK8particle10CloudEvent6statusEv>:
        return p_;
 23fbcb8:	6903      	ldr	r3, [r0, #16]
    d_->onStatusChange = std::move(callback);
    return *this;
}

CloudEvent::Status CloudEvent::status() const {
    if (!d_) {
 23fbcba:	b113      	cbz	r3, 23fbcc2 <_ZNK8particle10CloudEvent6statusEv+0xa>
        return Status::INVALID;
    }
    return d_->status;
 23fbcbc:	f893 0020 	ldrb.w	r0, [r3, #32]
 23fbcc0:	4770      	bx	lr
        return Status::INVALID;
 23fbcc2:	2004      	movs	r0, #4
}
 23fbcc4:	4770      	bx	lr

023fbcc6 <_ZNK8particle10CloudEvent10isWritableEv>:

    bool isReadable() const {
        return status() != Status::INVALID;
    }

    bool isWritable() const {
 23fbcc6:	b508      	push	{r3, lr}
        auto s = status();
 23fbcc8:	f7ff fff6 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
        return s != Status::SENDING && s != Status::INVALID;
 23fbccc:	2801      	cmp	r0, #1
 23fbcce:	d003      	beq.n	23fbcd8 <_ZNK8particle10CloudEvent10isWritableEv+0x12>
 23fbcd0:	3804      	subs	r0, #4
 23fbcd2:	bf18      	it	ne
 23fbcd4:	2001      	movne	r0, #1
    }
 23fbcd6:	bd08      	pop	{r3, pc}
        return s != Status::SENDING && s != Status::INVALID;
 23fbcd8:	2000      	movs	r0, #0
 23fbcda:	e7fc      	b.n	23fbcd6 <_ZNK8particle10CloudEvent10isWritableEv+0x10>

023fbcdc <_ZNK8particle10CloudEvent10isReadableEv>:
    bool isReadable() const {
 23fbcdc:	b508      	push	{r3, lr}
        return status() != Status::INVALID;
 23fbcde:	f7ff ffeb 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
    }
 23fbce2:	3804      	subs	r0, #4
 23fbce4:	bf18      	it	ne
 23fbce6:	2001      	movne	r0, #1
 23fbce8:	bd08      	pop	{r3, pc}
	...

023fbcec <_ZNK8particle10CloudEvent4sizeEv>:
size_t CloudEvent::size() const {
 23fbcec:	b510      	push	{r4, lr}
 23fbcee:	b08a      	sub	sp, #40	; 0x28
 23fbcf0:	4604      	mov	r4, r0
    if (!isReadable() || !d_->payload) {
 23fbcf2:	f7ff fff3 	bl	23fbcdc <_ZNK8particle10CloudEvent10isReadableEv>
 23fbcf6:	b1a8      	cbz	r0, 23fbd24 <_ZNK8particle10CloudEvent4sizeEv+0x38>
        ptr.p_ = nullptr;
        return *this;
    }

    explicit operator bool() const {
        return p_;
 23fbcf8:	6923      	ldr	r3, [r4, #16]
 23fbcfa:	68d8      	ldr	r0, [r3, #12]
 23fbcfc:	b190      	cbz	r0, 23fbd24 <_ZNK8particle10CloudEvent4sizeEv+0x38>
    int r = coap_get_payload_size(d_->payload.get(), nullptr /* reserved */);
 23fbcfe:	2100      	movs	r1, #0
 23fbd00:	f003 f9e2 	bl	23ff0c8 <coap_get_payload_size>
    if (r < 0) {
 23fbd04:	2800      	cmp	r0, #0
 23fbd06:	da0d      	bge.n	23fbd24 <_ZNK8particle10CloudEvent4sizeEv+0x38>
        LOG(ERROR, "coap_get_payload_size() failed: %d", r);
 23fbd08:	2400      	movs	r4, #0
 23fbd0a:	2320      	movs	r3, #32
 23fbd0c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fbd10:	4b05      	ldr	r3, [pc, #20]	; (23fbd28 <_ZNK8particle10CloudEvent4sizeEv+0x3c>)
 23fbd12:	9001      	str	r0, [sp, #4]
 23fbd14:	9300      	str	r3, [sp, #0]
 23fbd16:	2032      	movs	r0, #50	; 0x32
 23fbd18:	4623      	mov	r3, r4
 23fbd1a:	4904      	ldr	r1, [pc, #16]	; (23fbd2c <_ZNK8particle10CloudEvent4sizeEv+0x40>)
 23fbd1c:	aa02      	add	r2, sp, #8
 23fbd1e:	f7fe ff8b 	bl	23fac38 <log_message>
        return 0;
 23fbd22:	4620      	mov	r0, r4
}
 23fbd24:	b00a      	add	sp, #40	; 0x28
 23fbd26:	bd10      	pop	{r4, pc}
 23fbd28:	023ff9a5 	.word	0x023ff9a5
 23fbd2c:	023ff948 	.word	0x023ff948

023fbd30 <_ZN8particle10CloudEvent9availableEv>:

void CloudEvent::clear() {
    d_ = makeRefCountPtr<Data>();
}

int CloudEvent::available() {
 23fbd30:	b510      	push	{r4, lr}
 23fbd32:	b08a      	sub	sp, #40	; 0x28
 23fbd34:	4604      	mov	r4, r0
    if (!isReadable() || !d_->payload) {
 23fbd36:	f7ff ffd1 	bl	23fbcdc <_ZNK8particle10CloudEvent10isReadableEv>
 23fbd3a:	b1a8      	cbz	r0, 23fbd68 <_ZN8particle10CloudEvent9availableEv+0x38>
 23fbd3c:	6923      	ldr	r3, [r4, #16]
 23fbd3e:	68d8      	ldr	r0, [r3, #12]
 23fbd40:	b190      	cbz	r0, 23fbd68 <_ZN8particle10CloudEvent9availableEv+0x38>
        return 0;
    }
    int r = coap_get_payload_size(d_->payload.get(), nullptr /* reserved */);
 23fbd42:	2100      	movs	r1, #0
 23fbd44:	f003 f9c0 	bl	23ff0c8 <coap_get_payload_size>
    if (r < 0) {
 23fbd48:	1e02      	subs	r2, r0, #0
 23fbd4a:	da0f      	bge.n	23fbd6c <_ZN8particle10CloudEvent9availableEv+0x3c>
        LOG(ERROR, "coap_get_payload_size() failed: %d", r);
 23fbd4c:	2400      	movs	r4, #0
 23fbd4e:	2320      	movs	r3, #32
 23fbd50:	e9cd 3402 	strd	r3, r4, [sp, #8]
 23fbd54:	4b07      	ldr	r3, [pc, #28]	; (23fbd74 <_ZN8particle10CloudEvent9availableEv+0x44>)
 23fbd56:	2032      	movs	r0, #50	; 0x32
 23fbd58:	9201      	str	r2, [sp, #4]
 23fbd5a:	9300      	str	r3, [sp, #0]
 23fbd5c:	4906      	ldr	r1, [pc, #24]	; (23fbd78 <_ZN8particle10CloudEvent9availableEv+0x48>)
 23fbd5e:	4623      	mov	r3, r4
 23fbd60:	aa02      	add	r2, sp, #8
 23fbd62:	f7fe ff69 	bl	23fac38 <log_message>
        return 0;
 23fbd66:	4620      	mov	r0, r4
    }
    return r - d_->pos;
}
 23fbd68:	b00a      	add	sp, #40	; 0x28
 23fbd6a:	bd10      	pop	{r4, pc}
    return r - d_->pos;
 23fbd6c:	6923      	ldr	r3, [r4, #16]
 23fbd6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 23fbd70:	1a10      	subs	r0, r2, r0
 23fbd72:	e7f9      	b.n	23fbd68 <_ZN8particle10CloudEvent9availableEv+0x38>
 23fbd74:	023ff9a5 	.word	0x023ff9a5
 23fbd78:	023ff948 	.word	0x023ff948

023fbd7c <_ZNK8particle10CloudEvent5errorEv>:
 23fbd7c:	6903      	ldr	r3, [r0, #16]
    if (!d_) {
 23fbd7e:	b10b      	cbz	r3, 23fbd84 <_ZNK8particle10CloudEvent5errorEv+0x8>
    return d_->error;
 23fbd80:	6b98      	ldr	r0, [r3, #56]	; 0x38
 23fbd82:	4770      	bx	lr
        return Error::NO_MEMORY;
 23fbd84:	4800      	ldr	r0, [pc, #0]	; (23fbd88 <_ZNK8particle10CloudEvent5errorEv+0xc>)
}
 23fbd86:	4770      	bx	lr
 23fbd88:	fffffefc 	.word	0xfffffefc

023fbd8c <_ZN8particle10CloudEvent4peekEPcj>:
    }
    d_->pos += r;
    return r;
}

int CloudEvent::peek(char* data, size_t size) {
 23fbd8c:	b530      	push	{r4, r5, lr}
 23fbd8e:	b08d      	sub	sp, #52	; 0x34
 23fbd90:	9103      	str	r1, [sp, #12]
 23fbd92:	4605      	mov	r5, r0
 23fbd94:	4614      	mov	r4, r2
    if (!isReadable()) {
 23fbd96:	f7ff ffa1 	bl	23fbcdc <_ZNK8particle10CloudEvent10isReadableEv>
 23fbd9a:	9903      	ldr	r1, [sp, #12]
 23fbd9c:	b928      	cbnz	r0, 23fbdaa <_ZN8particle10CloudEvent4peekEPcj+0x1e>
        return error();
 23fbd9e:	4628      	mov	r0, r5
    int r = coap_read_payload(d_->payload.get(), data, size, d_->pos, nullptr /* reserved */);
    if (r < 0 && r != Error::END_OF_STREAM) {
        LOG(ERROR, "coap_read_payload() failed: %d", r);
    }
    return r;
}
 23fbda0:	b00d      	add	sp, #52	; 0x34
 23fbda2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return error();
 23fbda6:	f7ff bfe9 	b.w	23fbd7c <_ZNK8particle10CloudEvent5errorEv>
        return p_;
 23fbdaa:	692b      	ldr	r3, [r5, #16]
 23fbdac:	68d8      	ldr	r0, [r3, #12]
    if (!d_->payload) {
 23fbdae:	b938      	cbnz	r0, 23fbdc0 <_ZN8particle10CloudEvent4peekEPcj+0x34>
        return 0;
 23fbdb0:	2c00      	cmp	r4, #0
 23fbdb2:	bf14      	ite	ne
 23fbdb4:	f06f 04c8 	mvnne.w	r4, #200	; 0xc8
 23fbdb8:	2400      	moveq	r4, #0
}
 23fbdba:	4620      	mov	r0, r4
 23fbdbc:	b00d      	add	sp, #52	; 0x34
 23fbdbe:	bd30      	pop	{r4, r5, pc}
    int r = coap_read_payload(d_->payload.get(), data, size, d_->pos, nullptr /* reserved */);
 23fbdc0:	2500      	movs	r5, #0
 23fbdc2:	9500      	str	r5, [sp, #0]
 23fbdc4:	4622      	mov	r2, r4
 23fbdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fbdc8:	f003 f962 	bl	23ff090 <coap_read_payload>
    if (r < 0 && r != Error::END_OF_STREAM) {
 23fbdcc:	1e04      	subs	r4, r0, #0
 23fbdce:	daf4      	bge.n	23fbdba <_ZN8particle10CloudEvent4peekEPcj+0x2e>
 23fbdd0:	f114 0fc9 	cmn.w	r4, #201	; 0xc9
 23fbdd4:	d0f1      	beq.n	23fbdba <_ZN8particle10CloudEvent4peekEPcj+0x2e>
        LOG(ERROR, "coap_read_payload() failed: %d", r);
 23fbdd6:	2320      	movs	r3, #32
 23fbdd8:	e9cd 3504 	strd	r3, r5, [sp, #16]
 23fbddc:	4b04      	ldr	r3, [pc, #16]	; (23fbdf0 <_ZN8particle10CloudEvent4peekEPcj+0x64>)
 23fbdde:	2032      	movs	r0, #50	; 0x32
 23fbde0:	9300      	str	r3, [sp, #0]
 23fbde2:	4904      	ldr	r1, [pc, #16]	; (23fbdf4 <_ZN8particle10CloudEvent4peekEPcj+0x68>)
 23fbde4:	462b      	mov	r3, r5
 23fbde6:	9401      	str	r4, [sp, #4]
 23fbde8:	aa04      	add	r2, sp, #16
 23fbdea:	f7fe ff25 	bl	23fac38 <log_message>
 23fbdee:	e7e4      	b.n	23fbdba <_ZN8particle10CloudEvent4peekEPcj+0x2e>
 23fbdf0:	023ff961 	.word	0x023ff961
 23fbdf4:	023ff948 	.word	0x023ff948

023fbdf8 <_ZN8particle10CloudEvent4readEPcj>:
int CloudEvent::read(char* data, size_t size) {
 23fbdf8:	b510      	push	{r4, lr}
 23fbdfa:	4604      	mov	r4, r0
    int r = peek(data, size);
 23fbdfc:	f7ff ffc6 	bl	23fbd8c <_ZN8particle10CloudEvent4peekEPcj>
    if (r < 0) {
 23fbe00:	2800      	cmp	r0, #0
 23fbe02:	bfa1      	itttt	ge
 23fbe04:	6922      	ldrge	r2, [r4, #16]
    d_->pos += r;
 23fbe06:	6ad3      	ldrge	r3, [r2, #44]	; 0x2c
 23fbe08:	181b      	addge	r3, r3, r0
 23fbe0a:	62d3      	strge	r3, [r2, #44]	; 0x2c
}
 23fbe0c:	bd10      	pop	{r4, pc}

023fbe0e <_ZN8particle10CloudEvent9readBytesEPcj>:
        return read(data, size);
 23fbe0e:	f7ff bff3 	b.w	23fbdf8 <_ZN8particle10CloudEvent4readEPcj>

023fbe12 <_ZN8particle10CloudEvent4readEv>:
    int read() override {
 23fbe12:	b507      	push	{r0, r1, r2, lr}
        size_t n = read(&c, 1);
 23fbe14:	2201      	movs	r2, #1
 23fbe16:	f10d 0107 	add.w	r1, sp, #7
 23fbe1a:	f7ff ffed 	bl	23fbdf8 <_ZN8particle10CloudEvent4readEPcj>
        if (n != 1) {
 23fbe1e:	2801      	cmp	r0, #1
            return -1;
 23fbe20:	bf14      	ite	ne
 23fbe22:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
        return (unsigned char)c;
 23fbe26:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
 23fbe2a:	b003      	add	sp, #12
 23fbe2c:	f85d fb04 	ldr.w	pc, [sp], #4

023fbe30 <_ZN8particle10CloudEvent4peekEv>:
    int peek() override {
 23fbe30:	b507      	push	{r0, r1, r2, lr}
        size_t n = peek(&c, 1);
 23fbe32:	2201      	movs	r2, #1
 23fbe34:	f10d 0107 	add.w	r1, sp, #7
 23fbe38:	f7ff ffa8 	bl	23fbd8c <_ZN8particle10CloudEvent4peekEPcj>
        if (n != 1) {
 23fbe3c:	2801      	cmp	r0, #1
            return -1;
 23fbe3e:	bf14      	ite	ne
 23fbe40:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
        return (unsigned char)c;
 23fbe44:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    }
 23fbe48:	b003      	add	sp, #12
 23fbe4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fbe50 <_ZN8particle10CloudEvent4sendEv>:
    }
    coap_remove_request_handler("/E", COAP_METHOD_POST, nullptr /* reserved */);
    s_subscriptions.clear();
}

int CloudEvent::send() {
 23fbe50:	b5f0      	push	{r4, r5, r6, r7, lr}
        swap(*this, str);
        return *this;
    }

    operator const char*() const {
        return s_;
 23fbe52:	6903      	ldr	r3, [r0, #16]
 23fbe54:	b0a5      	sub	sp, #148	; 0x94
 23fbe56:	4605      	mov	r5, r0
    char uriPath[COAP_MAX_URI_PATH_LENGTH];
    int r = std::snprintf(uriPath, sizeof(uriPath), "E/%s", (const char*)d_->name);
 23fbe58:	217f      	movs	r1, #127	; 0x7f
 23fbe5a:	689b      	ldr	r3, [r3, #8]
 23fbe5c:	4a2b      	ldr	r2, [pc, #172]	; (23fbf0c <_ZN8particle10CloudEvent4sendEv+0xbc>)
 23fbe5e:	a804      	add	r0, sp, #16
 23fbe60:	f7ff f8fe 	bl	23fb060 <snprintf>
    if (r < 0 || (size_t)r >= sizeof(uriPath)) {
 23fbe64:	287e      	cmp	r0, #126	; 0x7e
 23fbe66:	d84e      	bhi.n	23fbf06 <_ZN8particle10CloudEvent4sendEv+0xb6>
            msg_(nullptr) {
 23fbe68:	2400      	movs	r4, #0
        coap_destroy_message(msg_, nullptr);
 23fbe6a:	4621      	mov	r1, r4
 23fbe6c:	4620      	mov	r0, r4
            msg_(nullptr) {
 23fbe6e:	9403      	str	r4, [sp, #12]
        coap_destroy_message(msg_, nullptr);
 23fbe70:	f003 f8d6 	bl	23ff020 <coap_destroy_message>
        return Error::INTERNAL;
    }
    CoapMessagePtr msg;
    auto reqId = CHECK(coap_begin_request(&msg, uriPath, COAP_METHOD_POST, 0 /* timeout */, 0 /* flags */, nullptr /* reserved */));
 23fbe74:	4623      	mov	r3, r4
 23fbe76:	2202      	movs	r2, #2
 23fbe78:	e9cd 4400 	strd	r4, r4, [sp]
 23fbe7c:	a904      	add	r1, sp, #16
 23fbe7e:	a803      	add	r0, sp, #12
 23fbe80:	f003 f8b2 	bl	23fefe8 <coap_begin_request>
 23fbe84:	1e06      	subs	r6, r0, #0
 23fbe86:	db3c      	blt.n	23fbf02 <_ZN8particle10CloudEvent4sendEv+0xb2>
        return p_;
 23fbe88:	692b      	ldr	r3, [r5, #16]
 23fbe8a:	68d9      	ldr	r1, [r3, #12]
    if (d_->payload) {
 23fbe8c:	bb29      	cbnz	r1, 23fbeda <_ZN8particle10CloudEvent4sendEv+0x8a>
        CHECK(coap_set_payload(msg.get(), d_->payload.get(), nullptr /* reserved */));
    }
    if (d_->contentType != ContentType::TEXT) {
 23fbe8e:	692b      	ldr	r3, [r5, #16]
 23fbe90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 23fbe92:	bb72      	cbnz	r2, 23fbef2 <_ZN8particle10CloudEvent4sendEv+0xa2>
        CHECK(coap_add_uint_option(msg.get(), COAP_OPTION_CONTENT_FORMAT, (unsigned)d_->contentType, nullptr /* reserved */));
    }
    CHECK(coap_add_uint_option(msg.get(), COAP_OPTION_NO_RESPONSE, 26, nullptr /* reserved */)); // RFC 7967, 2.1
 23fbe94:	2300      	movs	r3, #0
 23fbe96:	221a      	movs	r2, #26
 23fbe98:	f44f 7181 	mov.w	r1, #258	; 0x102
 23fbe9c:	9803      	ldr	r0, [sp, #12]
 23fbe9e:	f003 f92f 	bl	23ff100 <coap_add_uint_option>
 23fbea2:	1e04      	subs	r4, r0, #0
 23fbea4:	db1f      	blt.n	23fbee6 <_ZN8particle10CloudEvent4sendEv+0x96>
    CHECK(coap_end_request(msg.get(), nullptr /* resp_cb */,
 23fbea6:	2700      	movs	r7, #0
 23fbea8:	692b      	ldr	r3, [r5, #16]
 23fbeaa:	4639      	mov	r1, r7
 23fbeac:	9300      	str	r3, [sp, #0]
 23fbeae:	4a18      	ldr	r2, [pc, #96]	; (23fbf10 <_ZN8particle10CloudEvent4sendEv+0xc0>)
 23fbeb0:	4b18      	ldr	r3, [pc, #96]	; (23fbf14 <_ZN8particle10CloudEvent4sendEv+0xc4>)
 23fbeb2:	9803      	ldr	r0, [sp, #12]
 23fbeb4:	9701      	str	r7, [sp, #4]
 23fbeb6:	f003 f8a5 	bl	23ff004 <coap_end_request>
 23fbeba:	1e04      	subs	r4, r0, #0
 23fbebc:	db13      	blt.n	23fbee6 <_ZN8particle10CloudEvent4sendEv+0x96>
 23fbebe:	692b      	ldr	r3, [r5, #16]
        msg_ = nullptr;
 23fbec0:	9703      	str	r7, [sp, #12]
 23fbec2:	3304      	adds	r3, #4
 23fbec4:	e853 2f00 	ldrex	r2, [r3]
 23fbec8:	3201      	adds	r2, #1
 23fbeca:	e843 2100 	strex	r1, r2, [r3]
 23fbece:	2900      	cmp	r1, #0
 23fbed0:	d1f8      	bne.n	23fbec4 <_ZN8particle10CloudEvent4sendEv+0x74>
 23fbed2:	692b      	ldr	r3, [r5, #16]
    // The system now owns the message
    msg.release();
    // Keep the reference around until either the ACK or error callback is called
    d_->addRef();
    d_->requestId = reqId;
    return 0;
 23fbed4:	463c      	mov	r4, r7
    d_->requestId = reqId;
 23fbed6:	631e      	str	r6, [r3, #48]	; 0x30
    return 0;
 23fbed8:	e005      	b.n	23fbee6 <_ZN8particle10CloudEvent4sendEv+0x96>
        CHECK(coap_set_payload(msg.get(), d_->payload.get(), nullptr /* reserved */));
 23fbeda:	4622      	mov	r2, r4
 23fbedc:	9803      	ldr	r0, [sp, #12]
 23fbede:	f003 f901 	bl	23ff0e4 <coap_set_payload>
 23fbee2:	1e04      	subs	r4, r0, #0
 23fbee4:	dad3      	bge.n	23fbe8e <_ZN8particle10CloudEvent4sendEv+0x3e>
    CoapMessagePtr msg;
 23fbee6:	a803      	add	r0, sp, #12
 23fbee8:	f7ff fe94 	bl	23fbc14 <_ZN8particle14CoapMessagePtrD1Ev>
}
 23fbeec:	4620      	mov	r0, r4
 23fbeee:	b025      	add	sp, #148	; 0x94
 23fbef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CHECK(coap_add_uint_option(msg.get(), COAP_OPTION_CONTENT_FORMAT, (unsigned)d_->contentType, nullptr /* reserved */));
 23fbef2:	2300      	movs	r3, #0
 23fbef4:	210c      	movs	r1, #12
 23fbef6:	9803      	ldr	r0, [sp, #12]
 23fbef8:	f003 f902 	bl	23ff100 <coap_add_uint_option>
 23fbefc:	1e04      	subs	r4, r0, #0
 23fbefe:	dac9      	bge.n	23fbe94 <_ZN8particle10CloudEvent4sendEv+0x44>
 23fbf00:	e7f1      	b.n	23fbee6 <_ZN8particle10CloudEvent4sendEv+0x96>
 23fbf02:	4634      	mov	r4, r6
 23fbf04:	e7ef      	b.n	23fbee6 <_ZN8particle10CloudEvent4sendEv+0x96>
        return Error::INTERNAL;
 23fbf06:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
 23fbf0a:	e7ef      	b.n	23fbeec <_ZN8particle10CloudEvent4sendEv+0x9c>
 23fbf0c:	023ff9c8 	.word	0x023ff9c8
 23fbf10:	023fbff5 	.word	0x023fbff5
 23fbf14:	023fbfd1 	.word	0x023fbfd1

023fbf18 <_ZN8particle15makeRefCountPtrINS_10CloudEvent4DataEJEEENS_11RefCountPtrIT_EEDpOT0_>:
        }
    }
};

template<typename T, typename... ArgsT>
inline RefCountPtr<T> makeRefCountPtr(ArgsT&&... args) {
 23fbf18:	b510      	push	{r4, lr}
    return RefCountPtr<T>::wrap(new(std::nothrow) T(std::forward<ArgsT>(args)...));
 23fbf1a:	490d      	ldr	r1, [pc, #52]	; (23fbf50 <_ZN8particle15makeRefCountPtrINS_10CloudEvent4DataEJEEENS_11RefCountPtrIT_EEDpOT0_+0x38>)
inline RefCountPtr<T> makeRefCountPtr(ArgsT&&... args) {
 23fbf1c:	4604      	mov	r4, r0
    return RefCountPtr<T>::wrap(new(std::nothrow) T(std::forward<ArgsT>(args)...));
 23fbf1e:	203c      	movs	r0, #60	; 0x3c
 23fbf20:	f003 f9a2 	bl	23ff268 <_ZnwjRKSt9nothrow_t>
 23fbf24:	b188      	cbz	r0, 23fbf4a <_ZN8particle15makeRefCountPtrINS_10CloudEvent4DataEJEEENS_11RefCountPtrIT_EEDpOT0_+0x32>
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fbf26:	2301      	movs	r3, #1
 23fbf28:	6043      	str	r3, [r0, #4]
            error(0) {
 23fbf2a:	4b0a      	ldr	r3, [pc, #40]	; (23fbf54 <_ZN8particle15makeRefCountPtrINS_10CloudEvent4DataEJEEENS_11RefCountPtrIT_EEDpOT0_+0x3c>)
 23fbf2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 23fbf30:	6003      	str	r3, [r0, #0]
            s_(nullptr) {
 23fbf32:	2300      	movs	r3, #0
            p_(nullptr) {
 23fbf34:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fbf38:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
 23fbf3c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    _Function_base() : _M_manager(nullptr) { }
 23fbf40:	6183      	str	r3, [r0, #24]
 23fbf42:	f880 3020 	strb.w	r3, [r0, #32]
 23fbf46:	6243      	str	r3, [r0, #36]	; 0x24
 23fbf48:	6383      	str	r3, [r0, #56]	; 0x38
            p_(p) {
 23fbf4a:	6020      	str	r0, [r4, #0]
}
 23fbf4c:	4620      	mov	r0, r4
 23fbf4e:	bd10      	pop	{r4, pc}
 23fbf50:	023ffe54 	.word	0x023ffe54
 23fbf54:	023ffafc 	.word	0x023ffafc

023fbf58 <_ZN8particle10CloudEventC1Ev>:
 23fbf58:	2200      	movs	r2, #0
 23fbf5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
CloudEvent::CloudEvent() :
 23fbf5e:	b510      	push	{r4, lr}
 23fbf60:	4604      	mov	r4, r0
 23fbf62:	e9c0 2301 	strd	r2, r3, [r0, #4]
        d_(makeRefCountPtr<Data>()) {
 23fbf66:	4b03      	ldr	r3, [pc, #12]	; (23fbf74 <_ZN8particle10CloudEventC1Ev+0x1c>)
 23fbf68:	f840 3b10 	str.w	r3, [r0], #16
 23fbf6c:	f7ff ffd4 	bl	23fbf18 <_ZN8particle15makeRefCountPtrINS_10CloudEvent4DataEJEEENS_11RefCountPtrIT_EEDpOT0_>
}
 23fbf70:	4620      	mov	r0, r4
 23fbf72:	bd10      	pop	{r4, pc}
 23fbf74:	023ffb0c 	.word	0x023ffb0c

023fbf78 <_ZN8particle11RefCountPtrINS_10CloudEvent4DataEED1Ev>:
    ~RefCountPtr() {
 23fbf78:	b510      	push	{r4, lr}
 23fbf7a:	4604      	mov	r4, r0
        if (p_) {
 23fbf7c:	6800      	ldr	r0, [r0, #0]
 23fbf7e:	b108      	cbz	r0, 23fbf84 <_ZN8particle11RefCountPtrINS_10CloudEvent4DataEED1Ev+0xc>
            p_->release();
 23fbf80:	f7ff fe33 	bl	23fbbea <_ZNK8particle8RefCount7releaseEv>
    }
 23fbf84:	4620      	mov	r0, r4
 23fbf86:	bd10      	pop	{r4, pc}

023fbf88 <_ZN8particle10CloudEventD1Ev>:
CloudEvent::~CloudEvent() {
 23fbf88:	b510      	push	{r4, lr}
 23fbf8a:	4604      	mov	r4, r0
 23fbf8c:	4b03      	ldr	r3, [pc, #12]	; (23fbf9c <_ZN8particle10CloudEventD1Ev+0x14>)
 23fbf8e:	f840 3b10 	str.w	r3, [r0], #16
 23fbf92:	f7ff fff1 	bl	23fbf78 <_ZN8particle11RefCountPtrINS_10CloudEvent4DataEED1Ev>
}
 23fbf96:	4620      	mov	r0, r4
 23fbf98:	bd10      	pop	{r4, pc}
 23fbf9a:	bf00      	nop
 23fbf9c:	023ffb0c 	.word	0x023ffb0c

023fbfa0 <_ZN8particle10CloudEventD0Ev>:
CloudEvent::~CloudEvent() {
 23fbfa0:	b510      	push	{r4, lr}
 23fbfa2:	4604      	mov	r4, r0
}
 23fbfa4:	f7ff fff0 	bl	23fbf88 <_ZN8particle10CloudEventD1Ev>
 23fbfa8:	4620      	mov	r0, r4
 23fbfaa:	2114      	movs	r1, #20
 23fbfac:	f7fd fe25 	bl	23f9bfa <_ZdlPvj>
 23fbfb0:	4620      	mov	r0, r4
 23fbfb2:	bd10      	pop	{r4, pc}

023fbfb4 <_ZN8particle10CloudEvent5clearEv>:
void CloudEvent::clear() {
 23fbfb4:	b513      	push	{r0, r1, r4, lr}
 23fbfb6:	4604      	mov	r4, r0
    d_ = makeRefCountPtr<Data>();
 23fbfb8:	a801      	add	r0, sp, #4
 23fbfba:	f7ff ffad 	bl	23fbf18 <_ZN8particle15makeRefCountPtrINS_10CloudEvent4DataEJEEENS_11RefCountPtrIT_EEDpOT0_>
 23fbfbe:	9a01      	ldr	r2, [sp, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fbfc0:	6923      	ldr	r3, [r4, #16]
 23fbfc2:	a801      	add	r0, sp, #4
      __a = _GLIBCXX_MOVE(__b);
 23fbfc4:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fbfc6:	9301      	str	r3, [sp, #4]
 23fbfc8:	f7ff ffd6 	bl	23fbf78 <_ZN8particle11RefCountPtrINS_10CloudEvent4DataEED1Ev>
}
 23fbfcc:	b002      	add	sp, #8
 23fbfce:	bd10      	pop	{r4, pc}

023fbfd0 <_ZN8particle10CloudEvent12sendCompleteEiiPv>:
    }
    return 0;
}

// Called in the system thread
void CloudEvent::sendComplete(int err, int /* reqId */, void* arg) {
 23fbfd0:	b507      	push	{r0, r1, r2, lr}
    auto d = RefCountPtr<Data>::wrap(static_cast<Data*>(arg));
    d->sendResult = err;
 23fbfd2:	6350      	str	r0, [r2, #52]	; 0x34
void CloudEvent::sendComplete(int err, int /* reqId */, void* arg) {
 23fbfd4:	4611      	mov	r1, r2
            p_(p) {
 23fbfd6:	9201      	str	r2, [sp, #4]
    // Run a callback in the application thread to update the status of the event
    int r = application_thread_invoke([](void* arg) {
 23fbfd8:	4805      	ldr	r0, [pc, #20]	; (23fbff0 <_ZN8particle10CloudEvent12sendCompleteEiiPv+0x20>)
 23fbfda:	2200      	movs	r2, #0
 23fbfdc:	f7fe fe9c 	bl	23fad18 <application_thread_invoke>
        } else {
            event.setStatus(Status::SENT);
        }
    }, d.get(), nullptr /* reserved */);
    // FIXME: application_thread_invoke() doesn't really handle errors as of now
    if (r == 0) {
 23fbfe0:	b900      	cbnz	r0, 23fbfe4 <_ZN8particle10CloudEvent12sendCompleteEiiPv+0x14>
        p_ = nullptr;
 23fbfe2:	9001      	str	r0, [sp, #4]
    auto d = RefCountPtr<Data>::wrap(static_cast<Data*>(arg));
 23fbfe4:	a801      	add	r0, sp, #4
 23fbfe6:	f7ff ffc7 	bl	23fbf78 <_ZN8particle11RefCountPtrINS_10CloudEvent4DataEED1Ev>
        // Keep the reference around until the application callback is called
        d.unwrap();
    }
}
 23fbfea:	b003      	add	sp, #12
 23fbfec:	f85d fb04 	ldr.w	pc, [sp], #4
 23fbff0:	023fc435 	.word	0x023fc435

023fbff4 <_ZZN8particle10CloudEvent4sendEvENUliPvE_4_FUNEiS1_>:
    CHECK(coap_end_request(msg.get(), nullptr /* resp_cb */,
 23fbff4:	b508      	push	{r3, lr}
 23fbff6:	460a      	mov	r2, r1
 23fbff8:	4601      	mov	r1, r0
 23fbffa:	2000      	movs	r0, #0
 23fbffc:	f7ff ffe8 	bl	23fbfd0 <_ZN8particle10CloudEvent12sendCompleteEiiPv>
 23fc000:	2000      	movs	r0, #0
 23fc002:	bd08      	pop	{r3, pc}

023fc004 <_ZNKSt8functionIFvN8particle10CloudEventEEEclES1_>:
      if (_M_empty())
 23fc004:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fc006:	b510      	push	{r4, lr}
      if (_M_empty())
 23fc008:	b90a      	cbnz	r2, 23fc00e <_ZNKSt8functionIFvN8particle10CloudEventEEEclES1_+0xa>
	__throw_bad_function_call();
 23fc00a:	f003 f931 	bl	23ff270 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc00e:	68c3      	ldr	r3, [r0, #12]
    }
 23fc010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fc014:	4718      	bx	r3

023fc016 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi>:
void CloudEvent::setStatus(Status status, int err) {
 23fc016:	b570      	push	{r4, r5, r6, lr}
        return p_;
 23fc018:	6903      	ldr	r3, [r0, #16]
 23fc01a:	4604      	mov	r4, r0
 23fc01c:	460d      	mov	r5, r1
 23fc01e:	b086      	sub	sp, #24
    if (!d_ || d_->status == status) {
 23fc020:	b34b      	cbz	r3, 23fc076 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi+0x60>
 23fc022:	f893 1020 	ldrb.w	r1, [r3, #32]
 23fc026:	42a9      	cmp	r1, r5
 23fc028:	d025      	beq.n	23fc076 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi+0x60>
    d_->error = err;
 23fc02a:	639a      	str	r2, [r3, #56]	; 0x38
        return p_;
 23fc02c:	6903      	ldr	r3, [r0, #16]
    d_->status = status;
 23fc02e:	f883 5020 	strb.w	r5, [r3, #32]
 23fc032:	6906      	ldr	r6, [r0, #16]
    if (d_->onStatusChange) {
 23fc034:	69b3      	ldr	r3, [r6, #24]
 23fc036:	b15b      	cbz	r3, 23fc050 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi+0x3a>
        d_->onStatusChange(*this);
 23fc038:	4601      	mov	r1, r0
 23fc03a:	a801      	add	r0, sp, #4
 23fc03c:	f7ff fe18 	bl	23fbc70 <_ZN8particle10CloudEventC1ERKS0_>
 23fc040:	f106 0010 	add.w	r0, r6, #16
 23fc044:	a901      	add	r1, sp, #4
 23fc046:	f7ff ffdd 	bl	23fc004 <_ZNKSt8functionIFvN8particle10CloudEventEEEclES1_>
 23fc04a:	a801      	add	r0, sp, #4
 23fc04c:	f7ff ff9c 	bl	23fbf88 <_ZN8particle10CloudEventD1Ev>
    if (status == Status::INVALID) {
 23fc050:	2d04      	cmp	r5, #4
 23fc052:	d110      	bne.n	23fc076 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi+0x60>
        p_ = payload;
 23fc054:	2500      	movs	r5, #0
 23fc056:	6926      	ldr	r6, [r4, #16]
        coap_destroy_payload(p_, nullptr);
 23fc058:	2100      	movs	r1, #0
 23fc05a:	68f0      	ldr	r0, [r6, #12]
 23fc05c:	f002 fffc 	bl	23ff058 <coap_destroy_payload>
        p_ = payload;
 23fc060:	60f5      	str	r5, [r6, #12]
 23fc062:	6924      	ldr	r4, [r4, #16]
	if (_M_manager)
 23fc064:	69a3      	ldr	r3, [r4, #24]
 23fc066:	b133      	cbz	r3, 23fc076 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi+0x60>
        d_->onStatusChange = nullptr;
 23fc068:	f104 0110 	add.w	r1, r4, #16
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 23fc06c:	2203      	movs	r2, #3
 23fc06e:	4608      	mov	r0, r1
 23fc070:	4798      	blx	r3
	    _M_invoker = nullptr;
 23fc072:	e9c4 5506 	strd	r5, r5, [r4, #24]
}
 23fc076:	b006      	add	sp, #24
 23fc078:	bd70      	pop	{r4, r5, r6, pc}

023fc07a <_ZN8particle10CloudEvent9setFailedEi>:
    int setFailed(int err) {
 23fc07a:	b510      	push	{r4, lr}
 23fc07c:	4604      	mov	r4, r0
 23fc07e:	460a      	mov	r2, r1
        setStatus(Status::FAILED, err);
 23fc080:	2103      	movs	r1, #3
 23fc082:	f7ff ffc8 	bl	23fc016 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi>
        return error();
 23fc086:	4620      	mov	r0, r4
    }
 23fc088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return error();
 23fc08c:	f7ff be76 	b.w	23fbd7c <_ZNK8particle10CloudEvent5errorEv>

023fc090 <_ZN8particle10CloudEvent10setInvalidEi>:
    int setInvalid(int err) {
 23fc090:	b510      	push	{r4, lr}
 23fc092:	4604      	mov	r4, r0
 23fc094:	460a      	mov	r2, r1
        setStatus(Status::INVALID, err);
 23fc096:	2104      	movs	r1, #4
 23fc098:	f7ff ffbd 	bl	23fc016 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi>
        return error();
 23fc09c:	4620      	mov	r0, r4
    }
 23fc09e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return error();
 23fc0a2:	f7ff be6b 	b.w	23fbd7c <_ZNK8particle10CloudEvent5errorEv>
	...

023fc0a8 <_ZN8particle10CloudEvent4nameEPKc>:
CloudEvent& CloudEvent::name(const char* name) {
 23fc0a8:	b530      	push	{r4, r5, lr}
 23fc0aa:	b08d      	sub	sp, #52	; 0x34
 23fc0ac:	4604      	mov	r4, r0
 23fc0ae:	460d      	mov	r5, r1
    if (!isWritable()) {
 23fc0b0:	f7ff fe09 	bl	23fbcc6 <_ZNK8particle10CloudEvent10isWritableEv>
 23fc0b4:	b1a8      	cbz	r0, 23fc0e2 <_ZN8particle10CloudEvent4nameEPKc+0x3a>
    size_t nameLen = std::strlen(name);
 23fc0b6:	4628      	mov	r0, r5
 23fc0b8:	f7fd fd76 	bl	23f9ba8 <strlen>
    if (!nameLen || nameLen > protocol::MAX_EVENT_NAME_LENGTH) {
 23fc0bc:	1e43      	subs	r3, r0, #1
 23fc0be:	2b3f      	cmp	r3, #63	; 0x3f
    size_t nameLen = std::strlen(name);
 23fc0c0:	4601      	mov	r1, r0
    if (!nameLen || nameLen > protocol::MAX_EVENT_NAME_LENGTH) {
 23fc0c2:	d911      	bls.n	23fc0e8 <_ZN8particle10CloudEvent4nameEPKc+0x40>
        LOG(ERROR, "Invalid event name length");
 23fc0c4:	2220      	movs	r2, #32
 23fc0c6:	2300      	movs	r3, #0
 23fc0c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 23fc0cc:	4a12      	ldr	r2, [pc, #72]	; (23fc118 <_ZN8particle10CloudEvent4nameEPKc+0x70>)
 23fc0ce:	2032      	movs	r0, #50	; 0x32
 23fc0d0:	4912      	ldr	r1, [pc, #72]	; (23fc11c <_ZN8particle10CloudEvent4nameEPKc+0x74>)
 23fc0d2:	9200      	str	r2, [sp, #0]
 23fc0d4:	aa04      	add	r2, sp, #16
 23fc0d6:	f7fe fdaf 	bl	23fac38 <log_message>
        setFailed(Error::INVALID_ARGUMENT);
 23fc0da:	4620      	mov	r0, r4
 23fc0dc:	4910      	ldr	r1, [pc, #64]	; (23fc120 <_ZN8particle10CloudEvent4nameEPKc+0x78>)
 23fc0de:	f7ff ffcc 	bl	23fc07a <_ZN8particle10CloudEvent9setFailedEi>
}
 23fc0e2:	4620      	mov	r0, r4
 23fc0e4:	b00d      	add	sp, #52	; 0x34
 23fc0e6:	bd30      	pop	{r4, r5, pc}
            s_(str ? strndup(str, n) : nullptr) {
 23fc0e8:	4628      	mov	r0, r5
 23fc0ea:	f003 f965 	bl	23ff3b8 <strndup>
 23fc0ee:	9003      	str	r0, [sp, #12]
    if (!nameCopy) {
 23fc0f0:	b938      	cbnz	r0, 23fc102 <_ZN8particle10CloudEvent4nameEPKc+0x5a>
        setInvalid(Error::NO_MEMORY);
 23fc0f2:	4620      	mov	r0, r4
 23fc0f4:	490b      	ldr	r1, [pc, #44]	; (23fc124 <_ZN8particle10CloudEvent4nameEPKc+0x7c>)
 23fc0f6:	f7ff ffcb 	bl	23fc090 <_ZN8particle10CloudEvent10setInvalidEi>
    CString nameCopy(name, nameLen);
 23fc0fa:	a803      	add	r0, sp, #12
 23fc0fc:	f7ff fd92 	bl	23fbc24 <_ZN8particle7CStringD1Ev>
 23fc100:	e7ef      	b.n	23fc0e2 <_ZN8particle10CloudEvent4nameEPKc+0x3a>
 23fc102:	2300      	movs	r3, #0
 23fc104:	9303      	str	r3, [sp, #12]
 23fc106:	6923      	ldr	r3, [r4, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fc108:	689a      	ldr	r2, [r3, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fc10a:	6098      	str	r0, [r3, #8]
    d_->name = std::move(nameCopy);
 23fc10c:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 23fc10e:	9204      	str	r2, [sp, #16]
 23fc110:	f7ff fd88 	bl	23fbc24 <_ZN8particle7CStringD1Ev>
    return *this;
 23fc114:	e7f1      	b.n	23fc0fa <_ZN8particle10CloudEvent4nameEPKc+0x52>
 23fc116:	bf00      	nop
 23fc118:	023ff9cd 	.word	0x023ff9cd
 23fc11c:	023ff948 	.word	0x023ff948
 23fc120:	fffffef2 	.word	0xfffffef2
 23fc124:	fffffefc 	.word	0xfffffefc

023fc128 <_ZN8particle10CloudEvent15getValidPayloadEv>:
coap_payload* CloudEvent::getValidPayload() {
 23fc128:	b570      	push	{r4, r5, r6, lr}
        return p_;
 23fc12a:	6904      	ldr	r4, [r0, #16]
 23fc12c:	4605      	mov	r5, r0
 23fc12e:	b08c      	sub	sp, #48	; 0x30
    if (!d_) {
 23fc130:	b314      	cbz	r4, 23fc178 <_ZN8particle10CloudEvent15getValidPayloadEv+0x50>
        return p_;
 23fc132:	68e4      	ldr	r4, [r4, #12]
    if (!d_->payload) {
 23fc134:	bb7c      	cbnz	r4, 23fc196 <_ZN8particle10CloudEvent15getValidPayloadEv+0x6e>
        coap_destroy_payload(p_, nullptr);
 23fc136:	4621      	mov	r1, r4
 23fc138:	4620      	mov	r0, r4
            p_(nullptr) {
 23fc13a:	9403      	str	r4, [sp, #12]
        coap_destroy_payload(p_, nullptr);
 23fc13c:	f002 ff8c 	bl	23ff058 <coap_destroy_payload>
        int r = coap_create_payload(&p, d_->maxHeapSize, nullptr /* reserved */);
 23fc140:	692b      	ldr	r3, [r5, #16]
 23fc142:	4622      	mov	r2, r4
 23fc144:	6a99      	ldr	r1, [r3, #40]	; 0x28
 23fc146:	a803      	add	r0, sp, #12
 23fc148:	f002 ff78 	bl	23ff03c <coap_create_payload>
        if (r < 0) {
 23fc14c:	1e06      	subs	r6, r0, #0
 23fc14e:	da16      	bge.n	23fc17e <_ZN8particle10CloudEvent15getValidPayloadEv+0x56>
            LOG(ERROR, "coap_create_payload() failed: %d", r);
 23fc150:	2320      	movs	r3, #32
 23fc152:	e9cd 3404 	strd	r3, r4, [sp, #16]
 23fc156:	4b11      	ldr	r3, [pc, #68]	; (23fc19c <_ZN8particle10CloudEvent15getValidPayloadEv+0x74>)
 23fc158:	2032      	movs	r0, #50	; 0x32
 23fc15a:	4911      	ldr	r1, [pc, #68]	; (23fc1a0 <_ZN8particle10CloudEvent15getValidPayloadEv+0x78>)
 23fc15c:	9300      	str	r3, [sp, #0]
 23fc15e:	aa04      	add	r2, sp, #16
 23fc160:	4623      	mov	r3, r4
 23fc162:	9601      	str	r6, [sp, #4]
 23fc164:	f7fe fd68 	bl	23fac38 <log_message>
            setInvalid(r);
 23fc168:	4631      	mov	r1, r6
 23fc16a:	4628      	mov	r0, r5
 23fc16c:	f7ff ff90 	bl	23fc090 <_ZN8particle10CloudEvent10setInvalidEi>
        coap_destroy_payload(p_, nullptr);
 23fc170:	4621      	mov	r1, r4
 23fc172:	9803      	ldr	r0, [sp, #12]
 23fc174:	f002 ff70 	bl	23ff058 <coap_destroy_payload>
}
 23fc178:	4620      	mov	r0, r4
 23fc17a:	b00c      	add	sp, #48	; 0x30
 23fc17c:	bd70      	pop	{r4, r5, r6, pc}
        return p_;
 23fc17e:	692e      	ldr	r6, [r5, #16]
        coap_destroy_payload(p_, nullptr);
 23fc180:	4621      	mov	r1, r4
 23fc182:	68f0      	ldr	r0, [r6, #12]
 23fc184:	f002 ff68 	bl	23ff058 <coap_destroy_payload>
        p_ = ptr.p_;
 23fc188:	9b03      	ldr	r3, [sp, #12]
        coap_destroy_payload(p_, nullptr);
 23fc18a:	4621      	mov	r1, r4
 23fc18c:	4620      	mov	r0, r4
        p_ = ptr.p_;
 23fc18e:	60f3      	str	r3, [r6, #12]
        ptr.p_ = nullptr;
 23fc190:	9403      	str	r4, [sp, #12]
        coap_destroy_payload(p_, nullptr);
 23fc192:	f002 ff61 	bl	23ff058 <coap_destroy_payload>
        return p_;
 23fc196:	692b      	ldr	r3, [r5, #16]
 23fc198:	68dc      	ldr	r4, [r3, #12]
    return d_->payload.get();
 23fc19a:	e7ed      	b.n	23fc178 <_ZN8particle10CloudEvent15getValidPayloadEv+0x50>
 23fc19c:	023ff9e7 	.word	0x023ff9e7
 23fc1a0:	023ff948 	.word	0x023ff948

023fc1a4 <_ZN8particle10CloudEvent4dataERKNS_7VariantE>:
CloudEvent& CloudEvent::data(const EventData& data) {
 23fc1a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc1a6:	b08b      	sub	sp, #44	; 0x2c
 23fc1a8:	4604      	mov	r4, r0
 23fc1aa:	460e      	mov	r6, r1
    if (!isWritable()) {
 23fc1ac:	f7ff fd8b 	bl	23fbcc6 <_ZNK8particle10CloudEvent10isWritableEv>
 23fc1b0:	b300      	cbz	r0, 23fc1f4 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x50>
    auto payload = getValidPayload();
 23fc1b2:	4620      	mov	r0, r4
 23fc1b4:	f7ff ffb8 	bl	23fc128 <_ZN8particle10CloudEvent15getValidPayloadEv>
    if (!payload) {
 23fc1b8:	4607      	mov	r7, r0
 23fc1ba:	b1d8      	cbz	r0, 23fc1f4 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x50>
    d_->pos = 0;
 23fc1bc:	2500      	movs	r5, #0
 23fc1be:	6923      	ldr	r3, [r4, #16]
    int r = encodeToCBOR(data, *this);
 23fc1c0:	4630      	mov	r0, r6
 23fc1c2:	4621      	mov	r1, r4
    d_->pos = 0;
 23fc1c4:	62dd      	str	r5, [r3, #44]	; 0x2c
    int r = encodeToCBOR(data, *this);
 23fc1c6:	f002 fd1f 	bl	23fec08 <_ZN8particle12encodeToCBORERKNS_7VariantER5Print>
    if (r < 0) {
 23fc1ca:	1e06      	subs	r6, r0, #0
 23fc1cc:	da23      	bge.n	23fc216 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x72>
        if (r == Error::COAP_TOO_LARGE_PAYLOAD) {
 23fc1ce:	4b1b      	ldr	r3, [pc, #108]	; (23fc23c <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x98>)
 23fc1d0:	429e      	cmp	r6, r3
 23fc1d2:	f04f 0320 	mov.w	r3, #32
            LOG(ERROR, "Event data is too large");
 23fc1d6:	e9cd 3502 	strd	r3, r5, [sp, #8]
        if (r == Error::COAP_TOO_LARGE_PAYLOAD) {
 23fc1da:	d10e      	bne.n	23fc1fa <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x56>
            LOG(ERROR, "Event data is too large");
 23fc1dc:	4b18      	ldr	r3, [pc, #96]	; (23fc240 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x9c>)
 23fc1de:	2032      	movs	r0, #50	; 0x32
 23fc1e0:	4918      	ldr	r1, [pc, #96]	; (23fc244 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0xa0>)
 23fc1e2:	9300      	str	r3, [sp, #0]
 23fc1e4:	aa02      	add	r2, sp, #8
 23fc1e6:	462b      	mov	r3, r5
 23fc1e8:	f7fe fd26 	bl	23fac38 <log_message>
            setFailed(r);
 23fc1ec:	4631      	mov	r1, r6
 23fc1ee:	4620      	mov	r0, r4
 23fc1f0:	f7ff ff43 	bl	23fc07a <_ZN8particle10CloudEvent9setFailedEi>
}
 23fc1f4:	4620      	mov	r0, r4
 23fc1f6:	b00b      	add	sp, #44	; 0x2c
 23fc1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            LOG(ERROR, "encodeToCBOR() failed: %d", r);
 23fc1fa:	4b13      	ldr	r3, [pc, #76]	; (23fc248 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0xa4>)
 23fc1fc:	9601      	str	r6, [sp, #4]
        LOG(ERROR, "coap_set_payload_size() failed: %d", r);
 23fc1fe:	9300      	str	r3, [sp, #0]
 23fc200:	2032      	movs	r0, #50	; 0x32
 23fc202:	462b      	mov	r3, r5
 23fc204:	490f      	ldr	r1, [pc, #60]	; (23fc244 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0xa0>)
 23fc206:	aa02      	add	r2, sp, #8
 23fc208:	f7fe fd16 	bl	23fac38 <log_message>
        setInvalid(r);
 23fc20c:	4631      	mov	r1, r6
 23fc20e:	4620      	mov	r0, r4
 23fc210:	f7ff ff3e 	bl	23fc090 <_ZN8particle10CloudEvent10setInvalidEi>
        return *this;
 23fc214:	e7ee      	b.n	23fc1f4 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x50>
    r = coap_set_payload_size(payload, d_->pos, nullptr /* reserved */);
 23fc216:	6923      	ldr	r3, [r4, #16]
 23fc218:	462a      	mov	r2, r5
 23fc21a:	4638      	mov	r0, r7
 23fc21c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 23fc21e:	f002 ff45 	bl	23ff0ac <coap_set_payload_size>
    if (r < 0) {
 23fc222:	1e06      	subs	r6, r0, #0
 23fc224:	da05      	bge.n	23fc232 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x8e>
        LOG(ERROR, "coap_set_payload_size() failed: %d", r);
 23fc226:	2320      	movs	r3, #32
 23fc228:	9601      	str	r6, [sp, #4]
 23fc22a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23fc22e:	4b07      	ldr	r3, [pc, #28]	; (23fc24c <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0xa8>)
 23fc230:	e7e5      	b.n	23fc1fe <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x5a>
    d_->contentType = ContentType::STRUCTURED;
 23fc232:	f64f 52e9 	movw	r2, #65001	; 0xfde9
 23fc236:	6923      	ldr	r3, [r4, #16]
 23fc238:	625a      	str	r2, [r3, #36]	; 0x24
    return *this;
 23fc23a:	e7db      	b.n	23fc1f4 <_ZN8particle10CloudEvent4dataERKNS_7VariantE+0x50>
 23fc23c:	fffffc12 	.word	0xfffffc12
 23fc240:	023ffa08 	.word	0x023ffa08
 23fc244:	023ff948 	.word	0x023ff948
 23fc248:	023ffa63 	.word	0x023ffa63
 23fc24c:	023ffa40 	.word	0x023ffa40

023fc250 <_ZN8particle10CloudEvent5writeEPKcj>:
int CloudEvent::write(const char* data, size_t size) {
 23fc250:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc252:	b08b      	sub	sp, #44	; 0x2c
 23fc254:	4606      	mov	r6, r0
 23fc256:	460c      	mov	r4, r1
 23fc258:	4615      	mov	r5, r2
    if (!isWritable()) {
 23fc25a:	f7ff fd34 	bl	23fbcc6 <_ZNK8particle10CloudEvent10isWritableEv>
 23fc25e:	b980      	cbnz	r0, 23fc282 <_ZN8particle10CloudEvent5writeEPKcj+0x32>
        int err = error();
 23fc260:	4630      	mov	r0, r6
 23fc262:	f7ff fd8b 	bl	23fbd7c <_ZNK8particle10CloudEvent5errorEv>
        if (err < 0) {
 23fc266:	1e04      	subs	r4, r0, #0
 23fc268:	db08      	blt.n	23fc27c <_ZN8particle10CloudEvent5writeEPKcj+0x2c>
        if (status() == Status::SENDING) {
 23fc26a:	4630      	mov	r0, r6
 23fc26c:	f7ff fd24 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
        return Error::INVALID_STATE;
 23fc270:	2801      	cmp	r0, #1
 23fc272:	bf0c      	ite	eq
 23fc274:	f06f 046d 	mvneq.w	r4, #109	; 0x6d
 23fc278:	f06f 04d1 	mvnne.w	r4, #209	; 0xd1
}
 23fc27c:	4620      	mov	r0, r4
 23fc27e:	b00b      	add	sp, #44	; 0x2c
 23fc280:	bdf0      	pop	{r4, r5, r6, r7, pc}
    auto payload = getValidPayload();
 23fc282:	4630      	mov	r0, r6
 23fc284:	f7ff ff50 	bl	23fc128 <_ZN8particle10CloudEvent15getValidPayloadEv>
    if (!payload) {
 23fc288:	b928      	cbnz	r0, 23fc296 <_ZN8particle10CloudEvent5writeEPKcj+0x46>
        return error();
 23fc28a:	4630      	mov	r0, r6
}
 23fc28c:	b00b      	add	sp, #44	; 0x2c
 23fc28e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return error();
 23fc292:	f7ff bd73 	b.w	23fbd7c <_ZNK8particle10CloudEvent5errorEv>
    int r = coap_write_payload(payload, data, size, d_->pos, nullptr /* reserved */);
 23fc296:	2700      	movs	r7, #0
 23fc298:	6933      	ldr	r3, [r6, #16]
 23fc29a:	9700      	str	r7, [sp, #0]
 23fc29c:	4621      	mov	r1, r4
 23fc29e:	462a      	mov	r2, r5
 23fc2a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fc2a2:	f002 fee7 	bl	23ff074 <coap_write_payload>
    if (r < 0) {
 23fc2a6:	1e04      	subs	r4, r0, #0
 23fc2a8:	da22      	bge.n	23fc2f0 <_ZN8particle10CloudEvent5writeEPKcj+0xa0>
        if (r == Error::COAP_TOO_LARGE_PAYLOAD) {
 23fc2aa:	4b14      	ldr	r3, [pc, #80]	; (23fc2fc <_ZN8particle10CloudEvent5writeEPKcj+0xac>)
 23fc2ac:	429c      	cmp	r4, r3
 23fc2ae:	f04f 0320 	mov.w	r3, #32
            LOG(ERROR, "Event data is too large");
 23fc2b2:	e9cd 3702 	strd	r3, r7, [sp, #8]
        if (r == Error::COAP_TOO_LARGE_PAYLOAD) {
 23fc2b6:	d10d      	bne.n	23fc2d4 <_ZN8particle10CloudEvent5writeEPKcj+0x84>
            LOG(ERROR, "Event data is too large");
 23fc2b8:	4b11      	ldr	r3, [pc, #68]	; (23fc300 <_ZN8particle10CloudEvent5writeEPKcj+0xb0>)
 23fc2ba:	2032      	movs	r0, #50	; 0x32
 23fc2bc:	4911      	ldr	r1, [pc, #68]	; (23fc304 <_ZN8particle10CloudEvent5writeEPKcj+0xb4>)
 23fc2be:	9300      	str	r3, [sp, #0]
 23fc2c0:	aa02      	add	r2, sp, #8
 23fc2c2:	463b      	mov	r3, r7
 23fc2c4:	f7fe fcb8 	bl	23fac38 <log_message>
            return setFailed(r);
 23fc2c8:	4621      	mov	r1, r4
 23fc2ca:	4630      	mov	r0, r6
 23fc2cc:	f7ff fed5 	bl	23fc07a <_ZN8particle10CloudEvent9setFailedEi>
        return setInvalid(r);
 23fc2d0:	4604      	mov	r4, r0
 23fc2d2:	e7d3      	b.n	23fc27c <_ZN8particle10CloudEvent5writeEPKcj+0x2c>
        LOG(ERROR, "coap_write_payload() failed: %d", r);
 23fc2d4:	4b0c      	ldr	r3, [pc, #48]	; (23fc308 <_ZN8particle10CloudEvent5writeEPKcj+0xb8>)
 23fc2d6:	2032      	movs	r0, #50	; 0x32
 23fc2d8:	9300      	str	r3, [sp, #0]
 23fc2da:	490a      	ldr	r1, [pc, #40]	; (23fc304 <_ZN8particle10CloudEvent5writeEPKcj+0xb4>)
 23fc2dc:	463b      	mov	r3, r7
 23fc2de:	9401      	str	r4, [sp, #4]
 23fc2e0:	aa02      	add	r2, sp, #8
 23fc2e2:	f7fe fca9 	bl	23fac38 <log_message>
        return setInvalid(r);
 23fc2e6:	4621      	mov	r1, r4
 23fc2e8:	4630      	mov	r0, r6
 23fc2ea:	f7ff fed1 	bl	23fc090 <_ZN8particle10CloudEvent10setInvalidEi>
 23fc2ee:	e7ef      	b.n	23fc2d0 <_ZN8particle10CloudEvent5writeEPKcj+0x80>
 23fc2f0:	6932      	ldr	r2, [r6, #16]
    d_->pos += r;
 23fc2f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 23fc2f4:	4423      	add	r3, r4
 23fc2f6:	62d3      	str	r3, [r2, #44]	; 0x2c
    return r;
 23fc2f8:	e7c0      	b.n	23fc27c <_ZN8particle10CloudEvent5writeEPKcj+0x2c>
 23fc2fa:	bf00      	nop
 23fc2fc:	fffffc12 	.word	0xfffffc12
 23fc300:	023ffa08 	.word	0x023ffa08
 23fc304:	023ff948 	.word	0x023ff948
 23fc308:	023ffa20 	.word	0x023ffa20

023fc30c <_ZN8particle10CloudEvent5writeEPKhj>:
    size_t write(const uint8_t* data, size_t size) override {
 23fc30c:	b508      	push	{r3, lr}
        int r = write((const char*)data, size);
 23fc30e:	f7ff ff9f 	bl	23fc250 <_ZN8particle10CloudEvent5writeEPKcj>
    }
 23fc312:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc316:	bd08      	pop	{r3, pc}

023fc318 <_ZN8particle10CloudEvent7publishEv>:
int CloudEvent::publish() {
 23fc318:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc31a:	b08b      	sub	sp, #44	; 0x2c
 23fc31c:	4604      	mov	r4, r0
    auto status = this->status();
 23fc31e:	f7ff fccb 	bl	23fbcb8 <_ZNK8particle10CloudEvent6statusEv>
    if (status == Status::INVALID) {
 23fc322:	2804      	cmp	r0, #4
 23fc324:	d105      	bne.n	23fc332 <_ZN8particle10CloudEvent7publishEv+0x1a>
        return error();
 23fc326:	4620      	mov	r0, r4
}
 23fc328:	b00b      	add	sp, #44	; 0x2c
 23fc32a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        return error();
 23fc32e:	f7ff bd25 	b.w	23fbd7c <_ZNK8particle10CloudEvent5errorEv>
    if (status == Status::SENDING) {
 23fc332:	2801      	cmp	r0, #1
 23fc334:	d10f      	bne.n	23fc356 <_ZN8particle10CloudEvent7publishEv+0x3e>
        LOG(ERROR, "Event is being sent already");
 23fc336:	2120      	movs	r1, #32
 23fc338:	2300      	movs	r3, #0
 23fc33a:	4a38      	ldr	r2, [pc, #224]	; (23fc41c <_ZN8particle10CloudEvent7publishEv+0x104>)
 23fc33c:	e9cd 1302 	strd	r1, r3, [sp, #8]
 23fc340:	9200      	str	r2, [sp, #0]
 23fc342:	2032      	movs	r0, #50	; 0x32
 23fc344:	4936      	ldr	r1, [pc, #216]	; (23fc420 <_ZN8particle10CloudEvent7publishEv+0x108>)
 23fc346:	aa02      	add	r2, sp, #8
 23fc348:	f7fe fc76 	bl	23fac38 <log_message>
        return Error::BUSY;
 23fc34c:	f06f 046d 	mvn.w	r4, #109	; 0x6d
}
 23fc350:	4620      	mov	r0, r4
 23fc352:	b00b      	add	sp, #44	; 0x2c
 23fc354:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return s_;
 23fc356:	6923      	ldr	r3, [r4, #16]
    if (!d_->name) {
 23fc358:	689b      	ldr	r3, [r3, #8]
 23fc35a:	b97b      	cbnz	r3, 23fc37c <_ZN8particle10CloudEvent7publishEv+0x64>
        LOG(ERROR, "Event name is missing");
 23fc35c:	2220      	movs	r2, #32
 23fc35e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23fc362:	4a30      	ldr	r2, [pc, #192]	; (23fc424 <_ZN8particle10CloudEvent7publishEv+0x10c>)
 23fc364:	492e      	ldr	r1, [pc, #184]	; (23fc420 <_ZN8particle10CloudEvent7publishEv+0x108>)
 23fc366:	9200      	str	r2, [sp, #0]
 23fc368:	2032      	movs	r0, #50	; 0x32
 23fc36a:	aa02      	add	r2, sp, #8
 23fc36c:	f7fe fc64 	bl	23fac38 <log_message>
        return setFailed(Error::INVALID_ARGUMENT);
 23fc370:	492d      	ldr	r1, [pc, #180]	; (23fc428 <_ZN8particle10CloudEvent7publishEv+0x110>)
        return setFailed(Error::LIMIT_EXCEEDED);
 23fc372:	4620      	mov	r0, r4
 23fc374:	f7ff fe81 	bl	23fc07a <_ZN8particle10CloudEvent9setFailedEi>
 23fc378:	4604      	mov	r4, r0
 23fc37a:	e7e9      	b.n	23fc350 <_ZN8particle10CloudEvent7publishEv+0x38>
    size_t size = this->size();
 23fc37c:	4620      	mov	r0, r4
 23fc37e:	f7ff fcb5 	bl	23fbcec <_ZNK8particle10CloudEvent4sizeEv>
 23fc382:	4606      	mov	r6, r0
    if (!RateLimiter::instance().take(size)) {
 23fc384:	f7ff fbd8 	bl	23fbb38 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv>
 23fc388:	4605      	mov	r5, r0
        std::lock_guard lock(EventLock::instance());
 23fc38a:	f7ff fbf3 	bl	23fbb74 <_ZN8particle12_GLOBAL__N_19EventLock8instanceEv>
 23fc38e:	4607      	mov	r7, r0
      { _M_device.lock(); }
 23fc390:	6800      	ldr	r0, [r0, #0]
 23fc392:	f7ff fc0d 	bl	23fbbb0 <_ZN8particle12_GLOBAL__N_19EventLock4lockEv.isra.0>
        size = sizeInFullBlocks(size);
 23fc396:	4630      	mov	r0, r6
 23fc398:	f7ff fbc1 	bl	23fbb1e <_ZN8particle12_GLOBAL__N_111RateLimiter16sizeInFullBlocksEj>
        if (dataInFlight_ + size > MAX_EVENT_DATA_IN_FLIGHT) {
 23fc39c:	682b      	ldr	r3, [r5, #0]
 23fc39e:	4418      	add	r0, r3
 23fc3a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        dataInFlight_ += size;
 23fc3a4:	bf98      	it	ls
 23fc3a6:	6028      	strls	r0, [r5, #0]
        return true;
 23fc3a8:	6838      	ldr	r0, [r7, #0]
 23fc3aa:	bf94      	ite	ls
 23fc3ac:	2501      	movls	r5, #1
            return false;
 23fc3ae:	2500      	movhi	r5, #0
        if (mutex_) {
 23fc3b0:	b108      	cbz	r0, 23fc3b6 <_ZN8particle10CloudEvent7publishEv+0x9e>
            os_mutex_recursive_unlock(mutex_);
 23fc3b2:	f7fe fa9d 	bl	23fa8f0 <os_mutex_recursive_unlock>
    if (!RateLimiter::instance().take(size)) {
 23fc3b6:	b96d      	cbnz	r5, 23fc3d4 <_ZN8particle10CloudEvent7publishEv+0xbc>
        LOG(ERROR, "Limit for event data in flight is reached");
 23fc3b8:	2320      	movs	r3, #32
 23fc3ba:	e9cd 3502 	strd	r3, r5, [sp, #8]
 23fc3be:	4b1b      	ldr	r3, [pc, #108]	; (23fc42c <_ZN8particle10CloudEvent7publishEv+0x114>)
 23fc3c0:	4917      	ldr	r1, [pc, #92]	; (23fc420 <_ZN8particle10CloudEvent7publishEv+0x108>)
 23fc3c2:	9300      	str	r3, [sp, #0]
 23fc3c4:	2032      	movs	r0, #50	; 0x32
 23fc3c6:	462b      	mov	r3, r5
 23fc3c8:	aa02      	add	r2, sp, #8
 23fc3ca:	f7fe fc35 	bl	23fac38 <log_message>
        return setFailed(Error::LIMIT_EXCEEDED);
 23fc3ce:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 23fc3d2:	e7ce      	b.n	23fc372 <_ZN8particle10CloudEvent7publishEv+0x5a>
    int r = send();
 23fc3d4:	4620      	mov	r0, r4
 23fc3d6:	f7ff fd3b 	bl	23fbe50 <_ZN8particle10CloudEvent4sendEv>
    if (r < 0) {
 23fc3da:	1e05      	subs	r5, r0, #0
 23fc3dc:	da16      	bge.n	23fc40c <_ZN8particle10CloudEvent7publishEv+0xf4>
        LOG(ERROR, "Failed to send event: %d", r);
 23fc3de:	2300      	movs	r3, #0
 23fc3e0:	2220      	movs	r2, #32
 23fc3e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 23fc3e6:	4a12      	ldr	r2, [pc, #72]	; (23fc430 <_ZN8particle10CloudEvent7publishEv+0x118>)
 23fc3e8:	2032      	movs	r0, #50	; 0x32
 23fc3ea:	9200      	str	r2, [sp, #0]
 23fc3ec:	490c      	ldr	r1, [pc, #48]	; (23fc420 <_ZN8particle10CloudEvent7publishEv+0x108>)
 23fc3ee:	aa02      	add	r2, sp, #8
 23fc3f0:	9501      	str	r5, [sp, #4]
 23fc3f2:	f7fe fc21 	bl	23fac38 <log_message>
        return setFailed(r);
 23fc3f6:	4629      	mov	r1, r5
 23fc3f8:	4620      	mov	r0, r4
 23fc3fa:	f7ff fe3e 	bl	23fc07a <_ZN8particle10CloudEvent9setFailedEi>
 23fc3fe:	4604      	mov	r4, r0
    NAMED_SCOPE_GUARD(rateLimiterGuard, {
 23fc400:	f7ff fb9a 	bl	23fbb38 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv>
 23fc404:	4631      	mov	r1, r6
 23fc406:	f7ff fbd7 	bl	23fbbb8 <_ZN8particle12_GLOBAL__N_111RateLimiter4giveEj>
 23fc40a:	e7a1      	b.n	23fc350 <_ZN8particle10CloudEvent7publishEv+0x38>
    setStatus(Status::SENDING);
 23fc40c:	4620      	mov	r0, r4
 23fc40e:	2200      	movs	r2, #0
 23fc410:	2101      	movs	r1, #1
 23fc412:	f7ff fe00 	bl	23fc016 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi>
    return 0;
 23fc416:	2400      	movs	r4, #0

    ~NamedScopeGuard() {
        if (!dismissed_) {
            func_();
        }
    }
 23fc418:	e79a      	b.n	23fc350 <_ZN8particle10CloudEvent7publishEv+0x38>
 23fc41a:	bf00      	nop
 23fc41c:	023ffa7d 	.word	0x023ffa7d
 23fc420:	023ff948 	.word	0x023ff948
 23fc424:	023ffa99 	.word	0x023ffa99
 23fc428:	fffffef2 	.word	0xfffffef2
 23fc42c:	023ffaaf 	.word	0x023ffaaf
 23fc430:	023ffad9 	.word	0x023ffad9

023fc434 <_ZZN8particle10CloudEvent12sendCompleteEiiPvENUlS1_E_4_FUNES1_>:
    int r = application_thread_invoke([](void* arg) {
 23fc434:	b530      	push	{r4, r5, lr}
 23fc436:	b091      	sub	sp, #68	; 0x44
        CloudEvent event(RefCountPtr<Data>::wrap(static_cast<Data*>(arg)));
 23fc438:	a908      	add	r1, sp, #32
            p_(p) {
 23fc43a:	9008      	str	r0, [sp, #32]
 23fc43c:	a803      	add	r0, sp, #12
 23fc43e:	f7ff fc2d 	bl	23fbc9c <_ZN8particle10CloudEventC1ENS_11RefCountPtrINS0_4DataEEE>
 23fc442:	4608      	mov	r0, r1
 23fc444:	f7ff fd98 	bl	23fbf78 <_ZN8particle11RefCountPtrINS_10CloudEvent4DataEED1Ev>
        return p_;
 23fc448:	9b07      	ldr	r3, [sp, #28]
        if (event.d_->status != Status::SENDING) {
 23fc44a:	f893 2020 	ldrb.w	r2, [r3, #32]
 23fc44e:	2a01      	cmp	r2, #1
 23fc450:	d004      	beq.n	23fc45c <_ZZN8particle10CloudEvent12sendCompleteEiiPvENUlS1_E_4_FUNES1_+0x28>
            return; // The event was cancelled
 23fc452:	a803      	add	r0, sp, #12
 23fc454:	f7ff fd98 	bl	23fbf88 <_ZN8particle10CloudEventD1Ev>
    }, d.get(), nullptr /* reserved */);
 23fc458:	b011      	add	sp, #68	; 0x44
 23fc45a:	bd30      	pop	{r4, r5, pc}
        event.d_->requestId = COAP_INVALID_REQUEST_ID;
 23fc45c:	2400      	movs	r4, #0
 23fc45e:	631c      	str	r4, [r3, #48]	; 0x30
        RateLimiter::instance().give(event.size());
 23fc460:	f7ff fb6a 	bl	23fbb38 <_ZN8particle12_GLOBAL__N_111RateLimiter8instanceEv>
 23fc464:	4605      	mov	r5, r0
 23fc466:	a803      	add	r0, sp, #12
 23fc468:	f7ff fc40 	bl	23fbcec <_ZNK8particle10CloudEvent4sizeEv>
 23fc46c:	4601      	mov	r1, r0
 23fc46e:	4628      	mov	r0, r5
 23fc470:	f7ff fba2 	bl	23fbbb8 <_ZN8particle12_GLOBAL__N_111RateLimiter4giveEj>
        if (event.d_->sendResult < 0) {
 23fc474:	9b07      	ldr	r3, [sp, #28]
 23fc476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fc478:	42a3      	cmp	r3, r4
 23fc47a:	da11      	bge.n	23fc4a0 <_ZZN8particle10CloudEvent12sendCompleteEiiPvENUlS1_E_4_FUNES1_+0x6c>
            LOG(ERROR, "Failed to send event: %d", event.d_->sendResult);
 23fc47c:	2220      	movs	r2, #32
 23fc47e:	9301      	str	r3, [sp, #4]
 23fc480:	4b0a      	ldr	r3, [pc, #40]	; (23fc4ac <_ZZN8particle10CloudEvent12sendCompleteEiiPvENUlS1_E_4_FUNES1_+0x78>)
 23fc482:	e9cd 2408 	strd	r2, r4, [sp, #32]
 23fc486:	9300      	str	r3, [sp, #0]
 23fc488:	2032      	movs	r0, #50	; 0x32
 23fc48a:	4623      	mov	r3, r4
 23fc48c:	4908      	ldr	r1, [pc, #32]	; (23fc4b0 <_ZZN8particle10CloudEvent12sendCompleteEiiPvENUlS1_E_4_FUNES1_+0x7c>)
 23fc48e:	446a      	add	r2, sp
 23fc490:	f7fe fbd2 	bl	23fac38 <log_message>
            event.setFailed(event.d_->sendResult);
 23fc494:	9b07      	ldr	r3, [sp, #28]
 23fc496:	a803      	add	r0, sp, #12
 23fc498:	6b59      	ldr	r1, [r3, #52]	; 0x34
 23fc49a:	f7ff fdee 	bl	23fc07a <_ZN8particle10CloudEvent9setFailedEi>
 23fc49e:	e7d8      	b.n	23fc452 <_ZZN8particle10CloudEvent12sendCompleteEiiPvENUlS1_E_4_FUNES1_+0x1e>
            event.setStatus(Status::SENT);
 23fc4a0:	4622      	mov	r2, r4
 23fc4a2:	2102      	movs	r1, #2
 23fc4a4:	a803      	add	r0, sp, #12
 23fc4a6:	f7ff fdb6 	bl	23fc016 <_ZN8particle10CloudEvent9setStatusENS0_6StatusEi>
 23fc4aa:	e7d2      	b.n	23fc452 <_ZZN8particle10CloudEvent12sendCompleteEiiPvENUlS1_E_4_FUNES1_+0x1e>
 23fc4ac:	023ffad9 	.word	0x023ffad9
 23fc4b0:	023ff948 	.word	0x023ff948

023fc4b4 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE>:
        capacity_(0) {
 23fc4b4:	2200      	movs	r2, #0
 23fc4b6:	4b02      	ldr	r3, [pc, #8]	; (23fc4c0 <_GLOBAL__sub_I__ZN8particle10CloudEvent15s_subscriptionsE+0xc>)
 23fc4b8:	e9c3 2200 	strd	r2, r2, [r3]
 23fc4bc:	609a      	str	r2, [r3, #8]

} // namespace particle
 23fc4be:	4770      	bx	lr
 23fc4c0:	1007aefc 	.word	0x1007aefc

023fc4c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc4c4:	2200      	movs	r2, #0
 23fc4c6:	6840      	ldr	r0, [r0, #4]
 23fc4c8:	4611      	mov	r1, r2
 23fc4ca:	f7fe bd3d 	b.w	23faf48 <network_listening>

023fc4ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc4ce:	2200      	movs	r2, #0
 23fc4d0:	6840      	ldr	r0, [r0, #4]
 23fc4d2:	4611      	mov	r1, r2
 23fc4d4:	f7fe bd54 	b.w	23faf80 <network_get_listen_timeout>

023fc4d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc4d8:	2200      	movs	r2, #0
 23fc4da:	6840      	ldr	r0, [r0, #4]
 23fc4dc:	f7fe bd42 	b.w	23faf64 <network_set_listen_timeout>

023fc4e0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc4e0:	2200      	movs	r2, #0
 23fc4e2:	6840      	ldr	r0, [r0, #4]
 23fc4e4:	f081 0101 	eor.w	r1, r1, #1
 23fc4e8:	f7fe bd20 	b.w	23faf2c <network_listen>

023fc4ec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc4ec:	2300      	movs	r3, #0
 23fc4ee:	6840      	ldr	r0, [r0, #4]
 23fc4f0:	461a      	mov	r2, r3
 23fc4f2:	4619      	mov	r1, r3
 23fc4f4:	f7fe bd0c 	b.w	23faf10 <network_off>

023fc4f8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc4f8:	2300      	movs	r3, #0
 23fc4fa:	6840      	ldr	r0, [r0, #4]
 23fc4fc:	461a      	mov	r2, r3
 23fc4fe:	4619      	mov	r1, r3
 23fc500:	f7fe bcf8 	b.w	23faef4 <network_on>

023fc504 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fc504:	2200      	movs	r2, #0
 23fc506:	6840      	ldr	r0, [r0, #4]
 23fc508:	4611      	mov	r1, r2
 23fc50a:	f7fe bce5 	b.w	23faed8 <network_ready>

023fc50e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc50e:	2200      	movs	r2, #0
 23fc510:	6840      	ldr	r0, [r0, #4]
 23fc512:	4611      	mov	r1, r2
 23fc514:	f7fe bcc4 	b.w	23faea0 <network_connecting>

023fc518 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc518:	2200      	movs	r2, #0
 23fc51a:	2102      	movs	r1, #2
 23fc51c:	6840      	ldr	r0, [r0, #4]
 23fc51e:	f7fe bccd 	b.w	23faebc <network_disconnect>

023fc522 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc522:	2300      	movs	r3, #0
 23fc524:	6840      	ldr	r0, [r0, #4]
 23fc526:	461a      	mov	r2, r3
 23fc528:	f7fe bcac 	b.w	23fae84 <network_connect>

023fc52c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
 23fc52c:	2203      	movs	r2, #3
 23fc52e:	4b02      	ldr	r3, [pc, #8]	; (23fc538 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fc530:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fc532:	4a02      	ldr	r2, [pc, #8]	; (23fc53c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fc534:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fc536:	4770      	bx	lr
 23fc538:	1007af10 	.word	0x1007af10
 23fc53c:	023ffb38 	.word	0x023ffb38

023fc540 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t>:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS},
        buffer_(nullptr) {
 23fc540:	21ff      	movs	r1, #255	; 0xff
 23fc542:	2200      	movs	r2, #0
      : address_{address},
 23fc544:	4b04      	ldr	r3, [pc, #16]	; (23fc558 <_GLOBAL__sub_I__ZN7TwoWireC2E19hal_i2c_interface_tRK16hal_i2c_config_t+0x18>)
        buffer_(nullptr) {
 23fc546:	2001      	movs	r0, #1
 23fc548:	e9c3 1200 	strd	r1, r2, [r3]
 23fc54c:	2164      	movs	r1, #100	; 0x64
 23fc54e:	611a      	str	r2, [r3, #16]
 23fc550:	e9c3 0102 	strd	r0, r1, [r3, #8]

namespace particle {
namespace detail {
const WireTransmission WIRE_INVALID_TRANSMISSION(0xff);
} // detail
} // particle
 23fc554:	4770      	bx	lr
 23fc556:	bf00      	nop
 23fc558:	1007af18 	.word	0x1007af18

023fc55c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fc55c:	4770      	bx	lr

023fc55e <_ZN9IPAddressD0Ev>:
 23fc55e:	b510      	push	{r4, lr}
 23fc560:	4604      	mov	r4, r0
 23fc562:	2118      	movs	r1, #24
 23fc564:	f7fd fb49 	bl	23f9bfa <_ZdlPvj>
 23fc568:	4620      	mov	r0, r4
 23fc56a:	bd10      	pop	{r4, pc}

023fc56c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fc56c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fc56e:	7d03      	ldrb	r3, [r0, #20]
{
 23fc570:	460e      	mov	r6, r1
	if (address.v==6) {
 23fc572:	2b06      	cmp	r3, #6
 23fc574:	f04f 0400 	mov.w	r4, #0
{
 23fc578:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc57a:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fc57e:	d012      	beq.n	23fc5a6 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fc580:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fc584:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fc588:	220a      	movs	r2, #10
 23fc58a:	4630      	mov	r0, r6
 23fc58c:	f001 fde4 	bl	23fe158 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fc590:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fc592:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fc594:	d019      	beq.n	23fc5ca <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fc596:	2c00      	cmp	r4, #0
 23fc598:	d0f4      	beq.n	23fc584 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fc59a:	212e      	movs	r1, #46	; 0x2e
 23fc59c:	4630      	mov	r0, r6
 23fc59e:	f001 fdd8 	bl	23fe152 <_ZN5Print5printEc>
 23fc5a2:	4404      	add	r4, r0
 23fc5a4:	e7ee      	b.n	23fc584 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc5a6:	232f      	movs	r3, #47	; 0x2f
 23fc5a8:	466a      	mov	r2, sp
 23fc5aa:	4639      	mov	r1, r7
 23fc5ac:	200a      	movs	r0, #10
		buf[0] = 0;
 23fc5ae:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fc5b2:	f7fe fa0d 	bl	23fa9d0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fc5b6:	4668      	mov	r0, sp
 23fc5b8:	f7fd faf6 	bl	23f9ba8 <strlen>
 23fc5bc:	6833      	ldr	r3, [r6, #0]
 23fc5be:	4602      	mov	r2, r0
 23fc5c0:	4669      	mov	r1, sp
 23fc5c2:	4630      	mov	r0, r6
 23fc5c4:	68db      	ldr	r3, [r3, #12]
 23fc5c6:	4798      	blx	r3
 23fc5c8:	4604      	mov	r4, r0
    }
    return n;
}
 23fc5ca:	4620      	mov	r0, r4
 23fc5cc:	b00d      	add	sp, #52	; 0x34
 23fc5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fc5d0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fc5d0:	b510      	push	{r4, lr}
 23fc5d2:	4604      	mov	r4, r0
 23fc5d4:	4b04      	ldr	r3, [pc, #16]	; (23fc5e8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fc5d6:	2211      	movs	r2, #17
 23fc5d8:	2100      	movs	r1, #0
 23fc5da:	f840 3b04 	str.w	r3, [r0], #4
 23fc5de:	f002 fe80 	bl	23ff2e2 <memset>
}
 23fc5e2:	4620      	mov	r0, r4
 23fc5e4:	bd10      	pop	{r4, pc}
 23fc5e6:	bf00      	nop
 23fc5e8:	023ffb7c 	.word	0x023ffb7c

023fc5ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fc5ec:	4603      	mov	r3, r0
 23fc5ee:	4a07      	ldr	r2, [pc, #28]	; (23fc60c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fc5f0:	b510      	push	{r4, lr}
 23fc5f2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fc5f6:	f101 0210 	add.w	r2, r1, #16
 23fc5fa:	f851 4b04 	ldr.w	r4, [r1], #4
 23fc5fe:	4291      	cmp	r1, r2
 23fc600:	f843 4b04 	str.w	r4, [r3], #4
 23fc604:	d1f9      	bne.n	23fc5fa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fc606:	780a      	ldrb	r2, [r1, #0]
 23fc608:	701a      	strb	r2, [r3, #0]
}
 23fc60a:	bd10      	pop	{r4, pc}
 23fc60c:	023ffb7c 	.word	0x023ffb7c

023fc610 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fc610:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fc612:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fc616:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fc61a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fc61e:	2304      	movs	r3, #4
 23fc620:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fc624:	6041      	str	r1, [r0, #4]
 23fc626:	7503      	strb	r3, [r0, #20]
}
 23fc628:	bd10      	pop	{r4, pc}
	...

023fc62c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fc62c:	b507      	push	{r0, r1, r2, lr}
 23fc62e:	4b06      	ldr	r3, [pc, #24]	; (23fc648 <_ZN9IPAddressC1EPKh+0x1c>)
 23fc630:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fc632:	78cb      	ldrb	r3, [r1, #3]
 23fc634:	9300      	str	r3, [sp, #0]
 23fc636:	788b      	ldrb	r3, [r1, #2]
 23fc638:	784a      	ldrb	r2, [r1, #1]
 23fc63a:	7809      	ldrb	r1, [r1, #0]
 23fc63c:	f7ff ffe8 	bl	23fc610 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fc640:	b003      	add	sp, #12
 23fc642:	f85d fb04 	ldr.w	pc, [sp], #4
 23fc646:	bf00      	nop
 23fc648:	023ffb7c 	.word	0x023ffb7c

023fc64c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
 23fc64c:	2201      	movs	r2, #1
 23fc64e:	f100 0310 	add.w	r3, r0, #16
    do {
        if (t->type == JSMN_OBJECT) {
 23fc652:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 23fc656:	4618      	mov	r0, r3
 23fc658:	2901      	cmp	r1, #1
 23fc65a:	d108      	bne.n	23fc66e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
 23fc65c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 23fc660:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
 23fc664:	3a01      	subs	r2, #1
 23fc666:	f103 0310 	add.w	r3, r3, #16
 23fc66a:	d1f2      	bne.n	23fc652 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
 23fc66c:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
 23fc66e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 23fc670:	bf04      	itt	eq
 23fc672:	f853 1c04 	ldreq.w	r1, [r3, #-4]
 23fc676:	1852      	addeq	r2, r2, r1
 23fc678:	e7f4      	b.n	23fc664 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

023fc67a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc67a:	b40e      	push	{r1, r2, r3}
 23fc67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fc67e:	b088      	sub	sp, #32
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc680:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
 23fc682:	af00      	add	r7, sp, #0
 23fc684:	f107 0534 	add.w	r5, r7, #52	; 0x34
 23fc688:	f855 2b04 	ldr.w	r2, [r5], #4
 23fc68c:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc68e:	462b      	mov	r3, r5
 23fc690:	1878      	adds	r0, r7, r1
 23fc692:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fc694:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc696:	f7fe fcf1 	bl	23fb07c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 23fc69a:	280f      	cmp	r0, #15
 23fc69c:	687a      	ldr	r2, [r7, #4]
 23fc69e:	d91a      	bls.n	23fc6d6 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
 23fc6a0:	f100 0308 	add.w	r3, r0, #8
 23fc6a4:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 23fc6a8:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
 23fc6aa:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc6ae:	1c41      	adds	r1, r0, #1
 23fc6b0:	462b      	mov	r3, r5
 23fc6b2:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fc6b4:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fc6b6:	f7fe fce1 	bl	23fb07c <vsnprintf>
        if (n > 0) {
 23fc6ba:	1e02      	subs	r2, r0, #0
 23fc6bc:	dd04      	ble.n	23fc6c8 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
 23fc6be:	6823      	ldr	r3, [r4, #0]
 23fc6c0:	4669      	mov	r1, sp
 23fc6c2:	4620      	mov	r0, r4
 23fc6c4:	689b      	ldr	r3, [r3, #8]
 23fc6c6:	4798      	blx	r3
 23fc6c8:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
 23fc6ca:	3720      	adds	r7, #32
 23fc6cc:	46bd      	mov	sp, r7
 23fc6ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fc6d2:	b003      	add	sp, #12
 23fc6d4:	4770      	bx	lr
    } else if (n > 0) {
 23fc6d6:	2800      	cmp	r0, #0
 23fc6d8:	d0f7      	beq.n	23fc6ca <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
 23fc6da:	6823      	ldr	r3, [r4, #0]
 23fc6dc:	4602      	mov	r2, r0
 23fc6de:	689b      	ldr	r3, [r3, #8]
 23fc6e0:	4620      	mov	r0, r4
 23fc6e2:	f107 0110 	add.w	r1, r7, #16
 23fc6e6:	4798      	blx	r3
}
 23fc6e8:	e7ef      	b.n	23fc6ca <_ZN5spark10JSONWriter6printfEPKcz+0x50>

023fc6ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>:
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc6ea:	b538      	push	{r3, r4, r5, lr}
 23fc6ec:	680b      	ldr	r3, [r1, #0]
 23fc6ee:	4604      	mov	r4, r0
 23fc6f0:	6003      	str	r3, [r0, #0]
 23fc6f2:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
 23fc6f4:	6843      	ldr	r3, [r0, #4]
 23fc6f6:	429d      	cmp	r5, r3
 23fc6f8:	d008      	beq.n	23fc70c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x22>
	    if (__tmp != 0)
 23fc6fa:	b115      	cbz	r5, 23fc702 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x18>
    { ++_M_use_count; }
 23fc6fc:	686b      	ldr	r3, [r5, #4]
 23fc6fe:	3301      	adds	r3, #1
 23fc700:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
 23fc702:	6860      	ldr	r0, [r4, #4]
 23fc704:	b108      	cbz	r0, 23fc70a <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0+0x20>
	      _M_pi->_M_release();
 23fc706:	f7fe fd6f 	bl	23fb1e8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
 23fc70a:	6065      	str	r5, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
 23fc70c:	bd38      	pop	{r3, r4, r5, pc}

023fc70e <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 23fc70e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fc710:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
 23fc712:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fc716:	2201      	movs	r2, #1
 23fc718:	689b      	ldr	r3, [r3, #8]
 23fc71a:	f10d 0107 	add.w	r1, sp, #7
 23fc71e:	4798      	blx	r3
}
 23fc720:	b003      	add	sp, #12
 23fc722:	f85d fb04 	ldr.w	pc, [sp], #4

023fc726 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc726:	460b      	mov	r3, r1
 23fc728:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
 23fc72a:	2200      	movs	r2, #0
 23fc72c:	b510      	push	{r4, lr}
 23fc72e:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc730:	e9c0 2200 	strd	r2, r2, [r0]
        t_ = t;
 23fc734:	6083      	str	r3, [r0, #8]
    if (t) {
 23fc736:	b90b      	cbnz	r3, 23fc73c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
 23fc738:	4620      	mov	r0, r4
 23fc73a:	bd10      	pop	{r4, pc}
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count() == 0 && get() == nullptr
       */
      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

      shared_ptr& operator=(const shared_ptr&) noexcept = default;
 23fc73c:	f7ff ffd5 	bl	23fc6ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
 23fc740:	e7fa      	b.n	23fc738 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

023fc742 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
 23fc742:	6883      	ldr	r3, [r0, #8]
 23fc744:	b1eb      	cbz	r3, 23fc782 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
 23fc746:	781a      	ldrb	r2, [r3, #0]
 23fc748:	2a03      	cmp	r2, #3
 23fc74a:	d81a      	bhi.n	23fc782 <_ZNK5spark9JSONValue4typeEv+0x40>
 23fc74c:	e8df f002 	tbb	[pc, r2]
 23fc750:	1b021704 	.word	0x1b021704
 23fc754:	2005      	movs	r0, #5
 23fc756:	4770      	bx	lr
        const char c = d_->json[t_->start];
 23fc758:	6802      	ldr	r2, [r0, #0]
 23fc75a:	685b      	ldr	r3, [r3, #4]
 23fc75c:	6852      	ldr	r2, [r2, #4]
 23fc75e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 23fc760:	282d      	cmp	r0, #45	; 0x2d
 23fc762:	d012      	beq.n	23fc78a <_ZNK5spark9JSONValue4typeEv+0x48>
 23fc764:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 23fc768:	2b09      	cmp	r3, #9
 23fc76a:	d90e      	bls.n	23fc78a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 23fc76c:	2874      	cmp	r0, #116	; 0x74
 23fc76e:	d00e      	beq.n	23fc78e <_ZNK5spark9JSONValue4typeEv+0x4c>
 23fc770:	2866      	cmp	r0, #102	; 0x66
 23fc772:	d00c      	beq.n	23fc78e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
 23fc774:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 23fc778:	4258      	negs	r0, r3
 23fc77a:	4158      	adcs	r0, r3
 23fc77c:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
 23fc77e:	2006      	movs	r0, #6
 23fc780:	4770      	bx	lr
        return JSON_TYPE_INVALID;
 23fc782:	2000      	movs	r0, #0
 23fc784:	4770      	bx	lr
        return JSON_TYPE_STRING;
 23fc786:	2004      	movs	r0, #4
 23fc788:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
 23fc78a:	2003      	movs	r0, #3
 23fc78c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
 23fc78e:	2002      	movs	r0, #2
}
 23fc790:	4770      	bx	lr

023fc792 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
 23fc792:	b510      	push	{r4, lr}
 23fc794:	4604      	mov	r4, r0
    switch (type()) {
 23fc796:	f7ff ffd4 	bl	23fc742 <_ZNK5spark9JSONValue4typeEv>
 23fc79a:	2802      	cmp	r0, #2
 23fc79c:	d00e      	beq.n	23fc7bc <_ZNK5spark9JSONValue5toIntEv+0x2a>
 23fc79e:	1ec3      	subs	r3, r0, #3
 23fc7a0:	b2db      	uxtb	r3, r3
 23fc7a2:	2b01      	cmp	r3, #1
 23fc7a4:	d814      	bhi.n	23fc7d0 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
 23fc7a6:	6822      	ldr	r2, [r4, #0]
 23fc7a8:	68a3      	ldr	r3, [r4, #8]
 23fc7aa:	6850      	ldr	r0, [r2, #4]
 23fc7ac:	685b      	ldr	r3, [r3, #4]
        return strtol(s, nullptr, 10);
 23fc7ae:	220a      	movs	r2, #10
}
 23fc7b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
 23fc7b4:	2100      	movs	r1, #0
 23fc7b6:	4418      	add	r0, r3
 23fc7b8:	f002 beb8 	b.w	23ff52c <strtol>
        const char* const s = d_->json + t_->start;
 23fc7bc:	6822      	ldr	r2, [r4, #0]
 23fc7be:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 23fc7c0:	6852      	ldr	r2, [r2, #4]
 23fc7c2:	685b      	ldr	r3, [r3, #4]
 23fc7c4:	5cd0      	ldrb	r0, [r2, r3]
 23fc7c6:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 23fc7ca:	4258      	negs	r0, r3
 23fc7cc:	4158      	adcs	r0, r3
}
 23fc7ce:	bd10      	pop	{r4, pc}
    switch (type()) {
 23fc7d0:	2000      	movs	r0, #0
 23fc7d2:	e7fc      	b.n	23fc7ce <_ZNK5spark9JSONValue5toIntEv+0x3c>

023fc7d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc7d4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc7d6:	2300      	movs	r3, #0
 23fc7d8:	4604      	mov	r4, r0
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc7da:	e9c0 3300 	strd	r3, r3, [r0]
        n_(0) {
 23fc7de:	480e      	ldr	r0, [pc, #56]	; (23fc818 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
 23fc7e0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 23fc7e4:	b1a9      	cbz	r1, 23fc812 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
 23fc7e6:	780b      	ldrb	r3, [r1, #0]
 23fc7e8:	2b03      	cmp	r3, #3
 23fc7ea:	d006      	beq.n	23fc7fa <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 23fc7ec:	b98b      	cbnz	r3, 23fc812 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 23fc7ee:	6813      	ldr	r3, [r2, #0]
 23fc7f0:	6858      	ldr	r0, [r3, #4]
 23fc7f2:	684b      	ldr	r3, [r1, #4]
 23fc7f4:	5cc3      	ldrb	r3, [r0, r3]
 23fc7f6:	2b6e      	cmp	r3, #110	; 0x6e
 23fc7f8:	d007      	beq.n	23fc80a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
 23fc7fa:	6813      	ldr	r3, [r2, #0]
 23fc7fc:	684d      	ldr	r5, [r1, #4]
 23fc7fe:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
 23fc800:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
 23fc802:	4428      	add	r0, r5
            n_ = t->end - t->start;
 23fc804:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
 23fc806:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
 23fc808:	60e3      	str	r3, [r4, #12]
 23fc80a:	4611      	mov	r1, r2
 23fc80c:	4620      	mov	r0, r4
 23fc80e:	f7ff ff6c 	bl	23fc6ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc812:	4620      	mov	r0, r4
 23fc814:	bd38      	pop	{r3, r4, r5, pc}
 23fc816:	bf00      	nop
 23fc818:	023ffc6a 	.word	0x023ffc6a

023fc81c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 23fc81c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
 23fc81e:	2500      	movs	r5, #0
 23fc820:	460b      	mov	r3, r1
 23fc822:	4604      	mov	r4, r0
 23fc824:	4611      	mov	r1, r2
      constexpr __shared_count() noexcept : _M_pi(0)
 23fc826:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
 23fc82a:	e9c0 5502 	strd	r5, r5, [r0, #8]
 23fc82e:	e9c0 5504 	strd	r5, r5, [r0, #16]
    if (t && t->type == JSMN_OBJECT) {
 23fc832:	b14b      	cbz	r3, 23fc848 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
 23fc834:	781a      	ldrb	r2, [r3, #0]
 23fc836:	2a01      	cmp	r2, #1
 23fc838:	d106      	bne.n	23fc848 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
 23fc83a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
 23fc83e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
 23fc840:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
 23fc842:	6143      	str	r3, [r0, #20]
 23fc844:	f7ff ff51 	bl	23fc6ea <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_.isra.0>
}
 23fc848:	4620      	mov	r0, r4
 23fc84a:	bd38      	pop	{r3, r4, r5, pc}

023fc84c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
 23fc84c:	b510      	push	{r4, lr}
    if (!n_) {
 23fc84e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
 23fc850:	4604      	mov	r4, r0
    if (!n_) {
 23fc852:	b163      	cbz	r3, 23fc86e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
 23fc854:	6880      	ldr	r0, [r0, #8]
    --n_;
 23fc856:	3b01      	subs	r3, #1
    k_ = t_; // Name
 23fc858:	60e0      	str	r0, [r4, #12]
    ++t_;
 23fc85a:	3010      	adds	r0, #16
 23fc85c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 23fc85e:	6120      	str	r0, [r4, #16]
    --n_;
 23fc860:	6163      	str	r3, [r4, #20]
    if (n_) {
 23fc862:	b113      	cbz	r3, 23fc86a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
 23fc864:	f7ff fef2 	bl	23fc64c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 23fc868:	60a0      	str	r0, [r4, #8]
    return true;
 23fc86a:	2001      	movs	r0, #1
 23fc86c:	e000      	b.n	23fc870 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
 23fc86e:	4618      	mov	r0, r3
}
 23fc870:	bd10      	pop	{r4, pc}

023fc872 <_ZN5spark10JSONWriter8endArrayEv>:
spark::JSONWriter& spark::JSONWriter::endArray() {
 23fc872:	b510      	push	{r4, lr}
    write(']');
 23fc874:	215d      	movs	r1, #93	; 0x5d
spark::JSONWriter& spark::JSONWriter::endArray() {
 23fc876:	4604      	mov	r4, r0
    write(']');
 23fc878:	f7ff ff49 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fc87c:	2301      	movs	r3, #1
}
 23fc87e:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc880:	7123      	strb	r3, [r4, #4]
}
 23fc882:	bd10      	pop	{r4, pc}

023fc884 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc884:	b510      	push	{r4, lr}
    write('}');
 23fc886:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
 23fc888:	4604      	mov	r4, r0
    write('}');
 23fc88a:	f7ff ff40 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 23fc88e:	2301      	movs	r3, #1
}
 23fc890:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc892:	7123      	strb	r3, [r4, #4]
}
 23fc894:	bd10      	pop	{r4, pc}

023fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
 23fc896:	b508      	push	{r3, lr}
    switch (state_) {
 23fc898:	7903      	ldrb	r3, [r0, #4]
 23fc89a:	2b01      	cmp	r3, #1
 23fc89c:	d002      	beq.n	23fc8a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 23fc89e:	2b02      	cmp	r3, #2
 23fc8a0:	d004      	beq.n	23fc8ac <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
 23fc8a2:	bd08      	pop	{r3, pc}
        write(',');
 23fc8a4:	212c      	movs	r1, #44	; 0x2c
        write(':');
 23fc8a6:	f7ff ff32 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
}
 23fc8aa:	e7fa      	b.n	23fc8a2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
 23fc8ac:	213a      	movs	r1, #58	; 0x3a
 23fc8ae:	e7fa      	b.n	23fc8a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

023fc8b0 <_ZN5spark10JSONWriter10beginArrayEv>:
spark::JSONWriter& spark::JSONWriter::beginArray() {
 23fc8b0:	b510      	push	{r4, lr}
 23fc8b2:	4604      	mov	r4, r0
    writeSeparator();
 23fc8b4:	f7ff ffef 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('[');
 23fc8b8:	4620      	mov	r0, r4
 23fc8ba:	215b      	movs	r1, #91	; 0x5b
 23fc8bc:	f7ff ff27 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc8c0:	2300      	movs	r3, #0
}
 23fc8c2:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc8c4:	7123      	strb	r3, [r4, #4]
}
 23fc8c6:	bd10      	pop	{r4, pc}

023fc8c8 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
 23fc8c8:	b510      	push	{r4, lr}
 23fc8ca:	4604      	mov	r4, r0
    writeSeparator();
 23fc8cc:	f7ff ffe3 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 23fc8d0:	4620      	mov	r0, r4
 23fc8d2:	217b      	movs	r1, #123	; 0x7b
 23fc8d4:	f7ff ff1b 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 23fc8d8:	2300      	movs	r3, #0
}
 23fc8da:	4620      	mov	r0, r4
    state_ = BEGIN;
 23fc8dc:	7123      	strb	r3, [r4, #4]
}
 23fc8de:	bd10      	pop	{r4, pc}

023fc8e0 <_ZN5spark10JSONWriter5valueEb>:
spark::JSONWriter& spark::JSONWriter::value(bool val) {
 23fc8e0:	b538      	push	{r3, r4, r5, lr}
 23fc8e2:	4604      	mov	r4, r0
 23fc8e4:	460d      	mov	r5, r1
    writeSeparator();
 23fc8e6:	f7ff ffd6 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    if (val) {
 23fc8ea:	6823      	ldr	r3, [r4, #0]
        write("true", 4);
 23fc8ec:	689b      	ldr	r3, [r3, #8]
    if (val) {
 23fc8ee:	b13d      	cbz	r5, 23fc900 <_ZN5spark10JSONWriter5valueEb+0x20>
        write("true", 4);
 23fc8f0:	2204      	movs	r2, #4
 23fc8f2:	4905      	ldr	r1, [pc, #20]	; (23fc908 <_ZN5spark10JSONWriter5valueEb+0x28>)
        write("false", 5);
 23fc8f4:	4620      	mov	r0, r4
 23fc8f6:	4798      	blx	r3
    state_ = NEXT;
 23fc8f8:	2301      	movs	r3, #1
}
 23fc8fa:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc8fc:	7123      	strb	r3, [r4, #4]
}
 23fc8fe:	bd38      	pop	{r3, r4, r5, pc}
        write("false", 5);
 23fc900:	2205      	movs	r2, #5
 23fc902:	4902      	ldr	r1, [pc, #8]	; (23fc90c <_ZN5spark10JSONWriter5valueEb+0x2c>)
 23fc904:	e7f6      	b.n	23fc8f4 <_ZN5spark10JSONWriter5valueEb+0x14>
 23fc906:	bf00      	nop
 23fc908:	023ffb92 	.word	0x023ffb92
 23fc90c:	023ffb8c 	.word	0x023ffb8c

023fc910 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
 23fc910:	b513      	push	{r0, r1, r4, lr}
 23fc912:	4604      	mov	r4, r0
 23fc914:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc916:	f7ff ffbe 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 23fc91a:	6823      	ldr	r3, [r4, #0]
 23fc91c:	4620      	mov	r0, r4
 23fc91e:	68db      	ldr	r3, [r3, #12]
 23fc920:	9a01      	ldr	r2, [sp, #4]
 23fc922:	4903      	ldr	r1, [pc, #12]	; (23fc930 <_ZN5spark10JSONWriter5valueEi+0x20>)
 23fc924:	4798      	blx	r3
    state_ = NEXT;
 23fc926:	2301      	movs	r3, #1
}
 23fc928:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc92a:	7123      	strb	r3, [r4, #4]
}
 23fc92c:	b002      	add	sp, #8
 23fc92e:	bd10      	pop	{r4, pc}
 23fc930:	023ffa7a 	.word	0x023ffa7a

023fc934 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 23fc934:	b513      	push	{r0, r1, r4, lr}
 23fc936:	4604      	mov	r4, r0
 23fc938:	9101      	str	r1, [sp, #4]
    writeSeparator();
 23fc93a:	f7ff ffac 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 23fc93e:	6823      	ldr	r3, [r4, #0]
 23fc940:	4620      	mov	r0, r4
 23fc942:	68db      	ldr	r3, [r3, #12]
 23fc944:	9a01      	ldr	r2, [sp, #4]
 23fc946:	4903      	ldr	r1, [pc, #12]	; (23fc954 <_ZN5spark10JSONWriter5valueEj+0x20>)
 23fc948:	4798      	blx	r3
    state_ = NEXT;
 23fc94a:	2301      	movs	r3, #1
}
 23fc94c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc94e:	7123      	strb	r3, [r4, #4]
}
 23fc950:	b002      	add	sp, #8
 23fc952:	bd10      	pop	{r4, pc}
 23fc954:	023ffb97 	.word	0x023ffb97

023fc958 <_ZN5spark10JSONWriter5valueEx>:
spark::JSONWriter& spark::JSONWriter::value(long long val) {
 23fc958:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc95a:	4604      	mov	r4, r0
 23fc95c:	e9cd 3200 	strd	r3, r2, [sp]
    writeSeparator();
 23fc960:	f7ff ff99 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%lld", val);
 23fc964:	e9dd 3200 	ldrd	r3, r2, [sp]
 23fc968:	6821      	ldr	r1, [r4, #0]
 23fc96a:	4620      	mov	r0, r4
 23fc96c:	68cd      	ldr	r5, [r1, #12]
 23fc96e:	4903      	ldr	r1, [pc, #12]	; (23fc97c <_ZN5spark10JSONWriter5valueEx+0x24>)
 23fc970:	47a8      	blx	r5
    state_ = NEXT;
 23fc972:	2301      	movs	r3, #1
}
 23fc974:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc976:	7123      	strb	r3, [r4, #4]
}
 23fc978:	b003      	add	sp, #12
 23fc97a:	bd30      	pop	{r4, r5, pc}
 23fc97c:	023ffb9a 	.word	0x023ffb9a

023fc980 <_ZN5spark10JSONWriter5valueEy>:
spark::JSONWriter& spark::JSONWriter::value(unsigned long long val) {
 23fc980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc982:	4604      	mov	r4, r0
 23fc984:	e9cd 3200 	strd	r3, r2, [sp]
    writeSeparator();
 23fc988:	f7ff ff85 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%llu", val);
 23fc98c:	e9dd 3200 	ldrd	r3, r2, [sp]
 23fc990:	6821      	ldr	r1, [r4, #0]
 23fc992:	4620      	mov	r0, r4
 23fc994:	68cd      	ldr	r5, [r1, #12]
 23fc996:	4903      	ldr	r1, [pc, #12]	; (23fc9a4 <_ZN5spark10JSONWriter5valueEy+0x24>)
 23fc998:	47a8      	blx	r5
    state_ = NEXT;
 23fc99a:	2301      	movs	r3, #1
}
 23fc99c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fc99e:	7123      	strb	r3, [r4, #4]
}
 23fc9a0:	b003      	add	sp, #12
 23fc9a2:	bd30      	pop	{r4, r5, pc}
 23fc9a4:	023ffb9f 	.word	0x023ffb9f

023fc9a8 <_ZN5spark10JSONWriter5valueEd>:
spark::JSONWriter& spark::JSONWriter::value(double val) {
 23fc9a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fc9ac:	4606      	mov	r6, r0
 23fc9ae:	ec55 4b10 	vmov	r4, r5, d0
    writeSeparator();
 23fc9b2:	f7ff ff70 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%g", toFinite(val));
 23fc9b6:	6833      	ldr	r3, [r6, #0]
    if (std::isnan(val)) {
 23fc9b8:	4622      	mov	r2, r4
    printf("%g", toFinite(val));
 23fc9ba:	68df      	ldr	r7, [r3, #12]
    if (std::isnan(val)) {
 23fc9bc:	4620      	mov	r0, r4
 23fc9be:	462b      	mov	r3, r5
 23fc9c0:	4629      	mov	r1, r5
 23fc9c2:	f7fd f881 	bl	23f9ac8 <__aeabi_dcmpun>
 23fc9c6:	bb28      	cbnz	r0, 23fca14 <_ZN5spark10JSONWriter5valueEd+0x6c>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23fc9c8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
    if (std::isinf(val)) {
 23fc9cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fc9d0:	4620      	mov	r0, r4
 23fc9d2:	4649      	mov	r1, r9
 23fc9d4:	4b12      	ldr	r3, [pc, #72]	; (23fca20 <_ZN5spark10JSONWriter5valueEd+0x78>)
 23fc9d6:	f7fd f877 	bl	23f9ac8 <__aeabi_dcmpun>
 23fc9da:	b988      	cbnz	r0, 23fca00 <_ZN5spark10JSONWriter5valueEd+0x58>
 23fc9dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fc9e0:	4620      	mov	r0, r4
 23fc9e2:	4649      	mov	r1, r9
 23fc9e4:	4b0e      	ldr	r3, [pc, #56]	; (23fca20 <_ZN5spark10JSONWriter5valueEd+0x78>)
 23fc9e6:	f7fd f851 	bl	23f9a8c <__aeabi_dcmple>
 23fc9ea:	b948      	cbnz	r0, 23fca00 <_ZN5spark10JSONWriter5valueEd+0x58>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23fc9ec:	4620      	mov	r0, r4
 23fc9ee:	2200      	movs	r2, #0
 23fc9f0:	2300      	movs	r3, #0
 23fc9f2:	4629      	mov	r1, r5
 23fc9f4:	f7fd f840 	bl	23f9a78 <__aeabi_dcmplt>
 23fc9f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 23fc9fc:	b968      	cbnz	r0, 23fca1a <_ZN5spark10JSONWriter5valueEd+0x72>
 23fc9fe:	4d08      	ldr	r5, [pc, #32]	; (23fca20 <_ZN5spark10JSONWriter5valueEd+0x78>)
    printf("%g", toFinite(val));
 23fca00:	462b      	mov	r3, r5
 23fca02:	4630      	mov	r0, r6
 23fca04:	4622      	mov	r2, r4
 23fca06:	4907      	ldr	r1, [pc, #28]	; (23fca24 <_ZN5spark10JSONWriter5valueEd+0x7c>)
 23fca08:	47b8      	blx	r7
    state_ = NEXT;
 23fca0a:	2301      	movs	r3, #1
}
 23fca0c:	4630      	mov	r0, r6
    state_ = NEXT;
 23fca0e:	7133      	strb	r3, [r6, #4]
}
 23fca10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return 0;
 23fca14:	2400      	movs	r4, #0
 23fca16:	2500      	movs	r5, #0
 23fca18:	e7f2      	b.n	23fca00 <_ZN5spark10JSONWriter5valueEd+0x58>
        return (val < 0) ? std::numeric_limits<double>::lowest() : std::numeric_limits<double>::max();
 23fca1a:	f46f 1580 	mvn.w	r5, #1048576	; 0x100000
 23fca1e:	e7ef      	b.n	23fca00 <_ZN5spark10JSONWriter5valueEd+0x58>
 23fca20:	7fefffff 	.word	0x7fefffff
 23fca24:	023ffba4 	.word	0x023ffba4

023fca28 <_ZN5spark10JSONWriter9nullValueEv>:
spark::JSONWriter& spark::JSONWriter::nullValue() {
 23fca28:	b510      	push	{r4, lr}
 23fca2a:	4604      	mov	r4, r0
    writeSeparator();
 23fca2c:	f7ff ff33 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write("null", 4);
 23fca30:	6823      	ldr	r3, [r4, #0]
 23fca32:	4620      	mov	r0, r4
 23fca34:	2204      	movs	r2, #4
 23fca36:	689b      	ldr	r3, [r3, #8]
 23fca38:	4902      	ldr	r1, [pc, #8]	; (23fca44 <_ZN5spark10JSONWriter9nullValueEv+0x1c>)
 23fca3a:	4798      	blx	r3
    state_ = NEXT;
 23fca3c:	2301      	movs	r3, #1
}
 23fca3e:	4620      	mov	r0, r4
    state_ = NEXT;
 23fca40:	7123      	strb	r3, [r4, #4]
}
 23fca42:	bd10      	pop	{r4, pc}
 23fca44:	023ffba7 	.word	0x023ffba7

023fca48 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fca48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fca4c:	460d      	mov	r5, r1
 23fca4e:	4690      	mov	r8, r2
    write('"');
 23fca50:	2122      	movs	r1, #34	; 0x22
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 23fca52:	4604      	mov	r4, r0
 23fca54:	462f      	mov	r7, r5
    write('"');
 23fca56:	f7ff fe5a 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 23fca5a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 23fcb00 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xb8>
    const char* const end = str + size;
 23fca5e:	44a8      	add	r8, r5
    while (s != end) {
 23fca60:	4547      	cmp	r7, r8
 23fca62:	46ba      	mov	sl, r7
 23fca64:	d03d      	beq.n	23fcae2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9a>
        const char c = *s;
 23fca66:	f817 6b01 	ldrb.w	r6, [r7], #1
        if (c == '"' || c == '\\' || !std::isprint((unsigned char)c)) {
 23fca6a:	2e22      	cmp	r6, #34	; 0x22
 23fca6c:	d006      	beq.n	23fca7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fca6e:	2e5c      	cmp	r6, #92	; 0x5c
 23fca70:	d004      	beq.n	23fca7c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x34>
 23fca72:	4630      	mov	r0, r6
 23fca74:	f002 fc06 	bl	23ff284 <isprint>
 23fca78:	2800      	cmp	r0, #0
 23fca7a:	d1f1      	bne.n	23fca60 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
 23fca7c:	6823      	ldr	r3, [r4, #0]
 23fca7e:	4629      	mov	r1, r5
 23fca80:	4620      	mov	r0, r4
 23fca82:	689b      	ldr	r3, [r3, #8]
 23fca84:	ebaa 0205 	sub.w	r2, sl, r5
 23fca88:	4798      	blx	r3
            write('\\');
 23fca8a:	215c      	movs	r1, #92	; 0x5c
 23fca8c:	4620      	mov	r0, r4
 23fca8e:	f7ff fe3e 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 23fca92:	2e0d      	cmp	r6, #13
 23fca94:	d80a      	bhi.n	23fcaac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
 23fca96:	2e07      	cmp	r6, #7
 23fca98:	d91c      	bls.n	23fcad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fca9a:	f1a6 0308 	sub.w	r3, r6, #8
 23fca9e:	2b05      	cmp	r3, #5
 23fcaa0:	d818      	bhi.n	23fcad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
 23fcaa2:	e8df f003 	tbb	[pc, r3]
 23fcaa6:	0f0d      	.short	0x0f0d
 23fcaa8:	15131711 	.word	0x15131711
 23fcaac:	2e22      	cmp	r6, #34	; 0x22
 23fcaae:	d001      	beq.n	23fcab4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6c>
 23fcab0:	2e5c      	cmp	r6, #92	; 0x5c
 23fcab2:	d10f      	bne.n	23fcad4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8c>
                write(c);
 23fcab4:	4631      	mov	r1, r6
                write('b');
 23fcab6:	4620      	mov	r0, r4
 23fcab8:	f7ff fe29 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
 23fcabc:	463d      	mov	r5, r7
    while (s != end) {
 23fcabe:	e7cf      	b.n	23fca60 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
 23fcac0:	2162      	movs	r1, #98	; 0x62
 23fcac2:	e7f8      	b.n	23fcab6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('t');
 23fcac4:	2174      	movs	r1, #116	; 0x74
 23fcac6:	e7f6      	b.n	23fcab6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('n');
 23fcac8:	216e      	movs	r1, #110	; 0x6e
 23fcaca:	e7f4      	b.n	23fcab6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('f');
 23fcacc:	2166      	movs	r1, #102	; 0x66
 23fcace:	e7f2      	b.n	23fcab6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                write('r');
 23fcad0:	2172      	movs	r1, #114	; 0x72
 23fcad2:	e7f0      	b.n	23fcab6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6e>
                printf("u%04x", (unsigned)c);
 23fcad4:	6823      	ldr	r3, [r4, #0]
 23fcad6:	4632      	mov	r2, r6
 23fcad8:	4649      	mov	r1, r9
 23fcada:	4620      	mov	r0, r4
 23fcadc:	68db      	ldr	r3, [r3, #12]
 23fcade:	4798      	blx	r3
                break;
 23fcae0:	e7ec      	b.n	23fcabc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
        }
        ++s;
    }
    if (s != str) {
 23fcae2:	42bd      	cmp	r5, r7
 23fcae4:	d005      	beq.n	23fcaf2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xaa>
        write(str, s - str); // Write remaining characters
 23fcae6:	6823      	ldr	r3, [r4, #0]
 23fcae8:	4629      	mov	r1, r5
 23fcaea:	4620      	mov	r0, r4
 23fcaec:	689b      	ldr	r3, [r3, #8]
 23fcaee:	1b7a      	subs	r2, r7, r5
 23fcaf0:	4798      	blx	r3
    }
    write('"');
 23fcaf2:	2122      	movs	r1, #34	; 0x22
 23fcaf4:	4620      	mov	r0, r4
 23fcaf6:	f7ff fe0a 	bl	23fc70e <_ZN5spark10JSONWriter5writeEc>
}
 23fcafa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23fcafe:	bf00      	nop
 23fcb00:	023ffbac 	.word	0x023ffbac

023fcb04 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 23fcb04:	b513      	push	{r0, r1, r4, lr}
 23fcb06:	4604      	mov	r4, r0
 23fcb08:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fcb0c:	f7ff fec3 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 23fcb10:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fcb14:	4620      	mov	r0, r4
 23fcb16:	f7ff ff97 	bl	23fca48 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 23fcb1a:	2302      	movs	r3, #2
}
 23fcb1c:	4620      	mov	r0, r4
    state_ = VALUE;
 23fcb1e:	7123      	strb	r3, [r4, #4]
}
 23fcb20:	b002      	add	sp, #8
 23fcb22:	bd10      	pop	{r4, pc}

023fcb24 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 23fcb24:	b513      	push	{r0, r1, r4, lr}
 23fcb26:	4604      	mov	r4, r0
 23fcb28:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
 23fcb2c:	f7ff feb3 	bl	23fc896 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 23fcb30:	e9dd 2100 	ldrd	r2, r1, [sp]
 23fcb34:	4620      	mov	r0, r4
 23fcb36:	f7ff ff87 	bl	23fca48 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 23fcb3a:	2301      	movs	r3, #1
}
 23fcb3c:	4620      	mov	r0, r4
    state_ = NEXT;
 23fcb3e:	7123      	strb	r3, [r4, #4]
}
 23fcb40:	b002      	add	sp, #8
 23fcb42:	bd10      	pop	{r4, pc}

023fcb44 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESE_SO_>:
        return val;
    }

    template<typename SourceT>
    VariantMap operator()(const SourceT& val) const {
        return VariantMap();
 23fcb44:	2200      	movs	r2, #0
 23fcb46:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb4a:	6082      	str	r2, [r0, #8]
 23fcb4c:	4770      	bx	lr

023fcb4e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESE_SO_>:
 23fcb4e:	2200      	movs	r2, #0
 23fcb50:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb54:	6082      	str	r2, [r0, #8]
 23fcb56:	4770      	bx	lr

023fcb58 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESE_SO_>:
 23fcb58:	2200      	movs	r2, #0
 23fcb5a:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb5e:	6082      	str	r2, [r0, #8]
 23fcb60:	4770      	bx	lr

023fcb62 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESE_SO_>:
 23fcb62:	2200      	movs	r2, #0
 23fcb64:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb68:	6082      	str	r2, [r0, #8]
 23fcb6a:	4770      	bx	lr

023fcb6c <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESE_SO_>:
 23fcb6c:	2200      	movs	r2, #0
 23fcb6e:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb72:	6082      	str	r2, [r0, #8]
 23fcb74:	4770      	bx	lr

023fcb76 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESE_SO_>:
 23fcb76:	2200      	movs	r2, #0
 23fcb78:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb7c:	6082      	str	r2, [r0, #8]
 23fcb7e:	4770      	bx	lr

023fcb80 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESE_SO_>:
 23fcb80:	2200      	movs	r2, #0
 23fcb82:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb86:	6082      	str	r2, [r0, #8]
 23fcb88:	4770      	bx	lr

023fcb8a <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESE_SO_>:
 23fcb8a:	2200      	movs	r2, #0
 23fcb8c:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb90:	6082      	str	r2, [r0, #8]
 23fcb92:	4770      	bx	lr

023fcb94 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESE_SO_>:
 23fcb94:	2200      	movs	r2, #0
 23fcb96:	e9c0 2200 	strd	r2, r2, [r0]
 23fcb9a:	6082      	str	r2, [r0, #8]
 23fcb9c:	4770      	bx	lr

023fcb9e <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESE_SO_>:
 23fcb9e:	2200      	movs	r2, #0
 23fcba0:	e9c0 2200 	strd	r2, r2, [r0]
 23fcba4:	6082      	str	r2, [r0, #8]
 23fcba6:	4770      	bx	lr

023fcba8 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj0EEEE14__visit_invokeESU_SY_>:
 23fcba8:	4770      	bx	lr

023fcbaa <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4294967295EEEE14__visit_invokeESU_SY_>:
 23fcbaa:	4770      	bx	lr

023fcbac <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj1EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23fcbac:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23fcbae:	780a      	ldrb	r2, [r1, #0]
 23fcbb0:	701a      	strb	r2, [r3, #0]
      }
 23fcbb2:	4770      	bx	lr

023fcbb4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj2EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23fcbb4:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23fcbb6:	680a      	ldr	r2, [r1, #0]
 23fcbb8:	601a      	str	r2, [r3, #0]
      }
 23fcbba:	4770      	bx	lr

023fcbbc <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj3EEEE14__visit_invokeESU_SY_>:
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23fcbbc:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23fcbbe:	680a      	ldr	r2, [r1, #0]
 23fcbc0:	601a      	str	r2, [r3, #0]
      }
 23fcbc2:	4770      	bx	lr

023fcbc4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj7EEEE14__visit_invokeESU_SY_>:
        ::new (__storage)
 23fcbc4:	6800      	ldr	r0, [r0, #0]
 23fcbc6:	f001 bbda 	b.w	23fe37e <_ZN6StringC1ERKS_>

023fcbca <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj6EEEE14__visit_invokeESU_SY_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 23fcbca:	6803      	ldr	r3, [r0, #0]
 23fcbcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcbd0:	e9c3 0100 	strd	r0, r1, [r3]
      }
 23fcbd4:	4770      	bx	lr

023fcbd6 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj5EEEE14__visit_invokeESU_SY_>:
 23fcbd6:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23fcbd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcbdc:	e9c3 0100 	strd	r0, r1, [r3]
      }
 23fcbe0:	4770      	bx	lr

023fcbe2 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj4EEEE14__visit_invokeESU_SY_>:
 23fcbe2:	6803      	ldr	r3, [r0, #0]
        ::new (__storage)
 23fcbe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 23fcbe8:	e9c3 0100 	strd	r0, r1, [r3]
      }
 23fcbec:	4770      	bx	lr
	...

023fcbf0 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>:
      : _M_index(static_cast<__index_type>(variant_npos))
 23fcbf0:	23ff      	movs	r3, #255	; 0xff
      _Copy_ctor_base(const _Copy_ctor_base& __rhs)
 23fcbf2:	b513      	push	{r0, r1, r4, lr}
 23fcbf4:	4604      	mov	r4, r0
      : _M_index(static_cast<__index_type>(variant_npos))
 23fcbf6:	7403      	strb	r3, [r0, #16]
      __lhs._M_index = __rhs._M_index;
 23fcbf8:	7c0b      	ldrb	r3, [r1, #16]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fcbfa:	4a06      	ldr	r2, [pc, #24]	; (23fcc14 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_+0x24>)
      __lhs._M_index = __rhs._M_index;
 23fcbfc:	7403      	strb	r3, [r0, #16]
	  return make_signed_t<__index_type>(this->_M_index);
 23fcbfe:	b25b      	sxtb	r3, r3
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 23fcc00:	3301      	adds	r3, #1
      __variant::__raw_visit([&__lhs](auto&& __rhs_mem) mutable
 23fcc02:	9001      	str	r0, [sp, #4]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fcc04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fcc08:	a801      	add	r0, sp, #4
 23fcc0a:	4798      	blx	r3
      }
 23fcc0c:	4620      	mov	r0, r4
 23fcc0e:	b002      	add	sp, #8
 23fcc10:	bd10      	pop	{r4, pc}
 23fcc12:	bf00      	nop
 23fcc14:	023ffbb4 	.word	0x023ffbb4

023fcc18 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj8EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fcc18:	b508      	push	{r3, lr}
 23fcc1a:	6800      	ldr	r0, [r0, #0]
 23fcc1c:	f7fe fac7 	bl	23fb1ae <_ZN5spark6VectorIcNS_16DefaultAllocatorEEC1ERKS2_>
      }
 23fcc20:	bd08      	pop	{r3, pc}
	...

023fcc24 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>:
      swap(variant& __rhs)
 23fcc24:	b507      	push	{r0, r1, r2, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fcc26:	f991 3010 	ldrsb.w	r3, [r1, #16]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fcc2a:	4a05      	ldr	r2, [pc, #20]	; (23fcc40 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_+0x1c>)
      auto __func_ptr = __vtable._M_access(__variants.index()...);
 23fcc2c:	3301      	adds	r3, #1
	__detail::__variant::__raw_idx_visit(
 23fcc2e:	e9cd 0100 	strd	r0, r1, [sp]
      return (*__func_ptr)(std::forward<_Visitor>(__visitor),
 23fcc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fcc36:	4668      	mov	r0, sp
 23fcc38:	4798      	blx	r3
      }
 23fcc3a:	b003      	add	sp, #12
 23fcc3c:	f85d fb04 	ldr.w	pc, [sp], #4
 23fcc40:	023ff918 	.word	0x023ff918

023fcc44 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>:
 23fcc44:	2300      	movs	r3, #0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
 23fcc4a:	e9c0 3300 	strd	r3, r3, [r0]
 23fcc4e:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc50:	f8d1 8004 	ldr.w	r8, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc54:	4605      	mov	r5, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc56:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcc58:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcc5a:	dd4e      	ble.n	23fccfa <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0xb6>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fcc5c:	f04f 0a18 	mov.w	sl, #24
    return ::malloc(size);
 23fcc60:	fb0a f008 	mul.w	r0, sl, r8
 23fcc64:	f7fe f9d2 	bl	23fb00c <malloc>
            if (!d) {
 23fcc68:	4606      	mov	r6, r0
 23fcc6a:	2800      	cmp	r0, #0
 23fcc6c:	d045      	beq.n	23fccfa <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0xb6>
            move(d, data_, data_ + size_);
 23fcc6e:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
 23fcc72:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fcc74:	fb0a 4a01 	mla	sl, sl, r1, r4
        if (dest > p && dest < end) {
 23fcc78:	d916      	bls.n	23fcca8 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x64>
 23fcc7a:	4550      	cmp	r0, sl
 23fcc7c:	d215      	bcs.n	23fccaa <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x66>
            --end;
 23fcc7e:	f1aa 0a18 	sub.w	sl, sl, #24
            dest += end - p - 1;
 23fcc82:	f1a4 0918 	sub.w	r9, r4, #24
 23fcc86:	ebaa 0404 	sub.w	r4, sl, r4
 23fcc8a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fcc8c:	45d1      	cmp	r9, sl
 23fcc8e:	d01d      	beq.n	23fcccc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x88>
                new(dest) T(std::move(*end));
 23fcc90:	b11c      	cbz	r4, 23fcc9a <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x56>
 23fcc92:	4651      	mov	r1, sl
 23fcc94:	4620      	mov	r0, r4
 23fcc96:	f7fe fb93 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
      { _M_reset(); }
 23fcc9a:	4650      	mov	r0, sl
 23fcc9c:	f7fd fb10 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for (; end != p; --end, --dest) {
 23fcca0:	f1aa 0a18 	sub.w	sl, sl, #24
 23fcca4:	3c18      	subs	r4, #24
 23fcca6:	e7f1      	b.n	23fcc8c <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x48>
        } else if (dest != p) {
 23fcca8:	d010      	beq.n	23fcccc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x88>
 23fccaa:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
 23fccac:	45a2      	cmp	sl, r4
 23fccae:	d00d      	beq.n	23fcccc <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x88>
                new(dest) T(std::move(*p));
 23fccb0:	f1b9 0f00 	cmp.w	r9, #0
 23fccb4:	d003      	beq.n	23fccbe <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x7a>
 23fccb6:	4621      	mov	r1, r4
 23fccb8:	4648      	mov	r0, r9
 23fccba:	f7fe fb81 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
 23fccbe:	4620      	mov	r0, r4
 23fccc0:	f7fd fafe 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
            for (; p != end; ++p, ++dest) {
 23fccc4:	3418      	adds	r4, #24
 23fccc6:	f109 0918 	add.w	r9, r9, #24
 23fccca:	e7ef      	b.n	23fccac <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0x68>
    ::free(ptr);
 23fcccc:	6828      	ldr	r0, [r5, #0]
 23fccce:	f7fe f9ab 	bl	23fb028 <free>
        capacity_ = n;
 23fccd2:	f8c5 8008 	str.w	r8, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fccd6:	f04f 0818 	mov.w	r8, #24
        data_ = d;
 23fccda:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fccdc:	e9d7 4300 	ldrd	r4, r3, [r7]
 23fcce0:	fb08 4803 	mla	r8, r8, r3, r4
        for (; it != end; ++it, ++dest) {
 23fcce4:	45a0      	cmp	r8, r4
 23fcce6:	d006      	beq.n	23fccf6 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0xb2>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23fcce8:	4621      	mov	r1, r4
 23fccea:	4630      	mov	r0, r6
 23fccec:	f7ff ff80 	bl	23fcbf0 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
 23fccf0:	3418      	adds	r4, #24
 23fccf2:	3618      	adds	r6, #24
 23fccf4:	e7f6      	b.n	23fcce4 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_+0xa0>
        size_ = vector.size_;
 23fccf6:	687b      	ldr	r3, [r7, #4]
 23fccf8:	606b      	str	r3, [r5, #4]
}
 23fccfa:	4628      	mov	r0, r5
 23fccfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

023fcd00 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj9EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fcd00:	b508      	push	{r3, lr}
        ::new (__storage)
 23fcd02:	6800      	ldr	r0, [r0, #0]
 23fcd04:	f7ff ff9e 	bl	23fcc44 <_ZN5spark6VectorIN8particle7VariantENS_16DefaultAllocatorEEC1ERKS4_>
      }
 23fcd08:	bd08      	pop	{r3, pc}

023fcd0a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcd0a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
 23fcd0e:	2300      	movs	r3, #0
 23fcd10:	e9c0 3300 	strd	r3, r3, [r0]
 23fcd14:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcd16:	f8d1 9004 	ldr.w	r9, [r1, #4]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcd1a:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcd1c:	4599      	cmp	r9, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 23fcd1e:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 23fcd20:	dd65      	ble.n	23fcdee <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xe4>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fcd22:	f04f 0a28 	mov.w	sl, #40	; 0x28
    return ::malloc(size);
 23fcd26:	fb0a f009 	mul.w	r0, sl, r9
 23fcd2a:	f7fe f96f 	bl	23fb00c <malloc>
            if (!d) {
 23fcd2e:	4605      	mov	r5, r0
 23fcd30:	2800      	cmp	r0, #0
 23fcd32:	d05c      	beq.n	23fcdee <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xe4>
            move(d, data_, data_ + size_);
 23fcd34:	e9d7 4600 	ldrd	r4, r6, [r7]
        if (dest > p && dest < end) {
 23fcd38:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
 23fcd3a:	fb0a 4606 	mla	r6, sl, r6, r4
        if (dest > p && dest < end) {
 23fcd3e:	d91d      	bls.n	23fcd7c <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x72>
 23fcd40:	42b0      	cmp	r0, r6
 23fcd42:	d21c      	bcs.n	23fcd7e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x74>
            --end;
 23fcd44:	3e28      	subs	r6, #40	; 0x28
            dest += end - p - 1;
 23fcd46:	f1a4 0a28 	sub.w	sl, r4, #40	; 0x28
 23fcd4a:	1b34      	subs	r4, r6, r4
 23fcd4c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 23fcd4e:	45b2      	cmp	sl, r6
 23fcd50:	d030      	beq.n	23fcdb4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xaa>
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 23fcd52:	f106 0b10 	add.w	fp, r6, #16
                new(dest) T(std::move(*end));
 23fcd56:	b144      	cbz	r4, 23fcd6a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x60>
	: first(__p.first), second(__p.second) { }
#endif

#if __cplusplus >= 201103L
      constexpr pair(const pair&) = default;	///< Copy constructor
      constexpr pair(pair&&) = default;		///< Move constructor
 23fcd58:	4631      	mov	r1, r6
 23fcd5a:	4620      	mov	r0, r4
 23fcd5c:	f001 fb0f 	bl	23fe37e <_ZN6StringC1ERKS_>
 23fcd60:	4659      	mov	r1, fp
 23fcd62:	f104 0010 	add.w	r0, r4, #16
 23fcd66:	f7fe fb2b 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
      { _M_reset(); }
 23fcd6a:	4658      	mov	r0, fp
 23fcd6c:	f7fd faa8 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
 23fcd70:	4630      	mov	r0, r6
 23fcd72:	f001 fa53 	bl	23fe21c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fcd76:	3e28      	subs	r6, #40	; 0x28
 23fcd78:	3c28      	subs	r4, #40	; 0x28
 23fcd7a:	e7e8      	b.n	23fcd4e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x44>
        } else if (dest != p) {
 23fcd7c:	d01a      	beq.n	23fcdb4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xaa>
 23fcd7e:	46aa      	mov	sl, r5
            for (; p != end; ++p, ++dest) {
 23fcd80:	42a6      	cmp	r6, r4
 23fcd82:	d017      	beq.n	23fcdb4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xaa>
 23fcd84:	f104 0b10 	add.w	fp, r4, #16
                new(dest) T(std::move(*p));
 23fcd88:	f1ba 0f00 	cmp.w	sl, #0
 23fcd8c:	d008      	beq.n	23fcda0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x96>
      constexpr pair(pair&&) = default;		///< Move constructor
 23fcd8e:	4621      	mov	r1, r4
 23fcd90:	4650      	mov	r0, sl
 23fcd92:	f001 faf4 	bl	23fe37e <_ZN6StringC1ERKS_>
 23fcd96:	4659      	mov	r1, fp
 23fcd98:	f10a 0010 	add.w	r0, sl, #16
 23fcd9c:	f7fe fb10 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
 23fcda0:	4658      	mov	r0, fp
 23fcda2:	f7fd fa8d 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
 23fcda6:	4620      	mov	r0, r4
 23fcda8:	f001 fa38 	bl	23fe21c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fcdac:	3428      	adds	r4, #40	; 0x28
 23fcdae:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
 23fcdb2:	e7e5      	b.n	23fcd80 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0x76>
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fcdb4:	2628      	movs	r6, #40	; 0x28
    ::free(ptr);
 23fcdb6:	6838      	ldr	r0, [r7, #0]
 23fcdb8:	f7fe f936 	bl	23fb028 <free>
        data_ = d;
 23fcdbc:	603d      	str	r5, [r7, #0]
        capacity_ = n;
 23fcdbe:	f8c7 9008 	str.w	r9, [r7, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
 23fcdc2:	e9d8 4300 	ldrd	r4, r3, [r8]
 23fcdc6:	fb06 4603 	mla	r6, r6, r3, r4
        for (; it != end; ++it, ++dest) {
 23fcdca:	42a6      	cmp	r6, r4
 23fcdcc:	d00c      	beq.n	23fcde8 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xde>
      constexpr pair(const pair&) = default;	///< Copy constructor
 23fcdce:	4621      	mov	r1, r4
 23fcdd0:	4628      	mov	r0, r5
 23fcdd2:	f001 fad4 	bl	23fe37e <_ZN6StringC1ERKS_>
      _Move_ctor_base(const _Move_ctor_base&) = default;
 23fcdd6:	f104 0110 	add.w	r1, r4, #16
 23fcdda:	f105 0010 	add.w	r0, r5, #16
 23fcdde:	f7ff ff07 	bl	23fcbf0 <_ZNSt8__detail9__variant15_Copy_ctor_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEEC1ERKSF_>
 23fcde2:	3428      	adds	r4, #40	; 0x28
 23fcde4:	3528      	adds	r5, #40	; 0x28
 23fcde6:	e7f0      	b.n	23fcdca <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_+0xc0>
        size_ = vector.size_;
 23fcde8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 23fcdec:	607b      	str	r3, [r7, #4]
}
 23fcdee:	4638      	mov	r0, r7
 23fcdf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fcdf4 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_21__deduce_visit_resultIN8particle3MapI6StringNS4_7VariantESt4lessIS6_EEEEEONS7_16ConvertToVisitorISA_vEERKSt7variantIJSt9monostatebijxydS6_NS4_6BufferEN5spark6VectorIS7_NSI_16DefaultAllocatorEEESA_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESE_SO_>:
        ok = true;
 23fcdf4:	2301      	movs	r3, #1
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fcdf6:	b510      	push	{r4, lr}
 23fcdf8:	4604      	mov	r4, r0
 23fcdfa:	700b      	strb	r3, [r1, #0]
            cmp_(map.cmp_) {
 23fcdfc:	4611      	mov	r1, r2
 23fcdfe:	f7ff ff84 	bl	23fcd0a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>
      }
 23fce02:	4620      	mov	r0, r4
 23fce04:	bd10      	pop	{r4, pc}

023fce06 <_ZNSt8__detail9__variant17__gen_vtable_implINS0_12_Multi_arrayIPFNS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS7_7VariantENS9_16DefaultAllocatorEEENS7_3MapIS6_SB_St4lessIS6_EEEERNS0_15_Copy_ctor_baseILb0EJS5_bijxydS6_S8_SD_SH_EEERKSJ_EEvOT0_OT1_EUlOT_E_RKSt7variantIJS5_bijxydS6_S8_SD_SH_EEEJEEESt16integer_sequenceIjJLj10EEEE14__visit_invokeESU_SY_>:
      __visit_invoke(_Visitor&& __visitor, _Variants... __vars)
 23fce06:	b508      	push	{r3, lr}
 23fce08:	6800      	ldr	r0, [r0, #0]
 23fce0a:	f7ff ff7e 	bl	23fcd0a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEEC1ERKS8_>
      }
 23fce0e:	bd08      	pop	{r3, pc}

023fce10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
 23fce10:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fce12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fce14:	4604      	mov	r4, r0
 23fce16:	460d      	mov	r5, r1
 23fce18:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fce1a:	d914      	bls.n	23fce46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 23fce1c:	4290      	cmp	r0, r2
 23fce1e:	d213      	bcs.n	23fce48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
 23fce20:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
 23fce24:	1a75      	subs	r5, r6, r1
 23fce26:	f1a1 0710 	sub.w	r7, r1, #16
 23fce2a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fce2c:	42b7      	cmp	r7, r6
 23fce2e:	d018      	beq.n	23fce62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 23fce30:	b11c      	cbz	r4, 23fce3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 23fce32:	4631      	mov	r1, r6
 23fce34:	4620      	mov	r0, r4
 23fce36:	f001 fa88 	bl	23fe34a <_ZN6StringC1EOS_>
                end->~T();
 23fce3a:	4630      	mov	r0, r6
 23fce3c:	f001 f9ee 	bl	23fe21c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
 23fce40:	3e10      	subs	r6, #16
 23fce42:	3c10      	subs	r4, #16
 23fce44:	e7f2      	b.n	23fce2c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
 23fce46:	d00c      	beq.n	23fce62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 23fce48:	42b5      	cmp	r5, r6
 23fce4a:	d00a      	beq.n	23fce62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 23fce4c:	b11c      	cbz	r4, 23fce56 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 23fce4e:	4629      	mov	r1, r5
 23fce50:	4620      	mov	r0, r4
 23fce52:	f001 fa7a 	bl	23fe34a <_ZN6StringC1EOS_>
                p->~T();
 23fce56:	4628      	mov	r0, r5
 23fce58:	f001 f9e0 	bl	23fe21c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
 23fce5c:	3510      	adds	r5, #16
 23fce5e:	3410      	adds	r4, #16
 23fce60:	e7f2      	b.n	23fce48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
 23fce62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fce64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
 23fce64:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
 23fce66:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fce68:	4605      	mov	r5, r0
        if (n > 0) {
 23fce6a:	dd11      	ble.n	23fce90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
 23fce6c:	0130      	lsls	r0, r6, #4
 23fce6e:	f7fe f8cd 	bl	23fb00c <malloc>
            if (!d) {
 23fce72:	4604      	mov	r4, r0
 23fce74:	b158      	cbz	r0, 23fce8e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
 23fce76:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fce7a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 23fce7e:	f7ff ffc7 	bl	23fce10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
 23fce82:	6828      	ldr	r0, [r5, #0]
 23fce84:	f7fe f8d0 	bl	23fb028 <free>
        return true;
 23fce88:	2001      	movs	r0, #1
        data_ = d;
 23fce8a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fce8c:	60ae      	str	r6, [r5, #8]
    }
 23fce8e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
 23fce90:	2400      	movs	r4, #0
 23fce92:	e7f6      	b.n	23fce82 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

023fce94 <_ZN5spark16JSONStreamWriter5writeEPKcj>:

inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
 23fce94:	b510      	push	{r4, lr}
 23fce96:	4604      	mov	r4, r0
    bytesWritten_ += strm_.write((const uint8_t*)data, size);
 23fce98:	6880      	ldr	r0, [r0, #8]
 23fce9a:	6803      	ldr	r3, [r0, #0]
 23fce9c:	68db      	ldr	r3, [r3, #12]
 23fce9e:	4798      	blx	r3
 23fcea0:	68e3      	ldr	r3, [r4, #12]
 23fcea2:	4418      	add	r0, r3
 23fcea4:	60e0      	str	r0, [r4, #12]
}
 23fcea6:	bd10      	pop	{r4, pc}

023fcea8 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
 23fcea8:	4770      	bx	lr

023fceaa <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 23fceaa:	4608      	mov	r0, r1
 23fceac:	b111      	cbz	r1, 23fceb4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 23fceae:	680b      	ldr	r3, [r1, #0]
 23fceb0:	685b      	ldr	r3, [r3, #4]
 23fceb2:	4718      	bx	r3
}
 23fceb4:	4770      	bx	lr

023fceb6 <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
 23fceb6:	4770      	bx	lr

023fceb8 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fceb8:	4770      	bx	lr

023fceba <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
 23fceba:	4770      	bx	lr

023fcebc <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
 23fcebc:	4770      	bx	lr

023fcebe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
 23fcebe:	b538      	push	{r3, r4, r5, lr}
 23fcec0:	4604      	mov	r4, r0
 23fcec2:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 23fcec4:	6800      	ldr	r0, [r0, #0]
 23fcec6:	212e      	movs	r1, #46	; 0x2e
 23fcec8:	f002 fa4f 	bl	23ff36a <strchrnul>
    size = s - category;
 23fcecc:	6823      	ldr	r3, [r4, #0]
 23fcece:	1ac3      	subs	r3, r0, r3
 23fced0:	602b      	str	r3, [r5, #0]
    if (size) {
 23fced2:	b123      	cbz	r3, 23fcede <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 23fced4:	7803      	ldrb	r3, [r0, #0]
 23fced6:	b103      	cbz	r3, 23fceda <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 23fced8:	3001      	adds	r0, #1
      __a = _GLIBCXX_MOVE(__b);
 23fceda:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fcedc:	6020      	str	r0, [r4, #0]
}
 23fcede:	4618      	mov	r0, r3
 23fcee0:	bd38      	pop	{r3, r4, r5, pc}

023fcee2 <_ZN5spark16JSONStreamWriterD0Ev>:
 23fcee2:	b510      	push	{r4, lr}
 23fcee4:	4604      	mov	r4, r0
 23fcee6:	2110      	movs	r1, #16
 23fcee8:	f7fc fe87 	bl	23f9bfa <_ZdlPvj>
 23fceec:	4620      	mov	r0, r4
 23fceee:	bd10      	pop	{r4, pc}

023fcef0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 23fcef0:	b510      	push	{r4, lr}
 23fcef2:	4604      	mov	r4, r0
 23fcef4:	2104      	movs	r1, #4
 23fcef6:	f7fc fe80 	bl	23f9bfa <_ZdlPvj>
 23fcefa:	4620      	mov	r0, r4
 23fcefc:	bd10      	pop	{r4, pc}

023fcefe <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
 23fcefe:	b510      	push	{r4, lr}
 23fcf00:	4604      	mov	r4, r0
 23fcf02:	2104      	movs	r1, #4
 23fcf04:	f7fc fe79 	bl	23f9bfa <_ZdlPvj>
 23fcf08:	4620      	mov	r0, r4
 23fcf0a:	bd10      	pop	{r4, pc}

023fcf0c <_ZN14RecursiveMutex4lockEv.isra.0>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 23fcf0c:	f7fd bce2 	b.w	23fa8d4 <os_mutex_recursive_lock>

023fcf10 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
 23fcf10:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 23fcf12:	f7fc fe3f 	bl	23f9b94 <strcmp>
}
 23fcf16:	fab0 f080 	clz	r0, r0
 23fcf1a:	0940      	lsrs	r0, r0, #5
 23fcf1c:	bd08      	pop	{r3, pc}

023fcf1e <__tcf_1>:
 23fcf1e:	4770      	bx	lr

023fcf20 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 23fcf20:	b510      	push	{r4, lr}
 23fcf22:	460c      	mov	r4, r1
#if PLATFORM_ID != PLATFORM_GCC
    if (stream == &Serial) {
 23fcf24:	f001 fbfc 	bl	23fe720 <_Z16_fetch_usbserialv>
 23fcf28:	4284      	cmp	r4, r0
 23fcf2a:	d105      	bne.n	23fcf38 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x18>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 23fcf2c:	f001 fbf8 	bl	23fe720 <_Z16_fetch_usbserialv>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != PLATFORM_GCC
    OutputStreamFactory::destroyStream(stream);
}
 23fcf30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial.end();
 23fcf34:	f001 bbe8 	b.w	23fe708 <_ZN9USBSerial3endEv>
    if (stream == &Serial1) {
 23fcf38:	f002 f93c 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
 23fcf3c:	4284      	cmp	r4, r0
 23fcf3e:	d105      	bne.n	23fcf4c <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2c>
        Serial1.end();
 23fcf40:	f002 f938 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
}
 23fcf44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
 23fcf48:	f001 bb81 	b.w	23fe64e <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 23fcf4c:	b12c      	cbz	r4, 23fcf5a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3a>
 23fcf4e:	6823      	ldr	r3, [r4, #0]
 23fcf50:	4620      	mov	r0, r4
}
 23fcf52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fcf56:	685b      	ldr	r3, [r3, #4]
 23fcf58:	4718      	bx	r3
 23fcf5a:	bd10      	pop	{r4, pc}

023fcf5c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcf5c:	680b      	ldr	r3, [r1, #0]
 23fcf5e:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fcf60:	684b      	ldr	r3, [r1, #4]
 23fcf62:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fcf64:	b113      	cbz	r3, 23fcf6c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_+0x10>
    { ++_M_use_count; }
 23fcf66:	685a      	ldr	r2, [r3, #4]
 23fcf68:	3201      	adds	r2, #1
 23fcf6a:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fcf6c:	4770      	bx	lr

023fcf6e <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 23fcf6e:	b513      	push	{r0, r1, r4, lr}
 23fcf70:	4604      	mov	r4, r0
    return value(val, strlen(val));
 23fcf72:	4608      	mov	r0, r1
 23fcf74:	9101      	str	r1, [sp, #4]
 23fcf76:	f7fc fe17 	bl	23f9ba8 <strlen>
 23fcf7a:	4602      	mov	r2, r0
 23fcf7c:	4620      	mov	r0, r4
 23fcf7e:	9901      	ldr	r1, [sp, #4]
}
 23fcf80:	b002      	add	sp, #8
 23fcf82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
 23fcf86:	f7ff bdcd 	b.w	23fcb24 <_ZN5spark10JSONWriter5valueEPKcj>

023fcf8a <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
 23fcf8a:	b513      	push	{r0, r1, r4, lr}
 23fcf8c:	4604      	mov	r4, r0
    write(str, strlen(str));
 23fcf8e:	4608      	mov	r0, r1
 23fcf90:	9101      	str	r1, [sp, #4]
 23fcf92:	f7fc fe09 	bl	23f9ba8 <strlen>
 23fcf96:	4602      	mov	r2, r0
 23fcf98:	4620      	mov	r0, r4
 23fcf9a:	6823      	ldr	r3, [r4, #0]
 23fcf9c:	9901      	ldr	r1, [sp, #4]
 23fcf9e:	68db      	ldr	r3, [r3, #12]
}
 23fcfa0:	b002      	add	sp, #8
 23fcfa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
 23fcfa6:	4718      	bx	r3

023fcfa8 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
 23fcfa8:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
 23fcfaa:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
 23fcfac:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
 23fcfb0:	2201      	movs	r2, #1
 23fcfb2:	68db      	ldr	r3, [r3, #12]
 23fcfb4:	f10d 0107 	add.w	r1, sp, #7
 23fcfb8:	4798      	blx	r3
}
 23fcfba:	b003      	add	sp, #12
 23fcfbc:	f85d fb04 	ldr.w	pc, [sp], #4

023fcfc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fcfc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::ConstIterator spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
 23fcfc4:	f04f 0a14 	mov.w	sl, #20
 23fcfc8:	e9d0 8400 	ldrd	r8, r4, [r0]
 23fcfcc:	4617      	mov	r7, r2
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 23fcfce:	4645      	mov	r5, r8
 23fcfd0:	fb0a f404 	mul.w	r4, sl, r4
 23fcfd4:	9300      	str	r3, [sp, #0]
 23fcfd6:	4b17      	ldr	r3, [pc, #92]	; (23fd034 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fcfd8:	10a4      	asrs	r4, r4, #2
 23fcfda:	435c      	muls	r4, r3
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 23fcfdc:	2c00      	cmp	r4, #0
 23fcfde:	dd21      	ble.n	23fd024 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
	{
	  _DistanceType __half = __len >> 1;
 23fcfe0:	1066      	asrs	r6, r4, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
 23fcfe2:	fb0a f006 	mul.w	r0, sl, r6
 23fcfe6:	eb05 0900 	add.w	r9, r5, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 23fcfea:	f8b9 b004 	ldrh.w	fp, [r9, #4]
 23fcfee:	463a      	mov	r2, r7
 23fcff0:	455f      	cmp	r7, fp
 23fcff2:	bf28      	it	cs
 23fcff4:	465a      	movcs	r2, fp
 23fcff6:	5828      	ldr	r0, [r5, r0]
 23fcff8:	9101      	str	r1, [sp, #4]
 23fcffa:	f002 f9c8 	bl	23ff38e <strncmp>
                if (cmp == 0) {
 23fcffe:	2800      	cmp	r0, #0
 23fd000:	f04f 0301 	mov.w	r3, #1
 23fd004:	9901      	ldr	r1, [sp, #4]
 23fd006:	d10b      	bne.n	23fd020 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                    if (node.size == value.second) { // Lengths are equal
 23fd008:	455f      	cmp	r7, fp
 23fd00a:	d103      	bne.n	23fd014 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x54>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 23fd00c:	9a00      	ldr	r2, [sp, #0]
 23fd00e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 23fd010:	4634      	mov	r4, r6
 23fd012:	e7e3      	b.n	23fcfdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 23fd014:	d9fc      	bls.n	23fd010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 23fd016:	1ba6      	subs	r6, r4, r6
	      ++__first;
 23fd018:	f109 0514 	add.w	r5, r9, #20
	      __len = __len - __half - 1;
 23fd01c:	3e01      	subs	r6, #1
 23fd01e:	e7f7      	b.n	23fd010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
	  if (__comp(__middle, __val))
 23fd020:	dbf9      	blt.n	23fd016 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
 23fd022:	e7f5      	b.n	23fd010 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
      return __last - __first;
 23fd024:	eba5 0508 	sub.w	r5, r5, r8
}
 23fd028:	4802      	ldr	r0, [pc, #8]	; (23fd034 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x74>)
 23fd02a:	10ad      	asrs	r5, r5, #2
 23fd02c:	4368      	muls	r0, r5
 23fd02e:	b003      	add	sp, #12
 23fd030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fd034:	cccccccd 	.word	0xcccccccd

023fd038 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd038:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
 23fd03a:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
 23fd03c:	7e05      	ldrb	r5, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
 23fd03e:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
 23fd040:	b303      	cbz	r3, 23fd084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
 23fd042:	b1f9      	cbz	r1, 23fd084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
        size_t size = 0; // Name length
 23fd044:	2600      	movs	r6, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 23fd046:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
 23fd04a:	9603      	str	r6, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
 23fd04c:	a903      	add	r1, sp, #12
 23fd04e:	a801      	add	r0, sp, #4
 23fd050:	f7ff ff35 	bl	23fcebe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd054:	4601      	mov	r1, r0
 23fd056:	b1a8      	cbz	r0, 23fd084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd058:	f10d 030b 	add.w	r3, sp, #11
 23fd05c:	4620      	mov	r0, r4
 23fd05e:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
 23fd060:	f88d 600b 	strb.w	r6, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd064:	f7ff ffac 	bl	23fcfc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 23fd068:	f89d 300b 	ldrb.w	r3, [sp, #11]
 23fd06c:	b153      	cbz	r3, 23fd084 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4c>
    return data_[i];
 23fd06e:	6823      	ldr	r3, [r4, #0]
 23fd070:	2414      	movs	r4, #20
 23fd072:	fb04 3400 	mla	r4, r4, r0, r3
            if (node.level >= 0) {
 23fd076:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
            pNodes = &node.nodes;
 23fd07a:	3408      	adds	r4, #8
            if (node.level >= 0) {
 23fd07c:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 23fd07e:	bfa8      	it	ge
 23fd080:	b2dd      	uxtbge	r5, r3
        while ((name = nextSubcategoryName(category, size))) {
 23fd082:	e7e3      	b.n	23fd04c <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
 23fd084:	4628      	mov	r0, r5
 23fd086:	b004      	add	sp, #16
 23fd088:	bd70      	pop	{r4, r5, r6, pc}

023fd08a <_ZN5spark16StreamLogHandler6printfEPKcz>:
void spark::StreamLogHandler::printf(const char *fmt, ...) {
 23fd08a:	b40e      	push	{r1, r2, r3}
 23fd08c:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd08e:	b08c      	sub	sp, #48	; 0x30
 23fd090:	af00      	add	r7, sp, #0
 23fd092:	f107 0544 	add.w	r5, r7, #68	; 0x44
 23fd096:	f855 2b04 	ldr.w	r2, [r5], #4
 23fd09a:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd09c:	462b      	mov	r3, r5
 23fd09e:	2120      	movs	r1, #32
 23fd0a0:	f107 0010 	add.w	r0, r7, #16
 23fd0a4:	607a      	str	r2, [r7, #4]
    va_start(args, fmt);
 23fd0a6:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd0a8:	f7fd ffe8 	bl	23fb07c <vsnprintf>
    if ((size_t)n >= sizeof(buf)) {
 23fd0ac:	281f      	cmp	r0, #31
 23fd0ae:	687a      	ldr	r2, [r7, #4]
 23fd0b0:	d91a      	bls.n	23fd0e8 <_ZN5spark16StreamLogHandler6printfEPKcz+0x5e>
        char buf[n + 1]; // Use a larger buffer
 23fd0b2:	f100 0308 	add.w	r3, r0, #8
 23fd0b6:	f023 0307 	bic.w	r3, r3, #7
        }
 23fd0ba:	466e      	mov	r6, sp
        char buf[n + 1]; // Use a larger buffer
 23fd0bc:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd0c0:	1c41      	adds	r1, r0, #1
 23fd0c2:	462b      	mov	r3, r5
 23fd0c4:	4668      	mov	r0, sp
        va_start(args, fmt);
 23fd0c6:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 23fd0c8:	f7fd ffd8 	bl	23fb07c <vsnprintf>
        if (n > 0) {
 23fd0cc:	1e02      	subs	r2, r0, #0
 23fd0ce:	dd04      	ble.n	23fd0da <_ZN5spark16StreamLogHandler6printfEPKcz+0x50>
            write(buf, n);
 23fd0d0:	6823      	ldr	r3, [r4, #0]
 23fd0d2:	4669      	mov	r1, sp
 23fd0d4:	4620      	mov	r0, r4
 23fd0d6:	68db      	ldr	r3, [r3, #12]
 23fd0d8:	4798      	blx	r3
 23fd0da:	46b5      	mov	sp, r6
}
 23fd0dc:	3730      	adds	r7, #48	; 0x30
 23fd0de:	46bd      	mov	sp, r7
 23fd0e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 23fd0e4:	b003      	add	sp, #12
 23fd0e6:	4770      	bx	lr
    } else if (n > 0) {
 23fd0e8:	2800      	cmp	r0, #0
 23fd0ea:	d0f7      	beq.n	23fd0dc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>
        write(buf, n);
 23fd0ec:	6823      	ldr	r3, [r4, #0]
 23fd0ee:	4602      	mov	r2, r0
 23fd0f0:	68db      	ldr	r3, [r3, #12]
 23fd0f2:	4620      	mov	r0, r4
 23fd0f4:	f107 0110 	add.w	r1, r7, #16
 23fd0f8:	4798      	blx	r3
}
 23fd0fa:	e7ef      	b.n	23fd0dc <_ZN5spark16StreamLogHandler6printfEPKcz+0x52>

023fd0fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 23fd0fc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 23fd0fe:	4c08      	ldr	r4, [pc, #32]	; (23fd120 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x24>)
 23fd100:	e8d4 3f8f 	ldab	r3, [r4]
 23fd104:	07db      	lsls	r3, r3, #31
 23fd106:	d409      	bmi.n	23fd11c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd108:	4620      	mov	r0, r4
 23fd10a:	f7fe f80b 	bl	23fb124 <__cxa_guard_acquire>
 23fd10e:	b128      	cbz	r0, 23fd11c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x20>
 23fd110:	4620      	mov	r0, r4
 23fd112:	f7fe f815 	bl	23fb140 <__cxa_guard_release>
 23fd116:	4803      	ldr	r0, [pc, #12]	; (23fd124 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 23fd118:	f002 f8ad 	bl	23ff276 <atexit>
}
 23fd11c:	4802      	ldr	r0, [pc, #8]	; (23fd128 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 23fd11e:	bd10      	pop	{r4, pc}
 23fd120:	1007af30 	.word	0x1007af30
 23fd124:	023fceb7 	.word	0x023fceb7
 23fd128:	1007adfc 	.word	0x1007adfc

023fd12c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 23fd12c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 23fd12e:	4c08      	ldr	r4, [pc, #32]	; (23fd150 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x24>)
 23fd130:	e8d4 3f8f 	ldab	r3, [r4]
 23fd134:	07db      	lsls	r3, r3, #31
 23fd136:	d409      	bmi.n	23fd14c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd138:	4620      	mov	r0, r4
 23fd13a:	f7fd fff3 	bl	23fb124 <__cxa_guard_acquire>
 23fd13e:	b128      	cbz	r0, 23fd14c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x20>
 23fd140:	4620      	mov	r0, r4
 23fd142:	f7fd fffd 	bl	23fb140 <__cxa_guard_release>
 23fd146:	4803      	ldr	r0, [pc, #12]	; (23fd154 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 23fd148:	f002 f895 	bl	23ff276 <atexit>
    return &factory;
}
 23fd14c:	4802      	ldr	r0, [pc, #8]	; (23fd158 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 23fd14e:	bd10      	pop	{r4, pc}
 23fd150:	1007af34 	.word	0x1007af34
 23fd154:	023fcf1f 	.word	0x023fcf1f
 23fd158:	1007ae00 	.word	0x1007ae00

023fd15c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 23fd15c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
 23fd15e:	2500      	movs	r5, #0
 23fd160:	4604      	mov	r4, r0
 23fd162:	e9c0 5500 	strd	r5, r5, [r0]
 23fd166:	e9c0 5504 	strd	r5, r5, [r0, #16]
 23fd16a:	6085      	str	r5, [r0, #8]
 23fd16c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
 23fd16e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
 23fd172:	f7fd fb93 	bl	23fa89c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 23fd176:	f7ff ffc1 	bl	23fd0fc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 23fd17a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd17c:	f7ff ffd6 	bl	23fd12c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 23fd180:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 23fd182:	6220      	str	r0, [r4, #32]
}
 23fd184:	4620      	mov	r0, r4
 23fd186:	bd38      	pop	{r3, r4, r5, pc}

023fd188 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 23fd188:	b510      	push	{r4, lr}
    static LogManager mgr;
 23fd18a:	4c0a      	ldr	r4, [pc, #40]	; (23fd1b4 <_ZN5spark10LogManager8instanceEv+0x2c>)
 23fd18c:	e8d4 3f8f 	ldab	r3, [r4]
 23fd190:	07db      	lsls	r3, r3, #31
 23fd192:	d40c      	bmi.n	23fd1ae <_ZN5spark10LogManager8instanceEv+0x26>
 23fd194:	4620      	mov	r0, r4
 23fd196:	f7fd ffc5 	bl	23fb124 <__cxa_guard_acquire>
 23fd19a:	b140      	cbz	r0, 23fd1ae <_ZN5spark10LogManager8instanceEv+0x26>
 23fd19c:	4806      	ldr	r0, [pc, #24]	; (23fd1b8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd19e:	f7ff ffdd 	bl	23fd15c <_ZN5spark10LogManagerC1Ev>
 23fd1a2:	4620      	mov	r0, r4
 23fd1a4:	f7fd ffcc 	bl	23fb140 <__cxa_guard_release>
 23fd1a8:	4804      	ldr	r0, [pc, #16]	; (23fd1bc <_ZN5spark10LogManager8instanceEv+0x34>)
 23fd1aa:	f002 f864 	bl	23ff276 <atexit>
    return &mgr;
}
 23fd1ae:	4802      	ldr	r0, [pc, #8]	; (23fd1b8 <_ZN5spark10LogManager8instanceEv+0x30>)
 23fd1b0:	bd10      	pop	{r4, pc}
 23fd1b2:	bf00      	nop
 23fd1b4:	1007af2c 	.word	0x1007af2c
 23fd1b8:	1007af3c 	.word	0x1007af3c
 23fd1bc:	023fd6fd 	.word	0x023fd6fd

023fd1c0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 23fd1c0:	2300      	movs	r3, #0
 23fd1c2:	4a02      	ldr	r2, [pc, #8]	; (23fd1cc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 23fd1c4:	4902      	ldr	r1, [pc, #8]	; (23fd1d0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 23fd1c6:	4803      	ldr	r0, [pc, #12]	; (23fd1d4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 23fd1c8:	f7fd bd60 	b.w	23fac8c <log_set_callbacks>
 23fd1cc:	023fd4e5 	.word	0x023fd4e5
 23fd1d0:	023fd471 	.word	0x023fd471
 23fd1d4:	023fd3f1 	.word	0x023fd3f1

023fd1d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 23fd1d8:	2300      	movs	r3, #0
 23fd1da:	461a      	mov	r2, r3
 23fd1dc:	4619      	mov	r1, r3
 23fd1de:	4618      	mov	r0, r3
 23fd1e0:	f7fd bd54 	b.w	23fac8c <log_set_callbacks>

023fd1e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 23fd1e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd1e6:	4604      	mov	r4, r0
        JSONObjectIterator(value.t_, value.d_) {
 23fd1e8:	688d      	ldr	r5, [r1, #8]
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fd1ea:	4668      	mov	r0, sp
 23fd1ec:	f7ff feb6 	bl	23fcf5c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd1f0:	466a      	mov	r2, sp
 23fd1f2:	4629      	mov	r1, r5
 23fd1f4:	4620      	mov	r0, r4
 23fd1f6:	f7ff fb11 	bl	23fc81c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
 23fd1fa:	a801      	add	r0, sp, #4
 23fd1fc:	f7fd ffb1 	bl	23fb162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd200:	4620      	mov	r0, r4
 23fd202:	b003      	add	sp, #12
 23fd204:	bd30      	pop	{r4, r5, pc}

023fd206 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
 23fd206:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd208:	4604      	mov	r4, r0
    return JSONString(k_, d_);
 23fd20a:	68cd      	ldr	r5, [r1, #12]
 23fd20c:	4668      	mov	r0, sp
 23fd20e:	f7ff fea5 	bl	23fcf5c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd212:	466a      	mov	r2, sp
 23fd214:	4629      	mov	r1, r5
 23fd216:	4620      	mov	r0, r4
 23fd218:	f7ff fadc 	bl	23fc7d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd21c:	a801      	add	r0, sp, #4
 23fd21e:	f7fd ffa0 	bl	23fb162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd222:	4620      	mov	r0, r4
 23fd224:	b003      	add	sp, #12
 23fd226:	bd30      	pop	{r4, r5, pc}

023fd228 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
 23fd228:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd22a:	4604      	mov	r4, r0
    return JSONValue(v_, d_);
 23fd22c:	690d      	ldr	r5, [r1, #16]
 23fd22e:	4668      	mov	r0, sp
 23fd230:	f7ff fe94 	bl	23fcf5c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEC1ERKS5_>
 23fd234:	466a      	mov	r2, sp
 23fd236:	4629      	mov	r1, r5
 23fd238:	4620      	mov	r0, r4
 23fd23a:	f7ff fa74 	bl	23fc726 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
 23fd23e:	a801      	add	r0, sp, #4
 23fd240:	f7fd ff8f 	bl	23fb162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd244:	4620      	mov	r0, r4
 23fd246:	b003      	add	sp, #12
 23fd248:	bd30      	pop	{r4, r5, pc}
	...

023fd24c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 23fd24c:	b570      	push	{r4, r5, r6, lr}
 23fd24e:	b08a      	sub	sp, #40	; 0x28
 23fd250:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 23fd252:	4601      	mov	r1, r0
 23fd254:	a804      	add	r0, sp, #16
 23fd256:	f7ff ffc5 	bl	23fd1e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
 23fd25a:	4e14      	ldr	r6, [pc, #80]	; (23fd2ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
 23fd25c:	a804      	add	r0, sp, #16
 23fd25e:	f7ff faf5 	bl	23fc84c <_ZN5spark18JSONObjectIterator4nextEv>
 23fd262:	b1e8      	cbz	r0, 23fd2a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
 23fd264:	4668      	mov	r0, sp
 23fd266:	a904      	add	r1, sp, #16
 23fd268:	f7ff ffcd 	bl	23fd206 <_ZNK5spark18JSONObjectIterator4nameEv>
 23fd26c:	4631      	mov	r1, r6
 23fd26e:	9802      	ldr	r0, [sp, #8]
 23fd270:	f7ff fe4e 	bl	23fcf10 <_ZNK5spark10JSONStringeqEPKc.isra.0>
 23fd274:	4604      	mov	r4, r0
 23fd276:	b110      	cbz	r0, 23fd27e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
 23fd278:	1e2c      	subs	r4, r5, #0
 23fd27a:	bf18      	it	ne
 23fd27c:	2401      	movne	r4, #1
 23fd27e:	a801      	add	r0, sp, #4
 23fd280:	f7fd ff6f 	bl	23fb162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd284:	2c00      	cmp	r4, #0
 23fd286:	d0e9      	beq.n	23fd25c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
 23fd288:	4668      	mov	r0, sp
 23fd28a:	a904      	add	r1, sp, #16
 23fd28c:	f7ff ffcc 	bl	23fd228 <_ZNK5spark18JSONObjectIterator5valueEv>
 23fd290:	4668      	mov	r0, sp
 23fd292:	f7ff fa7e 	bl	23fc792 <_ZNK5spark9JSONValue5toIntEv>
 23fd296:	6028      	str	r0, [r5, #0]
 23fd298:	a801      	add	r0, sp, #4
 23fd29a:	f7fd ff62 	bl	23fb162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd29e:	e7dd      	b.n	23fd25c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
 23fd2a0:	a805      	add	r0, sp, #20
 23fd2a2:	f7fd ff5e 	bl	23fb162 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23fd2a6:	b00a      	add	sp, #40	; 0x28
 23fd2a8:	bd70      	pop	{r4, r5, r6, pc}
 23fd2aa:	bf00      	nop
 23fd2ac:	023ffc10 	.word	0x023ffc10

023fd2b0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd2b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd2b2:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
 23fd2b4:	4913      	ldr	r1, [pc, #76]	; (23fd304 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
 23fd2b6:	4620      	mov	r0, r4
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 23fd2b8:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
 23fd2ba:	f7fc fc6b 	bl	23f9b94 <strcmp>
 23fd2be:	b950      	cbnz	r0, 23fd2d6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x26>
        Serial.begin();
 23fd2c0:	f001 fa2e 	bl	23fe720 <_Z16_fetch_usbserialv>
 23fd2c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 23fd2c8:	f001 fa1a 	bl	23fe700 <_ZN9USBSerial5beginEl>
}
 23fd2cc:	b003      	add	sp, #12
 23fd2ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        return &Serial;
 23fd2d2:	f001 ba25 	b.w	23fe720 <_Z16_fetch_usbserialv>
    if (strcmp(type, "Serial1") == 0) {
 23fd2d6:	4620      	mov	r0, r4
 23fd2d8:	490b      	ldr	r1, [pc, #44]	; (23fd308 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
 23fd2da:	f7fc fc5b 	bl	23f9b94 <strcmp>
 23fd2de:	b978      	cbnz	r0, 23fd300 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>
        int baud = 9600;
 23fd2e0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
 23fd2e4:	a901      	add	r1, sp, #4
 23fd2e6:	4628      	mov	r0, r5
        int baud = 9600;
 23fd2e8:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
 23fd2ea:	f7ff ffaf 	bl	23fd24c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 23fd2ee:	f001 ff61 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
 23fd2f2:	9901      	ldr	r1, [sp, #4]
 23fd2f4:	f001 f9a8 	bl	23fe648 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 23fd2f8:	f001 ff5c 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
}
 23fd2fc:	b003      	add	sp, #12
 23fd2fe:	bd30      	pop	{r4, r5, pc}
    return nullptr;
 23fd300:	2000      	movs	r0, #0
 23fd302:	e7fb      	b.n	23fd2fc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
 23fd304:	023ffc15 	.word	0x023ffc15
 23fd308:	023ffc1c 	.word	0x023ffc1c

023fd30c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd30c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
 23fd30e:	2614      	movs	r6, #20
 23fd310:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
 23fd314:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
 23fd316:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd31a:	42ae      	cmp	r6, r5
 23fd31c:	d005      	beq.n	23fd32a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
 23fd31e:	f105 0008 	add.w	r0, r5, #8
 23fd322:	f7ff fff3 	bl	23fd30c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd326:	3514      	adds	r5, #20
 23fd328:	e7f7      	b.n	23fd31a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
 23fd32a:	6820      	ldr	r0, [r4, #0]
 23fd32c:	f7fd fe7c 	bl	23fb028 <free>
}
 23fd330:	4620      	mov	r0, r4
 23fd332:	bd70      	pop	{r4, r5, r6, pc}

023fd334 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
 23fd334:	b510      	push	{r4, lr}
 23fd336:	4604      	mov	r4, r0
 23fd338:	300c      	adds	r0, #12
 23fd33a:	f7ff ffe7 	bl	23fd30c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd33e:	4620      	mov	r0, r4
 23fd340:	f7fd ff66 	bl	23fb210 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd344:	4620      	mov	r0, r4
 23fd346:	bd10      	pop	{r4, pc}

023fd348 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
 23fd348:	b510      	push	{r4, lr}
 23fd34a:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
 23fd34c:	4b03      	ldr	r3, [pc, #12]	; (23fd35c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 23fd34e:	f840 3b04 	str.w	r3, [r0], #4
 23fd352:	f7ff ffef 	bl	23fd334 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
 23fd356:	4620      	mov	r0, r4
 23fd358:	bd10      	pop	{r4, pc}
 23fd35a:	bf00      	nop
 23fd35c:	023ff7a4 	.word	0x023ff7a4

023fd360 <_ZN5spark16StreamLogHandlerD0Ev>:
 23fd360:	b510      	push	{r4, lr}
 23fd362:	4604      	mov	r4, r0
 23fd364:	f7ff fff0 	bl	23fd348 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd368:	4620      	mov	r0, r4
 23fd36a:	2124      	movs	r1, #36	; 0x24
 23fd36c:	f7fc fc45 	bl	23f9bfa <_ZdlPvj>
 23fd370:	4620      	mov	r0, r4
 23fd372:	bd10      	pop	{r4, pc}

023fd374 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
 23fd374:	b510      	push	{r4, lr}
 23fd376:	4604      	mov	r4, r0
 23fd378:	4b02      	ldr	r3, [pc, #8]	; (23fd384 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 23fd37a:	6003      	str	r3, [r0, #0]
 23fd37c:	f7ff ffe4 	bl	23fd348 <_ZN5spark16StreamLogHandlerD1Ev>
 23fd380:	4620      	mov	r0, r4
 23fd382:	bd10      	pop	{r4, pc}
 23fd384:	023ffcb8 	.word	0x023ffcb8

023fd388 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 23fd388:	b510      	push	{r4, lr}
 23fd38a:	4604      	mov	r4, r0
 23fd38c:	f7ff fff2 	bl	23fd374 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 23fd390:	4620      	mov	r0, r4
 23fd392:	2124      	movs	r1, #36	; 0x24
 23fd394:	f7fc fc31 	bl	23f9bfa <_ZdlPvj>
 23fd398:	4620      	mov	r0, r4
 23fd39a:	bd10      	pop	{r4, pc}

023fd39c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>:
struct spark::detail::LogFilter::Node {
 23fd39c:	680a      	ldr	r2, [r1, #0]
 23fd39e:	b510      	push	{r4, lr}
 23fd3a0:	6002      	str	r2, [r0, #0]
 23fd3a2:	684a      	ldr	r2, [r1, #4]
 23fd3a4:	6042      	str	r2, [r0, #4]
        capacity_(0) {
 23fd3a6:	2200      	movs	r2, #0
 23fd3a8:	e9c0 2202 	strd	r2, r2, [r0, #8]
 23fd3ac:	6102      	str	r2, [r0, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd3ae:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd3b0:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd3b2:	6084      	str	r4, [r0, #8]
 23fd3b4:	68cc      	ldr	r4, [r1, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd3b6:	60ca      	str	r2, [r1, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd3b8:	60c4      	str	r4, [r0, #12]
 23fd3ba:	690c      	ldr	r4, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd3bc:	610a      	str	r2, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd3be:	6104      	str	r4, [r0, #16]
 23fd3c0:	bd10      	pop	{r4, pc}

023fd3c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
 23fd3c2:	2200      	movs	r2, #0
 23fd3c4:	e9c0 2200 	strd	r2, r2, [r0]
 23fd3c8:	6082      	str	r2, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 23fd3ca:	b510      	push	{r4, lr}
 23fd3cc:	680c      	ldr	r4, [r1, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd3ce:	600a      	str	r2, [r1, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd3d0:	6004      	str	r4, [r0, #0]
 23fd3d2:	684c      	ldr	r4, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd3d4:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd3d6:	6044      	str	r4, [r0, #4]
 23fd3d8:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd3da:	608a      	str	r2, [r1, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fd3dc:	6084      	str	r4, [r0, #8]
}
 23fd3de:	bd10      	pop	{r4, pc}

023fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
 23fd3e0:	b510      	push	{r4, lr}
 23fd3e2:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 23fd3e4:	6803      	ldr	r3, [r0, #0]
 23fd3e6:	6818      	ldr	r0, [r3, #0]
 23fd3e8:	f7fd fa82 	bl	23fa8f0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 23fd3ec:	4620      	mov	r0, r4
 23fd3ee:	bd10      	pop	{r4, pc}

023fd3f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 23fd3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd3f4:	b087      	sub	sp, #28
 23fd3f6:	9303      	str	r3, [sp, #12]

#elif defined(CONFIG_PLATFORM_8721D)


static inline bool hal_interrupt_is_isr() {
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 23fd3f8:	4b1c      	ldr	r3, [pc, #112]	; (23fd46c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
 23fd3fa:	4680      	mov	r8, r0
 23fd3fc:	685b      	ldr	r3, [r3, #4]
 23fd3fe:	4689      	mov	r9, r1
 23fd400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd404:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (hal_interrupt_is_isr()) {
 23fd406:	b96b      	cbnz	r3, 23fd424 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
 23fd408:	f7ff febe 	bl	23fd188 <_ZN5spark10LogManager8instanceEv>
 23fd40c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd40e:	f100 0324 	add.w	r3, r0, #36	; 0x24
      { _M_device.lock(); }
 23fd412:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd414:	9305      	str	r3, [sp, #20]
      { _M_device.lock(); }
 23fd416:	f7ff fd79 	bl	23fcf0c <_ZN14RecursiveMutex4lockEv.isra.0>
        // prevent re-entry
        if (that->isActive()) {
 23fd41a:	7b23      	ldrb	r3, [r4, #12]
 23fd41c:	b12b      	cbz	r3, 23fd42a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
 23fd41e:	a805      	add	r0, sp, #20
 23fd420:	f7ff ffde 	bl	23fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 23fd424:	b007      	add	sp, #28
 23fd426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 23fd42a:	2301      	movs	r3, #1
            handler->message(msg, (LogLevel)level, category, *attr);
 23fd42c:	fa5f f989 	uxtb.w	r9, r9
    outputActive_ = outputActive;
 23fd430:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
 23fd432:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd436:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd43a:	45aa      	cmp	sl, r5
 23fd43c:	d012      	beq.n	23fd464 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
 23fd43e:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
 23fd442:	4631      	mov	r1, r6
 23fd444:	1d38      	adds	r0, r7, #4
 23fd446:	f7ff fdf7 	bl	23fd038 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd44a:	4581      	cmp	r9, r0
 23fd44c:	d3f5      	bcc.n	23fd43a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
 23fd44e:	9a03      	ldr	r2, [sp, #12]
 23fd450:	683b      	ldr	r3, [r7, #0]
 23fd452:	9200      	str	r2, [sp, #0]
 23fd454:	f8d3 b008 	ldr.w	fp, [r3, #8]
 23fd458:	464a      	mov	r2, r9
 23fd45a:	4633      	mov	r3, r6
 23fd45c:	4641      	mov	r1, r8
 23fd45e:	4638      	mov	r0, r7
 23fd460:	47d8      	blx	fp
 23fd462:	e7ea      	b.n	23fd43a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
 23fd464:	2300      	movs	r3, #0
 23fd466:	7323      	strb	r3, [r4, #12]
 23fd468:	e7d9      	b.n	23fd41e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
 23fd46a:	bf00      	nop
 23fd46c:	e000ed00 	.word	0xe000ed00

023fd470 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 23fd470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd474:	469b      	mov	fp, r3
 23fd476:	4b1a      	ldr	r3, [pc, #104]	; (23fd4e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
 23fd478:	4680      	mov	r8, r0
 23fd47a:	685b      	ldr	r3, [r3, #4]
 23fd47c:	4689      	mov	r9, r1
 23fd47e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 23fd482:	4616      	mov	r6, r2
    if (hal_interrupt_is_isr()) {
 23fd484:	b96b      	cbnz	r3, 23fd4a2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
 23fd486:	f7ff fe7f 	bl	23fd188 <_ZN5spark10LogManager8instanceEv>
 23fd48a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd48c:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd490:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd492:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd494:	f7ff fd3a 	bl	23fcf0c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (that->isActive()) {
 23fd498:	7b23      	ldrb	r3, [r4, #12]
 23fd49a:	b12b      	cbz	r3, 23fd4a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
 23fd49c:	a801      	add	r0, sp, #4
 23fd49e:	f7ff ff9f 	bl	23fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd4a2:	b003      	add	sp, #12
 23fd4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
 23fd4a8:	2301      	movs	r3, #1
    if (level >= filter_.level(category)) {
 23fd4aa:	b2f6      	uxtb	r6, r6
 23fd4ac:	7323      	strb	r3, [r4, #12]
 23fd4ae:	e9d4 5300 	ldrd	r5, r3, [r4]
 23fd4b2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd4b6:	4555      	cmp	r5, sl
 23fd4b8:	d00e      	beq.n	23fd4d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
 23fd4ba:	f855 7b04 	ldr.w	r7, [r5], #4
 23fd4be:	4659      	mov	r1, fp
 23fd4c0:	1d38      	adds	r0, r7, #4
 23fd4c2:	f7ff fdb9 	bl	23fd038 <_ZNK5spark6detail9LogFilter5levelEPKc>
 23fd4c6:	4286      	cmp	r6, r0
 23fd4c8:	d3f5      	bcc.n	23fd4b6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
 23fd4ca:	683b      	ldr	r3, [r7, #0]
 23fd4cc:	464a      	mov	r2, r9
 23fd4ce:	4641      	mov	r1, r8
 23fd4d0:	4638      	mov	r0, r7
 23fd4d2:	68db      	ldr	r3, [r3, #12]
 23fd4d4:	4798      	blx	r3
 23fd4d6:	e7ee      	b.n	23fd4b6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
 23fd4d8:	2300      	movs	r3, #0
 23fd4da:	7323      	strb	r3, [r4, #12]
 23fd4dc:	e7de      	b.n	23fd49c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
 23fd4de:	bf00      	nop
 23fd4e0:	e000ed00 	.word	0xe000ed00

023fd4e4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 23fd4e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fd4e8:	4b16      	ldr	r3, [pc, #88]	; (23fd544 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
 23fd4ea:	4605      	mov	r5, r0
 23fd4ec:	685b      	ldr	r3, [r3, #4]
 23fd4ee:	460f      	mov	r7, r1
 23fd4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (hal_interrupt_is_isr()) {
 23fd4f4:	bb1b      	cbnz	r3, 23fd53e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
 23fd4f6:	f7ff fe47 	bl	23fd188 <_ZN5spark10LogManager8instanceEv>
 23fd4fa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 23fd4fc:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd500:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd502:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd504:	f7ff fd02 	bl	23fcf0c <_ZN14RecursiveMutex4lockEv.isra.0>
 23fd508:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
 23fd50c:	2446      	movs	r4, #70	; 0x46
 23fd50e:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 23fd512:	45b0      	cmp	r8, r6
 23fd514:	d109      	bne.n	23fd52a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
 23fd516:	a801      	add	r0, sp, #4
 23fd518:	f7ff ff62 	bl	23fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
 23fd51c:	42a5      	cmp	r5, r4
 23fd51e:	bfb4      	ite	lt
 23fd520:	2000      	movlt	r0, #0
 23fd522:	2001      	movge	r0, #1
}
 23fd524:	b002      	add	sp, #8
 23fd526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
 23fd52a:	f856 0b04 	ldr.w	r0, [r6], #4
 23fd52e:	4639      	mov	r1, r7
 23fd530:	3004      	adds	r0, #4
 23fd532:	f7ff fd81 	bl	23fd038 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
 23fd536:	4284      	cmp	r4, r0
 23fd538:	bfa8      	it	ge
 23fd53a:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
 23fd53c:	e7e9      	b.n	23fd512 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
 23fd53e:	2000      	movs	r0, #0
 23fd540:	e7f0      	b.n	23fd524 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
 23fd542:	bf00      	nop
 23fd544:	e000ed00 	.word	0xe000ed00

023fd548 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd54a:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
 23fd54e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::append(T value) {
 23fd550:	4604      	mov	r4, r0
 23fd552:	460e      	mov	r6, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd554:	db0d      	blt.n	23fd572 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x2a>
 23fd556:	1c6f      	adds	r7, r5, #1
        if (n > 0) {
 23fd558:	2f00      	cmp	r7, #0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
 23fd55a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
 23fd55c:	dd04      	ble.n	23fd568 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x20>
    return ::realloc(ptr, size);
 23fd55e:	00b9      	lsls	r1, r7, #2
 23fd560:	f7fd fd70 	bl	23fb044 <realloc>
            if (!d) {
 23fd564:	b918      	cbnz	r0, 23fd56e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x26>
}
 23fd566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
 23fd568:	f7fd fd5e 	bl	23fb028 <free>
        T* d = nullptr;
 23fd56c:	2000      	movs	r0, #0
        data_ = d;
 23fd56e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 23fd570:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
 23fd572:	6827      	ldr	r7, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fd574:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fd576:	eb07 0185 	add.w	r1, r7, r5, lsl #2
    move(p + 1, p, data_ + size_);
 23fd57a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd57c:	eba2 0285 	sub.w	r2, r2, r5, lsl #2
 23fd580:	1d08      	adds	r0, r1, #4
 23fd582:	f001 fe94 	bl	23ff2ae <memmove>
    new(p) T(std::move(value));
 23fd586:	f847 6025 	str.w	r6, [r7, r5, lsl #2]
    ++size_;
 23fd58a:	6863      	ldr	r3, [r4, #4]
    return true;
 23fd58c:	2001      	movs	r0, #1
    ++size_;
 23fd58e:	3301      	adds	r3, #1
 23fd590:	6063      	str	r3, [r4, #4]
    return true;
 23fd592:	e7e8      	b.n	23fd566 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_+0x1e>

023fd594 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd594:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fd596:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd598:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd59c:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd59e:	9301      	str	r3, [sp, #4]
bool spark::LogManager::addHandler(LogHandler *handler) {
 23fd5a0:	460d      	mov	r5, r1
      { _M_device.lock(); }
 23fd5a2:	f7ff fcb3 	bl	23fcf0c <_ZN14RecursiveMutex4lockEv.isra.0>
    return find(data_, data_ + size_, value);
 23fd5a6:	e9d4 3200 	ldrd	r3, r2, [r4]
 23fd5aa:	eb03 0282 	add.w	r2, r3, r2, lsl #2
        for (; p != end; ++p) {
 23fd5ae:	4293      	cmp	r3, r2
 23fd5b0:	4619      	mov	r1, r3
 23fd5b2:	d00a      	beq.n	23fd5ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x36>
            if (*p == value) {
 23fd5b4:	6809      	ldr	r1, [r1, #0]
 23fd5b6:	3304      	adds	r3, #4
 23fd5b8:	42a9      	cmp	r1, r5
 23fd5ba:	d1f8      	bne.n	23fd5ae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
            return false;
 23fd5bc:	a801      	add	r0, sp, #4
 23fd5be:	f7ff ff0f 	bl	23fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd5c2:	2500      	movs	r5, #0
}
 23fd5c4:	4628      	mov	r0, r5
 23fd5c6:	b003      	add	sp, #12
 23fd5c8:	bd30      	pop	{r4, r5, pc}
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 23fd5ca:	4629      	mov	r1, r5
 23fd5cc:	4620      	mov	r0, r4
 23fd5ce:	f7ff ffbb 	bl	23fd548 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6appendES2_>
 23fd5d2:	4605      	mov	r5, r0
 23fd5d4:	2800      	cmp	r0, #0
 23fd5d6:	d0f1      	beq.n	23fd5bc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x28>
        if (activeHandlers_.size() == 1) {
 23fd5d8:	6863      	ldr	r3, [r4, #4]
 23fd5da:	2b01      	cmp	r3, #1
 23fd5dc:	d101      	bne.n	23fd5e2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
            setSystemCallbacks();
 23fd5de:	f7ff fdef 	bl	23fd1c0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd5e2:	a801      	add	r0, sp, #4
 23fd5e4:	f7ff fefc 	bl	23fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 23fd5e8:	e7ec      	b.n	23fd5c4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>

023fd5ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 23fd5ea:	460b      	mov	r3, r1
 23fd5ec:	b570      	push	{r4, r5, r6, lr}
 23fd5ee:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 23fd5f0:	e9d0 0200 	ldrd	r0, r2, [r0]
 23fd5f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
 23fd5f8:	4282      	cmp	r2, r0
 23fd5fa:	d00f      	beq.n	23fd61c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x32>
    move(p, p + 1, data_ + size_);
 23fd5fc:	4601      	mov	r1, r0
            if (*p == value) {
 23fd5fe:	681d      	ldr	r5, [r3, #0]
 23fd600:	f851 6b04 	ldr.w	r6, [r1], #4
 23fd604:	42ae      	cmp	r6, r5
 23fd606:	d107      	bne.n	23fd618 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
        ::memmove(dest, p, (end - p) * sizeof(T));
 23fd608:	1a52      	subs	r2, r2, r1
 23fd60a:	f001 fe50 	bl	23ff2ae <memmove>
    return true;
 23fd60e:	2001      	movs	r0, #1
    --size_;
 23fd610:	6863      	ldr	r3, [r4, #4]
 23fd612:	3b01      	subs	r3, #1
 23fd614:	6063      	str	r3, [r4, #4]
}
 23fd616:	bd70      	pop	{r4, r5, r6, pc}
    move(p, p + 1, data_ + size_);
 23fd618:	4608      	mov	r0, r1
 23fd61a:	e7ed      	b.n	23fd5f8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
 23fd61c:	2000      	movs	r0, #0
 23fd61e:	e7fa      	b.n	23fd616 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>

023fd620 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fd622:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 23fd624:	f100 0324 	add.w	r3, r0, #36	; 0x24
 23fd628:	6a40      	ldr	r0, [r0, #36]	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
 23fd62a:	9101      	str	r1, [sp, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd62c:	9303      	str	r3, [sp, #12]
      { _M_device.lock(); }
 23fd62e:	f7ff fc6d 	bl	23fcf0c <_ZN14RecursiveMutex4lockEv.isra.0>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 23fd632:	4620      	mov	r0, r4
 23fd634:	a901      	add	r1, sp, #4
 23fd636:	f7ff ffd8 	bl	23fd5ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 23fd63a:	b118      	cbz	r0, 23fd644 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
 23fd63c:	6863      	ldr	r3, [r4, #4]
 23fd63e:	b90b      	cbnz	r3, 23fd644 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
 23fd640:	f7ff fdca 	bl	23fd1d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd644:	a803      	add	r0, sp, #12
 23fd646:	f7ff fecb 	bl	23fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
 23fd64a:	b004      	add	sp, #16
 23fd64c:	bd10      	pop	{r4, pc}

023fd64e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
    return data_ + size_;
 23fd64e:	2318      	movs	r3, #24
void spark::LogManager::destroyFactoryHandlers() {
 23fd650:	b570      	push	{r4, r5, r6, lr}
 23fd652:	4604      	mov	r4, r0
 23fd654:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
 23fd658:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd65c:	42ae      	cmp	r6, r5
 23fd65e:	d015      	beq.n	23fd68c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 23fd660:	4620      	mov	r0, r4
 23fd662:	f105 0110 	add.w	r1, r5, #16
 23fd666:	f7ff ffc0 	bl	23fd5ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 23fd66a:	6863      	ldr	r3, [r4, #4]
 23fd66c:	b90b      	cbnz	r3, 23fd672 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 23fd66e:	f7ff fdb3 	bl	23fd1d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
 23fd672:	69e0      	ldr	r0, [r4, #28]
 23fd674:	6929      	ldr	r1, [r5, #16]
 23fd676:	6803      	ldr	r3, [r0, #0]
 23fd678:	68db      	ldr	r3, [r3, #12]
 23fd67a:	4798      	blx	r3
        if (h.stream) {
 23fd67c:	6969      	ldr	r1, [r5, #20]
 23fd67e:	b119      	cbz	r1, 23fd688 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 23fd680:	6a20      	ldr	r0, [r4, #32]
 23fd682:	6803      	ldr	r3, [r0, #0]
 23fd684:	68db      	ldr	r3, [r3, #12]
 23fd686:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
 23fd688:	3518      	adds	r5, #24
 23fd68a:	e7e7      	b.n	23fd65c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
 23fd68c:	2618      	movs	r6, #24
 23fd68e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd692:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd696:	42ae      	cmp	r6, r5
 23fd698:	d004      	beq.n	23fd6a4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
 23fd69a:	4628      	mov	r0, r5
 23fd69c:	f000 fdbe 	bl	23fe21c <_ZN6StringD1Ev>
 23fd6a0:	3518      	adds	r5, #24
 23fd6a2:	e7f8      	b.n	23fd696 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
 23fd6a4:	2300      	movs	r3, #0
 23fd6a6:	6163      	str	r3, [r4, #20]
}
 23fd6a8:	bd70      	pop	{r4, r5, r6, pc}

023fd6aa <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
 23fd6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fd6ac:	4604      	mov	r4, r0
    resetSystemCallbacks();
 23fd6ae:	f7ff fd93 	bl	23fd1d8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
 23fd6b2:	f104 0324 	add.w	r3, r4, #36	; 0x24
 23fd6b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 23fd6b8:	9301      	str	r3, [sp, #4]
      { _M_device.lock(); }
 23fd6ba:	f7ff fc27 	bl	23fcf0c <_ZN14RecursiveMutex4lockEv.isra.0>
         destroyFactoryHandlers();
 23fd6be:	4620      	mov	r0, r4
 23fd6c0:	f7ff ffc5 	bl	23fd64e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
 23fd6c4:	a801      	add	r0, sp, #4
 23fd6c6:	f7ff fe8b 	bl	23fd3e0 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
 23fd6ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fd6cc:	b108      	cbz	r0, 23fd6d2 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
 23fd6ce:	f7fd f8f3 	bl	23fa8b8 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
 23fd6d2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
 23fd6d6:	2618      	movs	r6, #24
 23fd6d8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
 23fd6dc:	42ae      	cmp	r6, r5
 23fd6de:	d004      	beq.n	23fd6ea <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
 23fd6e0:	4628      	mov	r0, r5
 23fd6e2:	f000 fd9b 	bl	23fe21c <_ZN6StringD1Ev>
 23fd6e6:	3518      	adds	r5, #24
 23fd6e8:	e7f8      	b.n	23fd6dc <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
 23fd6ea:	6920      	ldr	r0, [r4, #16]
 23fd6ec:	f7fd fc9c 	bl	23fb028 <free>
 23fd6f0:	6820      	ldr	r0, [r4, #0]
 23fd6f2:	f7fd fc99 	bl	23fb028 <free>
}
 23fd6f6:	4620      	mov	r0, r4
 23fd6f8:	b002      	add	sp, #8
 23fd6fa:	bd70      	pop	{r4, r5, r6, pc}

023fd6fc <__tcf_2>:
    static LogManager mgr;
 23fd6fc:	4801      	ldr	r0, [pc, #4]	; (23fd704 <__tcf_2+0x8>)
 23fd6fe:	f7ff bfd4 	b.w	23fd6aa <_ZN5spark10LogManagerD1Ev>
 23fd702:	bf00      	nop
 23fd704:	1007af3c 	.word	0x1007af3c

023fd708 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
 23fd708:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fd70a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fd70c:	4604      	mov	r4, r0
 23fd70e:	460d      	mov	r5, r1
 23fd710:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fd712:	d915      	bls.n	23fd740 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x38>
 23fd714:	4290      	cmp	r0, r2
 23fd716:	d214      	bcs.n	23fd742 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
            --end;
 23fd718:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
 23fd71c:	1a75      	subs	r5, r6, r1
 23fd71e:	f1a1 0714 	sub.w	r7, r1, #20
 23fd722:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fd724:	42b7      	cmp	r7, r6
 23fd726:	d01a      	beq.n	23fd75e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*end));
 23fd728:	b11c      	cbz	r4, 23fd732 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x2a>
 23fd72a:	4631      	mov	r1, r6
 23fd72c:	4620      	mov	r0, r4
 23fd72e:	f7ff fe35 	bl	23fd39c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
struct spark::detail::LogFilter::Node {
 23fd732:	f106 0008 	add.w	r0, r6, #8
 23fd736:	f7ff fde9 	bl	23fd30c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
 23fd73a:	3e14      	subs	r6, #20
 23fd73c:	3c14      	subs	r4, #20
 23fd73e:	e7f1      	b.n	23fd724 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1c>
        } else if (dest != p) {
 23fd740:	d00d      	beq.n	23fd75e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
            for (; p != end; ++p, ++dest) {
 23fd742:	42b5      	cmp	r5, r6
 23fd744:	d00b      	beq.n	23fd75e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
                new(dest) T(std::move(*p));
 23fd746:	b11c      	cbz	r4, 23fd750 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x48>
 23fd748:	4629      	mov	r1, r5
 23fd74a:	4620      	mov	r0, r4
 23fd74c:	f7ff fe26 	bl	23fd39c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
 23fd750:	f105 0008 	add.w	r0, r5, #8
 23fd754:	f7ff fdda 	bl	23fd30c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fd758:	3514      	adds	r5, #20
 23fd75a:	3414      	adds	r4, #20
 23fd75c:	e7f1      	b.n	23fd742 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x3a>
    }
 23fd75e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fd760 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fd764:	4690      	mov	r8, r2
        capacity_(0) {
 23fd766:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd768:	2246      	movs	r2, #70	; 0x46
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 23fd76a:	b095      	sub	sp, #84	; 0x54
 23fd76c:	9103      	str	r1, [sp, #12]
    return size_;
 23fd76e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 23fd772:	4604      	mov	r4, r0
    if (n > capacity_ && !realloc(n)) {
 23fd774:	4299      	cmp	r1, r3
        capacity_(0) {
 23fd776:	e9c0 3300 	strd	r3, r3, [r0]
 23fd77a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 23fd77e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 23fd782:	e9cd 3308 	strd	r3, r3, [sp, #32]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 23fd786:	7602      	strb	r2, [r0, #24]
 23fd788:	930a      	str	r3, [sp, #40]	; 0x28
    if (n > capacity_ && !realloc(n)) {
 23fd78a:	dc23      	bgt.n	23fd7d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
 23fd78c:	e9d8 5700 	ldrd	r5, r7, [r8]
 23fd790:	2314      	movs	r3, #20
 23fd792:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
 23fd796:	42af      	cmp	r7, r5
 23fd798:	d03b      	beq.n	23fd812 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
 23fd79a:	4629      	mov	r1, r5
 23fd79c:	a80b      	add	r0, sp, #44	; 0x2c
 23fd79e:	f000 fdd4 	bl	23fe34a <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
 23fd7a2:	a90b      	add	r1, sp, #44	; 0x2c
 23fd7a4:	a80f      	add	r0, sp, #60	; 0x3c
 23fd7a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 23fd7a8:	f000 fdcf 	bl	23fe34a <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd7ac:	e9dd 1309 	ldrd	r1, r3, [sp, #36]	; 0x24
 23fd7b0:	4299      	cmp	r1, r3
 23fd7b2:	da1b      	bge.n	23fd7ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
 23fd7b4:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 23fd7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    T* const p = data_ + i;
 23fd7b8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 23fd7bc:	4631      	mov	r1, r6
 23fd7be:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 23fd7c2:	f106 0010 	add.w	r0, r6, #16
 23fd7c6:	f7ff fb23 	bl	23fce10 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 23fd7ca:	b9ee      	cbnz	r6, 23fd808 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
 23fd7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fd7ce:	3301      	adds	r3, #1
 23fd7d0:	9309      	str	r3, [sp, #36]	; 0x24
    return true;
 23fd7d2:	e011      	b.n	23fd7f8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
 23fd7d4:	a808      	add	r0, sp, #32
 23fd7d6:	f7ff fb45 	bl	23fce64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd7da:	2800      	cmp	r0, #0
 23fd7dc:	d1d6      	bne.n	23fd78c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
        return;
 23fd7de:	a808      	add	r0, sp, #32
 23fd7e0:	f7fd fd16 	bl	23fb210 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 23fd7e4:	4620      	mov	r0, r4
 23fd7e6:	b015      	add	sp, #84	; 0x54
 23fd7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd7ec:	3101      	adds	r1, #1
 23fd7ee:	a808      	add	r0, sp, #32
 23fd7f0:	f7ff fb38 	bl	23fce64 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 23fd7f4:	2800      	cmp	r0, #0
 23fd7f6:	d1dd      	bne.n	23fd7b4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
 23fd7f8:	a80f      	add	r0, sp, #60	; 0x3c
 23fd7fa:	f000 fd0f 	bl	23fe21c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
 23fd7fe:	a80b      	add	r0, sp, #44	; 0x2c
 23fd800:	f000 fd0c 	bl	23fe21c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
 23fd804:	3514      	adds	r5, #20
 23fd806:	e7c6      	b.n	23fd796 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
 23fd808:	4630      	mov	r0, r6
 23fd80a:	a90f      	add	r1, sp, #60	; 0x3c
 23fd80c:	f000 fd9d 	bl	23fe34a <_ZN6StringC1EOS_>
 23fd810:	e7dc      	b.n	23fd7cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
 23fd812:	2600      	movs	r6, #0
 23fd814:	f04f 0914 	mov.w	r9, #20
 23fd818:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 23fd81c:	960d      	str	r6, [sp, #52]	; 0x34
    return data_[i];
 23fd81e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    for (int i = 0; i < cats.size(); ++i) {
 23fd822:	429e      	cmp	r6, r3
 23fd824:	da7c      	bge.n	23fd920 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c0>
    char operator [] (unsigned int index) const;
    char& operator [] (unsigned int index);
    void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
    void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
        {getBytes((unsigned char *)buf, bufsize, index);}
    const char * c_str() const { return buffer; }
 23fd826:	0133      	lsls	r3, r6, #4
 23fd828:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 23fd82a:	9306      	str	r3, [sp, #24]
        if (!category) {
 23fd82c:	b90b      	cbnz	r3, 23fd832 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
    for (int i = 0; i < cats.size(); ++i) {
 23fd82e:	3601      	adds	r6, #1
 23fd830:	e7f5      	b.n	23fd81e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xbe>
        size_t size = 0; // Name length
 23fd832:	2300      	movs	r3, #0
 23fd834:	9307      	str	r3, [sp, #28]
 23fd836:	fb09 f306 	mul.w	r3, r9, r6
        Vector<Node> *pNodes = &nodes; // Root nodes
 23fd83a:	ad0b      	add	r5, sp, #44	; 0x2c
 23fd83c:	9302      	str	r3, [sp, #8]
        while ((name = nextSubcategoryName(category, size))) {
 23fd83e:	a907      	add	r1, sp, #28
 23fd840:	a806      	add	r0, sp, #24
 23fd842:	f7ff fb3c 	bl	23fcebe <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 23fd846:	4682      	mov	sl, r0
 23fd848:	2800      	cmp	r0, #0
 23fd84a:	d0f0      	beq.n	23fd82e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xce>
            bool found = false;
 23fd84c:	f04f 0300 	mov.w	r3, #0
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd850:	4601      	mov	r1, r0
            bool found = false;
 23fd852:	f88d 3017 	strb.w	r3, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd856:	4628      	mov	r0, r5
 23fd858:	9a07      	ldr	r2, [sp, #28]
 23fd85a:	f10d 0317 	add.w	r3, sp, #23
 23fd85e:	f7ff fbaf 	bl	23fcfc0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd862:	f89d 7017 	ldrb.w	r7, [sp, #23]
            const int index = nodeIndex(*pNodes, name, size, found);
 23fd866:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd868:	2f00      	cmp	r7, #0
 23fd86a:	d14a      	bne.n	23fd902 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
 23fd86c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
        capacity_(0) {
 23fd870:	e9cd 7711 	strd	r7, r7, [sp, #68]	; 0x44
            level(-1) {
 23fd874:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 23fd878:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fd87c:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 23fd880:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 23fd884:	9713      	str	r7, [sp, #76]	; 0x4c
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fd886:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
 23fd88a:	4293      	cmp	r3, r2
 23fd88c:	db17      	blt.n	23fd8be <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15e>
 23fd88e:	f103 0a01 	add.w	sl, r3, #1
        if (n > 0) {
 23fd892:	f1ba 0f00 	cmp.w	sl, #0
 23fd896:	dd30      	ble.n	23fd8fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19a>
    return ::malloc(size);
 23fd898:	fb09 f00a 	mul.w	r0, r9, sl
 23fd89c:	f7fd fbb6 	bl	23fb00c <malloc>
            if (!d) {
 23fd8a0:	4683      	mov	fp, r0
 23fd8a2:	b360      	cbz	r0, 23fd8fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x19e>
            move(d, data_, data_ + size_);
 23fd8a4:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fd8a8:	fb09 1202 	mla	r2, r9, r2, r1
 23fd8ac:	f7ff ff2c 	bl	23fd708 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    ::free(ptr);
 23fd8b0:	6828      	ldr	r0, [r5, #0]
 23fd8b2:	f7fd fbb9 	bl	23fb028 <free>
        data_ = d;
 23fd8b6:	f8c5 b000 	str.w	fp, [r5]
        capacity_ = n;
 23fd8ba:	f8c5 a008 	str.w	sl, [r5, #8]
    T* const p = data_ + i;
 23fd8be:	682b      	ldr	r3, [r5, #0]
 23fd8c0:	9a01      	ldr	r2, [sp, #4]
 23fd8c2:	fb09 3a02 	mla	sl, r9, r2, r3
    move(p + 1, p, data_ + size_);
 23fd8c6:	686a      	ldr	r2, [r5, #4]
 23fd8c8:	4651      	mov	r1, sl
 23fd8ca:	fb09 3202 	mla	r2, r9, r2, r3
 23fd8ce:	f10a 0014 	add.w	r0, sl, #20
 23fd8d2:	f7ff ff19 	bl	23fd708 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 23fd8d6:	f1ba 0f00 	cmp.w	sl, #0
 23fd8da:	d003      	beq.n	23fd8e4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x184>
 23fd8dc:	4650      	mov	r0, sl
 23fd8de:	a90f      	add	r1, sp, #60	; 0x3c
 23fd8e0:	f7ff fd5c 	bl	23fd39c <_ZN5spark6detail9LogFilter4NodeC1EOS2_>
    ++size_;
 23fd8e4:	686b      	ldr	r3, [r5, #4]
 23fd8e6:	3301      	adds	r3, #1
 23fd8e8:	606b      	str	r3, [r5, #4]
struct spark::detail::LogFilter::Node {
 23fd8ea:	a811      	add	r0, sp, #68	; 0x44
 23fd8ec:	f7ff fd0e 	bl	23fd30c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd8f0:	b13f      	cbz	r7, 23fd902 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1a2>
    Vector<Node> nodes;
 23fd8f2:	a80b      	add	r0, sp, #44	; 0x2c
 23fd8f4:	f7ff fd0a 	bl	23fd30c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 23fd8f8:	e771      	b.n	23fd7de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
 23fd8fa:	46bb      	mov	fp, r7
 23fd8fc:	e7d8      	b.n	23fd8b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x150>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 23fd8fe:	2701      	movs	r7, #1
 23fd900:	e7f3      	b.n	23fd8ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x18a>
    return data_[i];
 23fd902:	9b01      	ldr	r3, [sp, #4]
 23fd904:	682d      	ldr	r5, [r5, #0]
 23fd906:	fb09 5503 	mla	r5, r9, r3, r5
            if (!*category) { // Check if it's last subcategory
 23fd90a:	9b06      	ldr	r3, [sp, #24]
 23fd90c:	781b      	ldrb	r3, [r3, #0]
 23fd90e:	b92b      	cbnz	r3, 23fd91c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
                node.level = filters.at(i).level_;
 23fd910:	f8d8 3000 	ldr.w	r3, [r8]
 23fd914:	9a02      	ldr	r2, [sp, #8]
 23fd916:	4413      	add	r3, r2
 23fd918:	7c1b      	ldrb	r3, [r3, #16]
 23fd91a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
 23fd91c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
 23fd91e:	e78e      	b.n	23fd83e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xde>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd920:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fd922:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd924:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fd926:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd928:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fd92a:	9209      	str	r2, [sp, #36]	; 0x24
      __a = _GLIBCXX_MOVE(__b);
 23fd92c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      __b = _GLIBCXX_MOVE(__tmp);
 23fd92e:	930a      	str	r3, [sp, #40]	; 0x28
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd930:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
 23fd932:	60a2      	str	r2, [r4, #8]
 23fd934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
      __b = _GLIBCXX_MOVE(__tmp);
 23fd936:	930b      	str	r3, [sp, #44]	; 0x2c
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd938:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fd93a:	60e2      	str	r2, [r4, #12]
 23fd93c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
 23fd93e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fd940:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fd942:	6122      	str	r2, [r4, #16]
 23fd944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
 23fd946:	930d      	str	r3, [sp, #52]	; 0x34
    level_ = level;
 23fd948:	9b03      	ldr	r3, [sp, #12]
 23fd94a:	9108      	str	r1, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 23fd94c:	6162      	str	r2, [r4, #20]
 23fd94e:	7623      	strb	r3, [r4, #24]
 23fd950:	e7cf      	b.n	23fd8f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x192>
	...

023fd954 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd954:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd956:	4604      	mov	r4, r0
        filter_(level, filters) {
 23fd958:	4626      	mov	r6, r4
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
 23fd95a:	4617      	mov	r7, r2
 23fd95c:	b087      	sub	sp, #28
 23fd95e:	460d      	mov	r5, r1
        stream_(&stream) {
 23fd960:	4668      	mov	r0, sp
 23fd962:	4619      	mov	r1, r3
 23fd964:	f7fc fd16 	bl	23fa394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
 23fd968:	4b0b      	ldr	r3, [pc, #44]	; (23fd998 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x44>)
 23fd96a:	4669      	mov	r1, sp
 23fd96c:	f846 3b04 	str.w	r3, [r6], #4
 23fd970:	a803      	add	r0, sp, #12
 23fd972:	f7fc fd0f 	bl	23fa394 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 23fd976:	4639      	mov	r1, r7
 23fd978:	aa03      	add	r2, sp, #12
 23fd97a:	4630      	mov	r0, r6
 23fd97c:	f7ff fef0 	bl	23fd760 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd980:	a803      	add	r0, sp, #12
 23fd982:	f7fc fc89 	bl	23fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
 23fd986:	4668      	mov	r0, sp
 23fd988:	f7fc fc86 	bl	23fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 23fd98c:	4620      	mov	r0, r4
        stream_(&stream) {
 23fd98e:	4b03      	ldr	r3, [pc, #12]	; (23fd99c <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x48>)
 23fd990:	6225      	str	r5, [r4, #32]
 23fd992:	6023      	str	r3, [r4, #0]
}
 23fd994:	b007      	add	sp, #28
 23fd996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 23fd998:	023ff7a4 	.word	0x023ff7a4
 23fd99c:	023ffca0 	.word	0x023ffca0

023fd9a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
 23fd9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd9a2:	460f      	mov	r7, r1
 23fd9a4:	b085      	sub	sp, #20
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd9a6:	4638      	mov	r0, r7
 23fd9a8:	491c      	ldr	r1, [pc, #112]	; (23fda1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x7c>)
            Print *stream, const JSONValue &params) {
 23fd9aa:	4616      	mov	r6, r2
 23fd9ac:	461d      	mov	r5, r3
 23fd9ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 23fd9b0:	f7fc f8f0 	bl	23f9b94 <strcmp>
 23fd9b4:	b9c0      	cbnz	r0, 23fd9e8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x48>
        if (!stream) {
 23fd9b6:	b1a4      	cbz	r4, 23fd9e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 23fd9b8:	4629      	mov	r1, r5
 23fd9ba:	a801      	add	r0, sp, #4
 23fd9bc:	f7ff fd01 	bl	23fd3c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd9c0:	2024      	movs	r0, #36	; 0x24
 23fd9c2:	4917      	ldr	r1, [pc, #92]	; (23fda20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fd9c4:	f001 fc50 	bl	23ff268 <_ZnwjRKSt9nothrow_t>
 23fd9c8:	4605      	mov	r5, r0
 23fd9ca:	b130      	cbz	r0, 23fd9da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
    using StreamLogHandler::StreamLogHandler;
 23fd9cc:	ab01      	add	r3, sp, #4
 23fd9ce:	4632      	mov	r2, r6
 23fd9d0:	4621      	mov	r1, r4
 23fd9d2:	f7ff ffbf 	bl	23fd954 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fd9d6:	4b13      	ldr	r3, [pc, #76]	; (23fda24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x84>)
 23fd9d8:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd9da:	a801      	add	r0, sp, #4
 23fd9dc:	f7fc fc5c 	bl	23fa298 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 23fd9e0:	462c      	mov	r4, r5
}
 23fd9e2:	4620      	mov	r0, r4
 23fd9e4:	b005      	add	sp, #20
 23fd9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 23fd9e8:	4638      	mov	r0, r7
 23fd9ea:	490f      	ldr	r1, [pc, #60]	; (23fda28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x88>)
 23fd9ec:	f7fc f8d2 	bl	23f9b94 <strcmp>
 23fd9f0:	b990      	cbnz	r0, 23fda18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x78>
        if (!stream) {
 23fd9f2:	2c00      	cmp	r4, #0
 23fd9f4:	d0f5      	beq.n	23fd9e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 23fd9f6:	4629      	mov	r1, r5
 23fd9f8:	a801      	add	r0, sp, #4
 23fd9fa:	f7ff fce2 	bl	23fd3c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 23fd9fe:	2024      	movs	r0, #36	; 0x24
 23fda00:	4907      	ldr	r1, [pc, #28]	; (23fda20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x80>)
 23fda02:	f001 fc31 	bl	23ff268 <_ZnwjRKSt9nothrow_t>
 23fda06:	4605      	mov	r5, r0
 23fda08:	2800      	cmp	r0, #0
 23fda0a:	d0e6      	beq.n	23fd9da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
 23fda0c:	4632      	mov	r2, r6
 23fda0e:	4621      	mov	r1, r4
 23fda10:	ab01      	add	r3, sp, #4
 23fda12:	f7ff ff9f 	bl	23fd954 <_ZN5spark16StreamLogHandlerC1ER5Print8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 23fda16:	e7e0      	b.n	23fd9da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x3a>
            return nullptr; // Output stream is not specified
 23fda18:	2400      	movs	r4, #0
 23fda1a:	e7e2      	b.n	23fd9e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x42>
 23fda1c:	023ffc24 	.word	0x023ffc24
 23fda20:	023ffe54 	.word	0x023ffe54
 23fda24:	023ffcb8 	.word	0x023ffcb8
 23fda28:	023ffc28 	.word	0x023ffc28

023fda2c <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
 23fda2c:	4b01      	ldr	r3, [pc, #4]	; (23fda34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fda2e:	4a02      	ldr	r2, [pc, #8]	; (23fda38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fda30:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fda32:	4770      	bx	lr
 23fda34:	1007af38 	.word	0x1007af38
 23fda38:	023ffc39 	.word	0x023ffc39

023fda3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fda3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fda40:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
 23fda42:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fda46:	4604      	mov	r4, r0
 23fda48:	460e      	mov	r6, r1
 23fda4a:	4617      	mov	r7, r2
 23fda4c:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
 23fda4e:	f000 fe67 	bl	23fe720 <_Z16_fetch_usbserialv>
 23fda52:	4581      	cmp	r9, r0
 23fda54:	d04d      	beq.n	23fdaf2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    if (attr.has_time) {
 23fda56:	792b      	ldrb	r3, [r5, #4]
 23fda58:	0719      	lsls	r1, r3, #28
 23fda5a:	d504      	bpl.n	23fda66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
 23fda5c:	4620      	mov	r0, r4
 23fda5e:	696a      	ldr	r2, [r5, #20]
 23fda60:	4954      	ldr	r1, [pc, #336]	; (23fdbb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
 23fda62:	f7ff fb12 	bl	23fd08a <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
 23fda66:	f1b8 0f00 	cmp.w	r8, #0
 23fda6a:	d00d      	beq.n	23fda88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
 23fda6c:	215b      	movs	r1, #91	; 0x5b
 23fda6e:	4620      	mov	r0, r4
 23fda70:	f7ff fa9a 	bl	23fcfa8 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 23fda74:	4641      	mov	r1, r8
 23fda76:	4620      	mov	r0, r4
 23fda78:	f7ff fa87 	bl	23fcf8a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 23fda7c:	6823      	ldr	r3, [r4, #0]
 23fda7e:	2202      	movs	r2, #2
 23fda80:	4620      	mov	r0, r4
 23fda82:	68db      	ldr	r3, [r3, #12]
 23fda84:	494c      	ldr	r1, [pc, #304]	; (23fdbb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
 23fda86:	4798      	blx	r3
    if (attr.has_file) {
 23fda88:	792b      	ldrb	r3, [r5, #4]
 23fda8a:	07da      	lsls	r2, r3, #31
 23fda8c:	d524      	bpl.n	23fdad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9c>
        s = extractFileName(attr.file); // Strip directory path
 23fda8e:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
 23fda92:	212f      	movs	r1, #47	; 0x2f
 23fda94:	4640      	mov	r0, r8
 23fda96:	f001 fcb2 	bl	23ff3fe <strrchr>
    if (s1) {
 23fda9a:	b108      	cbz	r0, 23fdaa0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
 23fda9c:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
 23fdaa0:	4641      	mov	r1, r8
 23fdaa2:	4620      	mov	r0, r4
 23fdaa4:	f7ff fa71 	bl	23fcf8a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 23fdaa8:	792b      	ldrb	r3, [r5, #4]
 23fdaaa:	079b      	lsls	r3, r3, #30
 23fdaac:	d508      	bpl.n	23fdac0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
 23fdaae:	213a      	movs	r1, #58	; 0x3a
 23fdab0:	4620      	mov	r0, r4
 23fdab2:	f7ff fa79 	bl	23fcfa8 <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
 23fdab6:	4620      	mov	r0, r4
 23fdab8:	68ea      	ldr	r2, [r5, #12]
 23fdaba:	4940      	ldr	r1, [pc, #256]	; (23fdbbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
 23fdabc:	f7ff fae5 	bl	23fd08a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
 23fdac0:	792a      	ldrb	r2, [r5, #4]
            write(", ", 2);
 23fdac2:	6823      	ldr	r3, [r4, #0]
        if (attr.has_function) {
 23fdac4:	f012 0f04 	tst.w	r2, #4
            write(": ", 2);
 23fdac8:	4620      	mov	r0, r4
            write(", ", 2);
 23fdaca:	f04f 0202 	mov.w	r2, #2
 23fdace:	68db      	ldr	r3, [r3, #12]
 23fdad0:	bf14      	ite	ne
 23fdad2:	493b      	ldrne	r1, [pc, #236]	; (23fdbc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(": ", 2);
 23fdad4:	493b      	ldreq	r1, [pc, #236]	; (23fdbc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdad6:	4798      	blx	r3
    if (attr.has_function) {
 23fdad8:	792b      	ldrb	r3, [r5, #4]
 23fdada:	0758      	lsls	r0, r3, #29
 23fdadc:	d51d      	bpl.n	23fdb1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xde>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdade:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdae0:	460b      	mov	r3, r1
 23fdae2:	461a      	mov	r2, r3
    for (; *s; ++s) {
 23fdae4:	f813 0b01 	ldrb.w	r0, [r3], #1
 23fdae8:	b160      	cbz	r0, 23fdb04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc8>
        if (*s == ' ') {
 23fdaea:	2820      	cmp	r0, #32
 23fdaec:	d108      	bne.n	23fdb00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc4>
            s1 = s + 1; // Skip return type
 23fdaee:	4619      	mov	r1, r3
 23fdaf0:	e7f7      	b.n	23fdae2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
    if (stream_ == &Serial && Network.listening()) {
 23fdaf2:	4835      	ldr	r0, [pc, #212]	; (23fdbc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 23fdaf4:	f000 f983 	bl	23fddfe <_ZN5spark12NetworkClass9listeningEv>
 23fdaf8:	2800      	cmp	r0, #0
 23fdafa:	d0ac      	beq.n	23fda56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
 23fdafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
 23fdb00:	2828      	cmp	r0, #40	; 0x28
 23fdb02:	d1ee      	bne.n	23fdae2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa6>
        write(s, n);
 23fdb04:	6823      	ldr	r3, [r4, #0]
 23fdb06:	1a52      	subs	r2, r2, r1
 23fdb08:	4620      	mov	r0, r4
 23fdb0a:	68db      	ldr	r3, [r3, #12]
 23fdb0c:	4798      	blx	r3
        write("(): ", 4);
 23fdb0e:	6823      	ldr	r3, [r4, #0]
 23fdb10:	2204      	movs	r2, #4
 23fdb12:	4620      	mov	r0, r4
 23fdb14:	68db      	ldr	r3, [r3, #12]
 23fdb16:	492d      	ldr	r1, [pc, #180]	; (23fdbcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 23fdb18:	4798      	blx	r3
    return log_level_name(level, nullptr);
 23fdb1a:	2100      	movs	r1, #0
 23fdb1c:	4638      	mov	r0, r7
 23fdb1e:	f7fd f8a7 	bl	23fac70 <log_level_name>
 23fdb22:	4601      	mov	r1, r0
    write(s);
 23fdb24:	4620      	mov	r0, r4
 23fdb26:	f7ff fa30 	bl	23fcf8a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 23fdb2a:	6823      	ldr	r3, [r4, #0]
 23fdb2c:	2202      	movs	r2, #2
 23fdb2e:	4620      	mov	r0, r4
 23fdb30:	68db      	ldr	r3, [r3, #12]
 23fdb32:	4924      	ldr	r1, [pc, #144]	; (23fdbc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 23fdb34:	4798      	blx	r3
    if (msg) {
 23fdb36:	b11e      	cbz	r6, 23fdb40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x104>
        write(msg);
 23fdb38:	4631      	mov	r1, r6
 23fdb3a:	4620      	mov	r0, r4
 23fdb3c:	f7ff fa25 	bl	23fcf8a <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
 23fdb40:	792b      	ldrb	r3, [r5, #4]
 23fdb42:	f013 0f30 	tst.w	r3, #48	; 0x30
 23fdb46:	d02c      	beq.n	23fdba2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
        write(" [", 2);
 23fdb48:	6823      	ldr	r3, [r4, #0]
 23fdb4a:	4921      	ldr	r1, [pc, #132]	; (23fdbd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 23fdb4c:	68db      	ldr	r3, [r3, #12]
 23fdb4e:	2202      	movs	r2, #2
 23fdb50:	4620      	mov	r0, r4
 23fdb52:	4798      	blx	r3
        if (attr.has_code) {
 23fdb54:	792b      	ldrb	r3, [r5, #4]
 23fdb56:	06d9      	lsls	r1, r3, #27
 23fdb58:	d50a      	bpl.n	23fdb70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x134>
            write("code = ", 7);
 23fdb5a:	6823      	ldr	r3, [r4, #0]
 23fdb5c:	2207      	movs	r2, #7
 23fdb5e:	4620      	mov	r0, r4
 23fdb60:	491c      	ldr	r1, [pc, #112]	; (23fdbd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 23fdb62:	68db      	ldr	r3, [r3, #12]
 23fdb64:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
 23fdb66:	4620      	mov	r0, r4
 23fdb68:	69aa      	ldr	r2, [r5, #24]
 23fdb6a:	491b      	ldr	r1, [pc, #108]	; (23fdbd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 23fdb6c:	f7ff fa8d 	bl	23fd08a <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
 23fdb70:	792b      	ldrb	r3, [r5, #4]
 23fdb72:	069a      	lsls	r2, r3, #26
 23fdb74:	d511      	bpl.n	23fdb9a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15e>
            if (attr.has_code) {
 23fdb76:	06db      	lsls	r3, r3, #27
 23fdb78:	d505      	bpl.n	23fdb86 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14a>
                write(", ", 2);
 23fdb7a:	6823      	ldr	r3, [r4, #0]
 23fdb7c:	2202      	movs	r2, #2
 23fdb7e:	4620      	mov	r0, r4
 23fdb80:	68db      	ldr	r3, [r3, #12]
 23fdb82:	490f      	ldr	r1, [pc, #60]	; (23fdbc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 23fdb84:	4798      	blx	r3
            write("details = ", 10);
 23fdb86:	6823      	ldr	r3, [r4, #0]
 23fdb88:	4620      	mov	r0, r4
 23fdb8a:	4914      	ldr	r1, [pc, #80]	; (23fdbdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 23fdb8c:	220a      	movs	r2, #10
 23fdb8e:	68db      	ldr	r3, [r3, #12]
 23fdb90:	4798      	blx	r3
            write(attr.details);
 23fdb92:	4620      	mov	r0, r4
 23fdb94:	69e9      	ldr	r1, [r5, #28]
 23fdb96:	f7ff f9f8 	bl	23fcf8a <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
 23fdb9a:	215d      	movs	r1, #93	; 0x5d
 23fdb9c:	4620      	mov	r0, r4
 23fdb9e:	f7ff fa03 	bl	23fcfa8 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
 23fdba2:	6823      	ldr	r3, [r4, #0]
 23fdba4:	4620      	mov	r0, r4
}
 23fdba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
 23fdbaa:	2202      	movs	r2, #2
 23fdbac:	68db      	ldr	r3, [r3, #12]
 23fdbae:	490c      	ldr	r1, [pc, #48]	; (23fdbe0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 23fdbb0:	4718      	bx	r3
 23fdbb2:	bf00      	nop
 23fdbb4:	023ffc3d 	.word	0x023ffc3d
 23fdbb8:	023ffc44 	.word	0x023ffc44
 23fdbbc:	023ffa7a 	.word	0x023ffa7a
 23fdbc0:	023ffc47 	.word	0x023ffc47
 23fdbc4:	023ffc4c 	.word	0x023ffc4c
 23fdbc8:	1007af64 	.word	0x1007af64
 23fdbcc:	023ffc4a 	.word	0x023ffc4a
 23fdbd0:	023ffc4f 	.word	0x023ffc4f
 23fdbd4:	023ffc52 	.word	0x023ffc52
 23fdbd8:	023ffc5a 	.word	0x023ffc5a
 23fdbdc:	023ffc5d 	.word	0x023ffc5d
 23fdbe0:	023ffc68 	.word	0x023ffc68

023fdbe4 <_ZN5spark16StreamLogHandler5writeEPKcj>:
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdbe8:	4604      	mov	r4, r0
    if (stream_ == &Serial && Network.listening()) {
 23fdbea:	6a07      	ldr	r7, [r0, #32]
void spark::StreamLogHandler::write(const char *data, size_t size) {
 23fdbec:	460d      	mov	r5, r1
 23fdbee:	4616      	mov	r6, r2
    if (stream_ == &Serial && Network.listening()) {
 23fdbf0:	f000 fd96 	bl	23fe720 <_Z16_fetch_usbserialv>
 23fdbf4:	4287      	cmp	r7, r0
 23fdbf6:	d007      	beq.n	23fdc08 <_ZN5spark16StreamLogHandler5writeEPKcj+0x24>
    stream_->write((const uint8_t*)data, size);
 23fdbf8:	6a20      	ldr	r0, [r4, #32]
 23fdbfa:	4632      	mov	r2, r6
 23fdbfc:	6803      	ldr	r3, [r0, #0]
 23fdbfe:	4629      	mov	r1, r5
}
 23fdc00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    stream_->write((const uint8_t*)data, size);
 23fdc04:	68db      	ldr	r3, [r3, #12]
 23fdc06:	4718      	bx	r3
    if (stream_ == &Serial && Network.listening()) {
 23fdc08:	4803      	ldr	r0, [pc, #12]	; (23fdc18 <_ZN5spark16StreamLogHandler5writeEPKcj+0x34>)
 23fdc0a:	f000 f8f8 	bl	23fddfe <_ZN5spark12NetworkClass9listeningEv>
 23fdc0e:	2800      	cmp	r0, #0
 23fdc10:	d0f2      	beq.n	23fdbf8 <_ZN5spark16StreamLogHandler5writeEPKcj+0x14>
}
 23fdc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fdc16:	bf00      	nop
 23fdc18:	1007af64 	.word	0x1007af64

023fdc1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 23fdc1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fdc20:	b085      	sub	sp, #20
    return stream_;
 23fdc22:	f8d0 9020 	ldr.w	r9, [r0, #32]
 23fdc26:	4605      	mov	r5, r0
 23fdc28:	460f      	mov	r7, r1
 23fdc2a:	4690      	mov	r8, r2
 23fdc2c:	461e      	mov	r6, r3
 23fdc2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (this->stream() == &Serial && Network.listening()) {
 23fdc30:	f000 fd76 	bl	23fe720 <_Z16_fetch_usbserialv>
 23fdc34:	4581      	cmp	r9, r0
 23fdc36:	d105      	bne.n	23fdc44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 23fdc38:	4849      	ldr	r0, [pc, #292]	; (23fdd60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
 23fdc3a:	f000 f8e0 	bl	23fddfe <_ZN5spark12NetworkClass9listeningEv>
 23fdc3e:	2800      	cmp	r0, #0
 23fdc40:	f040 808a 	bne.w	23fdd58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
        state_(BEGIN) {
 23fdc44:	f04f 0900 	mov.w	r9, #0
 23fdc48:	6a2b      	ldr	r3, [r5, #32]
        bytesWritten_(0) {
 23fdc4a:	4a46      	ldr	r2, [pc, #280]	; (23fdd64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
    json.beginObject();
 23fdc4c:	4668      	mov	r0, sp
 23fdc4e:	e9cd 3902 	strd	r3, r9, [sp, #8]
 23fdc52:	9200      	str	r2, [sp, #0]
        state_(BEGIN) {
 23fdc54:	f88d 9004 	strb.w	r9, [sp, #4]
 23fdc58:	f7fe fe36 	bl	23fc8c8 <_ZN5spark10JSONWriter11beginObjectEv>
    return log_level_name(level, nullptr);
 23fdc5c:	4649      	mov	r1, r9
 23fdc5e:	4640      	mov	r0, r8
 23fdc60:	f7fd f806 	bl	23fac70 <log_level_name>
 23fdc64:	4680      	mov	r8, r0
    json.name("l", 1).value(s);
 23fdc66:	4940      	ldr	r1, [pc, #256]	; (23fdd68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
 23fdc68:	2201      	movs	r2, #1
 23fdc6a:	4668      	mov	r0, sp
 23fdc6c:	f7fe ff4a 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdc70:	4641      	mov	r1, r8
 23fdc72:	f7ff f97c 	bl	23fcf6e <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
 23fdc76:	b13f      	cbz	r7, 23fdc88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6c>
        json.name("m", 1).value(msg);
 23fdc78:	493c      	ldr	r1, [pc, #240]	; (23fdd6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 23fdc7a:	2201      	movs	r2, #1
 23fdc7c:	4668      	mov	r0, sp
 23fdc7e:	f7fe ff41 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdc82:	4639      	mov	r1, r7
 23fdc84:	f7ff f973 	bl	23fcf6e <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
 23fdc88:	b13e      	cbz	r6, 23fdc9a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7e>
        json.name("c", 1).value(category);
 23fdc8a:	4939      	ldr	r1, [pc, #228]	; (23fdd70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 23fdc8c:	2201      	movs	r2, #1
 23fdc8e:	4668      	mov	r0, sp
 23fdc90:	f7fe ff38 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdc94:	4631      	mov	r1, r6
 23fdc96:	f7ff f96a 	bl	23fcf6e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
 23fdc9a:	7923      	ldrb	r3, [r4, #4]
 23fdc9c:	07df      	lsls	r7, r3, #31
 23fdc9e:	d50e      	bpl.n	23fdcbe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa2>
        s = extractFileName(attr.file); // Strip directory path
 23fdca0:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
 23fdca2:	212f      	movs	r1, #47	; 0x2f
 23fdca4:	4630      	mov	r0, r6
 23fdca6:	f001 fbaa 	bl	23ff3fe <strrchr>
    if (s1) {
 23fdcaa:	b100      	cbz	r0, 23fdcae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x92>
        return s1 + 1;
 23fdcac:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
 23fdcae:	4931      	ldr	r1, [pc, #196]	; (23fdd74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 23fdcb0:	2201      	movs	r2, #1
 23fdcb2:	4668      	mov	r0, sp
 23fdcb4:	f7fe ff26 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdcb8:	4631      	mov	r1, r6
 23fdcba:	f7ff f958 	bl	23fcf6e <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
 23fdcbe:	7923      	ldrb	r3, [r4, #4]
 23fdcc0:	079e      	lsls	r6, r3, #30
 23fdcc2:	d507      	bpl.n	23fdcd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
        json.name("ln", 2).value(attr.line);
 23fdcc4:	492c      	ldr	r1, [pc, #176]	; (23fdd78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 23fdcc6:	2202      	movs	r2, #2
 23fdcc8:	4668      	mov	r0, sp
 23fdcca:	f7fe ff1b 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdcce:	68e1      	ldr	r1, [r4, #12]
 23fdcd0:	f7fe fe1e 	bl	23fc910 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
 23fdcd4:	7923      	ldrb	r3, [r4, #4]
 23fdcd6:	0758      	lsls	r0, r3, #29
 23fdcd8:	d514      	bpl.n	23fdd04 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe8>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 23fdcda:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
 23fdcdc:	4633      	mov	r3, r6
 23fdcde:	461f      	mov	r7, r3
    for (; *s; ++s) {
 23fdce0:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fdce4:	b12a      	cbz	r2, 23fdcf2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd6>
        if (*s == ' ') {
 23fdce6:	2a20      	cmp	r2, #32
 23fdce8:	d101      	bne.n	23fdcee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd2>
            s1 = s + 1; // Skip return type
 23fdcea:	461e      	mov	r6, r3
 23fdcec:	e7f7      	b.n	23fdcde <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        } else if (*s == '(') {
 23fdcee:	2a28      	cmp	r2, #40	; 0x28
 23fdcf0:	d1f5      	bne.n	23fdcde <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
        json.name("fn", 2).value(s, n);
 23fdcf2:	2202      	movs	r2, #2
 23fdcf4:	4921      	ldr	r1, [pc, #132]	; (23fdd7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 23fdcf6:	4668      	mov	r0, sp
 23fdcf8:	f7fe ff04 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdcfc:	4631      	mov	r1, r6
 23fdcfe:	1bba      	subs	r2, r7, r6
 23fdd00:	f7fe ff10 	bl	23fcb24 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
 23fdd04:	7923      	ldrb	r3, [r4, #4]
 23fdd06:	0719      	lsls	r1, r3, #28
 23fdd08:	d507      	bpl.n	23fdd1a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfe>
        json.name("t", 1).value((unsigned)attr.time);
 23fdd0a:	491d      	ldr	r1, [pc, #116]	; (23fdd80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 23fdd0c:	2201      	movs	r2, #1
 23fdd0e:	4668      	mov	r0, sp
 23fdd10:	f7fe fef8 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd14:	6961      	ldr	r1, [r4, #20]
 23fdd16:	f7fe fe0d 	bl	23fc934 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
 23fdd1a:	7923      	ldrb	r3, [r4, #4]
 23fdd1c:	06da      	lsls	r2, r3, #27
 23fdd1e:	d507      	bpl.n	23fdd30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
 23fdd20:	4918      	ldr	r1, [pc, #96]	; (23fdd84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 23fdd22:	2204      	movs	r2, #4
 23fdd24:	4668      	mov	r0, sp
 23fdd26:	f7fe feed 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd2a:	69a1      	ldr	r1, [r4, #24]
 23fdd2c:	f7fe fdf0 	bl	23fc910 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
 23fdd30:	7923      	ldrb	r3, [r4, #4]
 23fdd32:	069b      	lsls	r3, r3, #26
 23fdd34:	d507      	bpl.n	23fdd46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
 23fdd36:	4914      	ldr	r1, [pc, #80]	; (23fdd88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 23fdd38:	2206      	movs	r2, #6
 23fdd3a:	4668      	mov	r0, sp
 23fdd3c:	f7fe fee2 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
 23fdd40:	69e1      	ldr	r1, [r4, #28]
 23fdd42:	f7ff f914 	bl	23fcf6e <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
 23fdd46:	4668      	mov	r0, sp
 23fdd48:	f7fe fd9c 	bl	23fc884 <_ZN5spark10JSONWriter9endObjectEv>
    return stream_;
 23fdd4c:	6a28      	ldr	r0, [r5, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 23fdd4e:	2202      	movs	r2, #2
 23fdd50:	6803      	ldr	r3, [r0, #0]
 23fdd52:	490e      	ldr	r1, [pc, #56]	; (23fdd8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 23fdd54:	68db      	ldr	r3, [r3, #12]
 23fdd56:	4798      	blx	r3
}
 23fdd58:	b005      	add	sp, #20
 23fdd5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 23fdd5e:	bf00      	nop
 23fdd60:	1007af64 	.word	0x1007af64
 23fdd64:	023ffc88 	.word	0x023ffc88
 23fdd68:	023ffc1a 	.word	0x023ffc1a
 23fdd6c:	023ffc6b 	.word	0x023ffc6b
 23fdd70:	023ffec3 	.word	0x023ffec3
 23fdd74:	023ff70d 	.word	0x023ff70d
 23fdd78:	023ffc6d 	.word	0x023ffc6d
 23fdd7c:	023ffc70 	.word	0x023ffc70
 23fdd80:	023ff84e 	.word	0x023ff84e
 23fdd84:	023ffc73 	.word	0x023ffc73
 23fdd88:	023ffc78 	.word	0x023ffc78
 23fdd8c:	023ffc68 	.word	0x023ffc68

023fdd90 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fdd90:	2300      	movs	r3, #0
 23fdd92:	6840      	ldr	r0, [r0, #4]
 23fdd94:	461a      	mov	r2, r3
 23fdd96:	f7fd b875 	b.w	23fae84 <network_connect>

023fdd9a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fdd9a:	2200      	movs	r2, #0
 23fdd9c:	2102      	movs	r1, #2
 23fdd9e:	6840      	ldr	r0, [r0, #4]
 23fdda0:	f7fd b88c 	b.w	23faebc <network_disconnect>

023fdda4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fdda4:	2200      	movs	r2, #0
 23fdda6:	6840      	ldr	r0, [r0, #4]
 23fdda8:	4611      	mov	r1, r2
 23fddaa:	f7fd b879 	b.w	23faea0 <network_connecting>

023fddae <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fddae:	2200      	movs	r2, #0
 23fddb0:	6840      	ldr	r0, [r0, #4]
 23fddb2:	4611      	mov	r1, r2
 23fddb4:	f7fd b890 	b.w	23faed8 <network_ready>

023fddb8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fddb8:	2300      	movs	r3, #0
 23fddba:	6840      	ldr	r0, [r0, #4]
 23fddbc:	461a      	mov	r2, r3
 23fddbe:	4619      	mov	r1, r3
 23fddc0:	f7fd b898 	b.w	23faef4 <network_on>

023fddc4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fddc4:	2300      	movs	r3, #0
 23fddc6:	6840      	ldr	r0, [r0, #4]
 23fddc8:	461a      	mov	r2, r3
 23fddca:	4619      	mov	r1, r3
 23fddcc:	f7fd b8a0 	b.w	23faf10 <network_off>

023fddd0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fddd0:	2100      	movs	r1, #0
 23fddd2:	6840      	ldr	r0, [r0, #4]
 23fddd4:	f7fd b8e2 	b.w	23faf9c <network_is_on>

023fddd8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fddd8:	2100      	movs	r1, #0
 23fddda:	6840      	ldr	r0, [r0, #4]
 23fdddc:	f7fd b8ec 	b.w	23fafb8 <network_is_off>

023fdde0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fdde0:	2200      	movs	r2, #0
 23fdde2:	6840      	ldr	r0, [r0, #4]
 23fdde4:	f081 0101 	eor.w	r1, r1, #1
 23fdde8:	f7fd b8a0 	b.w	23faf2c <network_listen>

023fddec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fddec:	2200      	movs	r2, #0
 23fddee:	6840      	ldr	r0, [r0, #4]
 23fddf0:	f7fd b8b8 	b.w	23faf64 <network_set_listen_timeout>

023fddf4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fddf4:	2200      	movs	r2, #0
 23fddf6:	6840      	ldr	r0, [r0, #4]
 23fddf8:	4611      	mov	r1, r2
 23fddfa:	f7fd b8c1 	b.w	23faf80 <network_get_listen_timeout>

023fddfe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fddfe:	2200      	movs	r2, #0
 23fde00:	6840      	ldr	r0, [r0, #4]
 23fde02:	4611      	mov	r1, r2
 23fde04:	f7fd b8a0 	b.w	23faf48 <network_listening>

023fde08 <_ZN5spark12NetworkClass11isPreferredEv>:
    network_handle_t network = network_prefer(*this, prefer, nullptr);
    return Network.from(network);
}

bool NetworkClass::isPreferred() {
    return network_is_preferred(*this, nullptr);
 23fde08:	2100      	movs	r1, #0
 23fde0a:	6840      	ldr	r0, [r0, #4]
 23fde0c:	f7fd b8f0 	b.w	23faff0 <network_is_preferred>

023fde10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fde10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fde14:	b095      	sub	sp, #84	; 0x54
 23fde16:	4614      	mov	r4, r2
 23fde18:	460d      	mov	r5, r1
 23fde1a:	4607      	mov	r7, r0
    IPAddress addr;
 23fde1c:	f7fe fbd8 	bl	23fc5d0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fde20:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fde22:	221c      	movs	r2, #28
 23fde24:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fde26:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fde28:	f001 fa5b 	bl	23ff2e2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fde2c:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fde2e:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fde30:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fde32:	2100      	movs	r1, #0
 23fde34:	466b      	mov	r3, sp
 23fde36:	aa0c      	add	r2, sp, #48	; 0x30
 23fde38:	f7fc fde6 	bl	23faa08 <netdb_getaddrinfo>
    if (!r) {
 23fde3c:	4604      	mov	r4, r0
 23fde3e:	2800      	cmp	r0, #0
 23fde40:	d14b      	bne.n	23fdeda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fde42:	4602      	mov	r2, r0
 23fde44:	2101      	movs	r1, #1
 23fde46:	6868      	ldr	r0, [r5, #4]
 23fde48:	f7fd f846 	bl	23faed8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fde4c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fde4e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fde50:	4622      	mov	r2, r4
 23fde52:	6868      	ldr	r0, [r5, #4]
 23fde54:	f7fd f840 	bl	23faed8 <network_ready>
        bool ok = false;
 23fde58:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fde5a:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fde5c:	9e00      	ldr	r6, [sp, #0]
 23fde5e:	2e00      	cmp	r6, #0
 23fde60:	d03b      	beq.n	23fdeda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fde62:	2900      	cmp	r1, #0
 23fde64:	d139      	bne.n	23fdeda <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fde66:	6873      	ldr	r3, [r6, #4]
 23fde68:	2b02      	cmp	r3, #2
 23fde6a:	d003      	beq.n	23fde74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fde6c:	2b0a      	cmp	r3, #10
 23fde6e:	d011      	beq.n	23fde94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fde70:	69f6      	ldr	r6, [r6, #28]
 23fde72:	e7f4      	b.n	23fde5e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fde74:	f1b8 0f00 	cmp.w	r8, #0
 23fde78:	d0fa      	beq.n	23fde70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fde7a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fde7c:	a806      	add	r0, sp, #24
 23fde7e:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fde80:	1d3c      	adds	r4, r7, #4
 23fde82:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fde84:	f7fe fbd2 	bl	23fc62c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fde88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fde8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fde8c:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fde8e:	4641      	mov	r1, r8
 23fde90:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fde92:	e7ed      	b.n	23fde70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fde94:	f1b9 0f00 	cmp.w	r9, #0
 23fde98:	d0ea      	beq.n	23fde70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fde9a:	2210      	movs	r2, #16
 23fde9c:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fde9e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fdea0:	f001 fa1f 	bl	23ff2e2 <memset>
                    a.v = 6;
 23fdea4:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdea6:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fdea8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fdeac:	f104 0308 	add.w	r3, r4, #8
 23fdeb0:	3418      	adds	r4, #24
 23fdeb2:	462a      	mov	r2, r5
 23fdeb4:	6818      	ldr	r0, [r3, #0]
 23fdeb6:	6859      	ldr	r1, [r3, #4]
 23fdeb8:	3308      	adds	r3, #8
 23fdeba:	c203      	stmia	r2!, {r0, r1}
 23fdebc:	42a3      	cmp	r3, r4
 23fdebe:	4615      	mov	r5, r2
 23fdec0:	d1f7      	bne.n	23fdeb2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fdec2:	a901      	add	r1, sp, #4
 23fdec4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fdec6:	1d3c      	adds	r4, r7, #4
 23fdec8:	ad07      	add	r5, sp, #28
 23fdeca:	f7fe fb8f 	bl	23fc5ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fdece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fded0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fded2:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fded4:	4649      	mov	r1, r9
 23fded6:	7023      	strb	r3, [r4, #0]
                    break;
 23fded8:	e7ca      	b.n	23fde70 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fdeda:	9800      	ldr	r0, [sp, #0]
 23fdedc:	f7fc fd86 	bl	23fa9ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fdee0:	4638      	mov	r0, r7
 23fdee2:	b015      	add	sp, #84	; 0x54
 23fdee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fdee8 <_ZN5spark12NetworkClass4fromEm>:
    switch (nif) {
 23fdee8:	3803      	subs	r0, #3
 23fdeea:	2803      	cmp	r0, #3
 23fdeec:	bf9a      	itte	ls
 23fdeee:	4b02      	ldrls	r3, [pc, #8]	; (23fdef8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 23fdef0:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
NetworkClass& NetworkClass::from(network_interface_t nif) {
 23fdef4:	4801      	ldrhi	r0, [pc, #4]	; (23fdefc <_ZN5spark12NetworkClass4fromEm+0x14>)
}
 23fdef6:	4770      	bx	lr
 23fdef8:	023ffcf8 	.word	0x023ffcf8
 23fdefc:	1007af64 	.word	0x1007af64

023fdf00 <_ZN5spark12NetworkClass6preferEb>:
NetworkClass& NetworkClass::prefer(bool prefer) {
 23fdf00:	b508      	push	{r3, lr}
    network_handle_t network = network_prefer(*this, prefer, nullptr);
 23fdf02:	2200      	movs	r2, #0
 23fdf04:	6840      	ldr	r0, [r0, #4]
 23fdf06:	f7fd f865 	bl	23fafd4 <network_prefer>
}
 23fdf0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return Network.from(network);
 23fdf0e:	f7ff bfeb 	b.w	23fdee8 <_ZN5spark12NetworkClass4fromEm>
	...

023fdf14 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fdf14:	4b02      	ldr	r3, [pc, #8]	; (23fdf20 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fdf16:	4a03      	ldr	r2, [pc, #12]	; (23fdf24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fdf18:	601a      	str	r2, [r3, #0]
 23fdf1a:	2200      	movs	r2, #0
 23fdf1c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fdf1e:	4770      	bx	lr
 23fdf20:	1007af64 	.word	0x1007af64
 23fdf24:	023ffd10 	.word	0x023ffd10

023fdf28 <_ZN8particle18OutputStringStream5writeEh>:
    size_t write(uint8_t b) override {
 23fdf28:	b507      	push	{r0, r1, r2, lr}
        return write(&b, 1);
 23fdf2a:	6803      	ldr	r3, [r0, #0]
    size_t write(uint8_t b) override {
 23fdf2c:	f88d 1007 	strb.w	r1, [sp, #7]
        return write(&b, 1);
 23fdf30:	2201      	movs	r2, #1
 23fdf32:	68db      	ldr	r3, [r3, #12]
 23fdf34:	f10d 0107 	add.w	r1, sp, #7
 23fdf38:	4798      	blx	r3
    }
 23fdf3a:	b003      	add	sp, #12
 23fdf3c:	f85d fb04 	ldr.w	pc, [sp], #4

023fdf40 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fdf40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fdf42:	4606      	mov	r6, r0
 23fdf44:	460d      	mov	r5, r1
  size_t n = 0;
 23fdf46:	2400      	movs	r4, #0
 23fdf48:	188f      	adds	r7, r1, r2
  while (size--) {
 23fdf4a:	42bd      	cmp	r5, r7
 23fdf4c:	d00c      	beq.n	23fdf68 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fdf4e:	6833      	ldr	r3, [r6, #0]
 23fdf50:	4630      	mov	r0, r6
 23fdf52:	689b      	ldr	r3, [r3, #8]
 23fdf54:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fdf58:	4798      	blx	r3
     if (chunk>=0)
 23fdf5a:	1e03      	subs	r3, r0, #0
 23fdf5c:	db01      	blt.n	23fdf62 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fdf5e:	441c      	add	r4, r3
  while (size--) {
 23fdf60:	e7f3      	b.n	23fdf4a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fdf62:	2c00      	cmp	r4, #0
 23fdf64:	bf08      	it	eq
 23fdf66:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fdf68:	4620      	mov	r0, r4
 23fdf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fdf6c <_ZN8particle18OutputStringStreamD1Ev>:
class OutputStringStream: public Print {
 23fdf6c:	4770      	bx	lr

023fdf6e <_ZN8particle18OutputStringStreamD0Ev>:
 23fdf6e:	b510      	push	{r4, lr}
 23fdf70:	4604      	mov	r4, r0
 23fdf72:	210c      	movs	r1, #12
 23fdf74:	f7fb fe41 	bl	23f9bfa <_ZdlPvj>
 23fdf78:	4620      	mov	r0, r4
 23fdf7a:	bd10      	pop	{r4, pc}

023fdf7c <_ZN8particle18OutputStringStream5writeEPKhj>:
    return n;
}

namespace particle {

size_t OutputStringStream::write(const uint8_t* data, size_t size) {
 23fdf7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (getWriteError()) {
 23fdf7e:	6843      	ldr	r3, [r0, #4]
size_t OutputStringStream::write(const uint8_t* data, size_t size) {
 23fdf80:	4605      	mov	r5, r0
 23fdf82:	460e      	mov	r6, r1
 23fdf84:	4614      	mov	r4, r2
    if (getWriteError()) {
 23fdf86:	b9d3      	cbnz	r3, 23fdfbe <_ZN8particle18OutputStringStream5writeEPKhj+0x42>
        return 0;
    }
    size_t newSize = s_.length() + size;
 23fdf88:	6880      	ldr	r0, [r0, #8]
 23fdf8a:	6882      	ldr	r2, [r0, #8]
        return capacity_;
 23fdf8c:	6843      	ldr	r3, [r0, #4]
 23fdf8e:	4422      	add	r2, r4
    if (s_.capacity() < newSize && !s_.reserve(std::max<size_t>({ newSize, s_.capacity() * 3 / 2, 20 }))) {
 23fdf90:	429a      	cmp	r2, r3
 23fdf92:	d916      	bls.n	23fdfc2 <_ZN8particle18OutputStringStream5writeEPKhj+0x46>
 23fdf94:	2114      	movs	r1, #20
 23fdf96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fdf9a:	085b      	lsrs	r3, r3, #1
		  _Compare __comp)
    {
      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
	if (__comp(__result, __first))
 23fdf9c:	429a      	cmp	r2, r3
 23fdf9e:	9302      	str	r3, [sp, #8]
 23fdfa0:	9201      	str	r2, [sp, #4]
      _ForwardIterator __result = __first;
 23fdfa2:	bf2c      	ite	cs
 23fdfa4:	ab01      	addcs	r3, sp, #4
      while (++__first != __last)
 23fdfa6:	ab02      	addcc	r3, sp, #8
 23fdfa8:	9103      	str	r1, [sp, #12]
	if (__comp(__result, __first))
 23fdfaa:	681a      	ldr	r2, [r3, #0]
 23fdfac:	2a13      	cmp	r2, #19
      while (++__first != __last)
 23fdfae:	bf98      	it	ls
 23fdfb0:	ab03      	addls	r3, sp, #12
 23fdfb2:	6819      	ldr	r1, [r3, #0]
 23fdfb4:	f000 f950 	bl	23fe258 <_ZN6String7reserveEj>
 23fdfb8:	b918      	cbnz	r0, 23fdfc2 <_ZN8particle18OutputStringStream5writeEPKhj+0x46>
    void setWriteError(int err = 1) { write_error = err; }
 23fdfba:	4b06      	ldr	r3, [pc, #24]	; (23fdfd4 <_ZN8particle18OutputStringStream5writeEPKhj+0x58>)
 23fdfbc:	606b      	str	r3, [r5, #4]
        return 0;
 23fdfbe:	2400      	movs	r4, #0
 23fdfc0:	e004      	b.n	23fdfcc <_ZN8particle18OutputStringStream5writeEPKhj+0x50>
        setWriteError(Error::NO_MEMORY);
        return 0;
    }
    s_.concat((const char*)data, size);
 23fdfc2:	4622      	mov	r2, r4
 23fdfc4:	4631      	mov	r1, r6
 23fdfc6:	68a8      	ldr	r0, [r5, #8]
 23fdfc8:	f000 f9ec 	bl	23fe3a4 <_ZN6String6concatEPKcj>
    return size;
}
 23fdfcc:	4620      	mov	r0, r4
 23fdfce:	b004      	add	sp, #16
 23fdfd0:	bd70      	pop	{r4, r5, r6, pc}
 23fdfd2:	bf00      	nop
 23fdfd4:	fffffefc 	.word	0xfffffefc

023fdfd8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fdfd8:	b513      	push	{r0, r1, r4, lr}
 23fdfda:	4604      	mov	r4, r0
    }
 23fdfdc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fdfde:	b159      	cbz	r1, 23fdff8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fdfe0:	9101      	str	r1, [sp, #4]
 23fdfe2:	f7fb fde1 	bl	23f9ba8 <strlen>
 23fdfe6:	4602      	mov	r2, r0
 23fdfe8:	4620      	mov	r0, r4
 23fdfea:	6823      	ldr	r3, [r4, #0]
 23fdfec:	9901      	ldr	r1, [sp, #4]
 23fdfee:	68db      	ldr	r3, [r3, #12]
    }
 23fdff0:	b002      	add	sp, #8
 23fdff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fdff6:	4718      	bx	r3
    }
 23fdff8:	b002      	add	sp, #8
 23fdffa:	bd10      	pop	{r4, pc}

023fdffc <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE>:
void writeVariant(const Variant& var, JSONStreamWriter& writer) {
 23fdffc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 23fdffe:	4604      	mov	r4, r0
	  return make_signed_t<__index_type>(this->_M_index);
 23fe000:	7c00      	ldrb	r0, [r0, #16]
 23fe002:	460d      	mov	r5, r1
 23fe004:	280a      	cmp	r0, #10
 23fe006:	d864      	bhi.n	23fe0d2 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0xd6>
 23fe008:	e8df f000 	tbb	[pc, r0]
 23fe00c:	241b0c06 	.word	0x241b0c06
 23fe010:	4b41372d 	.word	0x4b41372d
 23fe014:	6555      	.short	0x6555
 23fe016:	7f          	.byte	0x7f
 23fe017:	00          	.byte	0x00
        writer.nullValue();
 23fe018:	4608      	mov	r0, r1
}
 23fe01a:	b004      	add	sp, #16
 23fe01c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.nullValue();
 23fe020:	f7fe bd02 	b.w	23fca28 <_ZN5spark10JSONWriter9nullValueEv>
      if (__v.index() != _Np)
 23fe024:	2801      	cmp	r0, #1
 23fe026:	d005      	beq.n	23fe034 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x38>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fe028:	f1a0 03ff 	sub.w	r3, r0, #255	; 0xff
 23fe02c:	4258      	negs	r0, r3
 23fe02e:	4158      	adcs	r0, r3
 23fe030:	f7fd f9c2 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
        writer.value(var.value<bool>());
 23fe034:	4628      	mov	r0, r5
 23fe036:	7821      	ldrb	r1, [r4, #0]
}
 23fe038:	b004      	add	sp, #16
 23fe03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.value(var.value<bool>());
 23fe03e:	f7fe bc4f 	b.w	23fc8e0 <_ZN5spark10JSONWriter5valueEb>
      if (__v.index() != _Np)
 23fe042:	2802      	cmp	r0, #2
 23fe044:	d1f0      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
        writer.value(var.value<int>());
 23fe046:	4628      	mov	r0, r5
 23fe048:	6821      	ldr	r1, [r4, #0]
}
 23fe04a:	b004      	add	sp, #16
 23fe04c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.value(var.value<int>());
 23fe050:	f7fe bc5e 	b.w	23fc910 <_ZN5spark10JSONWriter5valueEi>
 23fe054:	2803      	cmp	r0, #3
 23fe056:	d1e7      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
        writer.value(var.value<unsigned>());
 23fe058:	4628      	mov	r0, r5
 23fe05a:	6821      	ldr	r1, [r4, #0]
}
 23fe05c:	b004      	add	sp, #16
 23fe05e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.value(var.value<unsigned>());
 23fe062:	f7fe bc67 	b.w	23fc934 <_ZN5spark10JSONWriter5valueEj>
 23fe066:	2804      	cmp	r0, #4
 23fe068:	d1de      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
        writer.value(var.value<int64_t>());
 23fe06a:	e9d4 2300 	ldrd	r2, r3, [r4]
 23fe06e:	4608      	mov	r0, r1
}
 23fe070:	b004      	add	sp, #16
 23fe072:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.value(var.value<int64_t>());
 23fe076:	f7fe bc6f 	b.w	23fc958 <_ZN5spark10JSONWriter5valueEx>
 23fe07a:	2805      	cmp	r0, #5
 23fe07c:	d1d4      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
        writer.value(var.value<uint64_t>());
 23fe07e:	e9d4 2300 	ldrd	r2, r3, [r4]
 23fe082:	4608      	mov	r0, r1
}
 23fe084:	b004      	add	sp, #16
 23fe086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.value(var.value<uint64_t>());
 23fe08a:	f7fe bc79 	b.w	23fc980 <_ZN5spark10JSONWriter5valueEy>
 23fe08e:	2806      	cmp	r0, #6
 23fe090:	d1ca      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
        writer.value(var.value<double>());
 23fe092:	ed94 0b00 	vldr	d0, [r4]
 23fe096:	4608      	mov	r0, r1
}
 23fe098:	b004      	add	sp, #16
 23fe09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.value(var.value<double>());
 23fe09e:	f7fe bc83 	b.w	23fc9a8 <_ZN5spark10JSONWriter5valueEd>
 23fe0a2:	2807      	cmp	r0, #7
 23fe0a4:	d1c0      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
    return value(val.c_str(), val.length());
 23fe0a6:	4628      	mov	r0, r5
 23fe0a8:	68a2      	ldr	r2, [r4, #8]
 23fe0aa:	6821      	ldr	r1, [r4, #0]
}
 23fe0ac:	b004      	add	sp, #16
 23fe0ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 23fe0b2:	f7fe bd37 	b.w	23fcb24 <_ZN5spark10JSONWriter5valueEPKcj>
 23fe0b6:	2808      	cmp	r0, #8
 23fe0b8:	d1b6      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
        writer.value(var.value<Buffer>().toHex());
 23fe0ba:	4621      	mov	r1, r4
 23fe0bc:	4668      	mov	r0, sp
 23fe0be:	f7fd f8e5 	bl	23fb28c <_ZNK8particle6Buffer5toHexEv>
 23fe0c2:	4628      	mov	r0, r5
 23fe0c4:	9a02      	ldr	r2, [sp, #8]
 23fe0c6:	9900      	ldr	r1, [sp, #0]
 23fe0c8:	f7fe fd2c 	bl	23fcb24 <_ZN5spark10JSONWriter5valueEPKcj>
 23fe0cc:	4668      	mov	r0, sp
 23fe0ce:	f000 f8a5 	bl	23fe21c <_ZN6StringD1Ev>
}
 23fe0d2:	b004      	add	sp, #16
 23fe0d4:	bd70      	pop	{r4, r5, r6, pc}
        writer.beginArray();
 23fe0d6:	4608      	mov	r0, r1
 23fe0d8:	f7fe fbea 	bl	23fc8b0 <_ZN5spark10JSONWriter10beginArrayEv>
	  return make_signed_t<__index_type>(this->_M_index);
 23fe0dc:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23fe0de:	2809      	cmp	r0, #9
 23fe0e0:	d1a2      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
    return data_ + size_;
 23fe0e2:	e9d4 0600 	ldrd	r0, r6, [r4]
 23fe0e6:	2318      	movs	r3, #24
 23fe0e8:	4604      	mov	r4, r0
 23fe0ea:	fb03 0606 	mla	r6, r3, r6, r0
        for (auto& v: var.value<VariantArray>()) {
 23fe0ee:	42b4      	cmp	r4, r6
 23fe0f0:	d005      	beq.n	23fe0fe <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x102>
            writeVariant(v, writer);
 23fe0f2:	4620      	mov	r0, r4
 23fe0f4:	4629      	mov	r1, r5
 23fe0f6:	f7ff ff81 	bl	23fdffc <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE>
        for (auto& v: var.value<VariantArray>()) {
 23fe0fa:	3418      	adds	r4, #24
 23fe0fc:	e7f7      	b.n	23fe0ee <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0xf2>
        writer.endArray();
 23fe0fe:	4628      	mov	r0, r5
}
 23fe100:	b004      	add	sp, #16
 23fe102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.endArray();
 23fe106:	f7fe bbb4 	b.w	23fc872 <_ZN5spark10JSONWriter8endArrayEv>
        writer.beginObject();
 23fe10a:	4608      	mov	r0, r1
 23fe10c:	f7fe fbdc 	bl	23fc8c8 <_ZN5spark10JSONWriter11beginObjectEv>
	  return make_signed_t<__index_type>(this->_M_index);
 23fe110:	7c20      	ldrb	r0, [r4, #16]
      if (__v.index() != _Np)
 23fe112:	280a      	cmp	r0, #10
 23fe114:	d188      	bne.n	23fe028 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x2c>
 23fe116:	e9d4 3600 	ldrd	r3, r6, [r4]
 23fe11a:	2228      	movs	r2, #40	; 0x28
 23fe11c:	fb02 3606 	mla	r6, r2, r6, r3
 23fe120:	f103 0410 	add.w	r4, r3, #16
        for (auto& e: var.value<VariantMap>().entries()) {
 23fe124:	f1a4 0310 	sub.w	r3, r4, #16
 23fe128:	429e      	cmp	r6, r3
 23fe12a:	d00c      	beq.n	23fe146 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x14a>
    return this->name(name.c_str(), name.length());
 23fe12c:	f854 2c08 	ldr.w	r2, [r4, #-8]
 23fe130:	f854 1c10 	ldr.w	r1, [r4, #-16]
 23fe134:	4628      	mov	r0, r5
 23fe136:	f7fe fce5 	bl	23fcb04 <_ZN5spark10JSONWriter4nameEPKcj>
            writeVariant(e.second, writer);
 23fe13a:	4620      	mov	r0, r4
 23fe13c:	4629      	mov	r1, r5
 23fe13e:	f7ff ff5d 	bl	23fdffc <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE>
        for (auto& e: var.value<VariantMap>().entries()) {
 23fe142:	3428      	adds	r4, #40	; 0x28
 23fe144:	e7ee      	b.n	23fe124 <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE+0x128>
        writer.endObject();
 23fe146:	4628      	mov	r0, r5
}
 23fe148:	b004      	add	sp, #16
 23fe14a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        writer.endObject();
 23fe14e:	f7fe bb99 	b.w	23fc884 <_ZN5spark10JSONWriter9endObjectEv>

023fe152 <_ZN5Print5printEc>:
  return write(c);
 23fe152:	6803      	ldr	r3, [r0, #0]
 23fe154:	689b      	ldr	r3, [r3, #8]
 23fe156:	4718      	bx	r3

023fe158 <_ZN5Print11printNumberEmh>:
  *str = '\0';
 23fe158:	2300      	movs	r3, #0
  if (base < 2) base = 10;
 23fe15a:	2a01      	cmp	r2, #1
 23fe15c:	bf98      	it	ls
 23fe15e:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fe160:	b530      	push	{r4, r5, lr}
 23fe162:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fe164:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fe168:	ac09      	add	r4, sp, #36	; 0x24
   n /= base;
 23fe16a:	460d      	mov	r5, r1
 23fe16c:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fe170:	fb01 5312 	mls	r3, r1, r2, r5
 23fe174:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe178:	2b09      	cmp	r3, #9
 23fe17a:	bf94      	ite	ls
 23fe17c:	3330      	addls	r3, #48	; 0x30
 23fe17e:	3337      	addhi	r3, #55	; 0x37
 23fe180:	b2db      	uxtb	r3, r3
  } while(n);
 23fe182:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fe184:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fe188:	d9ef      	bls.n	23fe16a <_ZN5Print11printNumberEmh+0x12>
  return write(str);
 23fe18a:	4621      	mov	r1, r4
 23fe18c:	f7ff ff24 	bl	23fdfd8 <_ZN5Print5writeEPKc>
}
 23fe190:	b00b      	add	sp, #44	; 0x2c
 23fe192:	bd30      	pop	{r4, r5, pc}

023fe194 <_ZN5Print12printVariantERKN8particle7VariantE>:
size_t Print::printVariant(const Variant& var) {
 23fe194:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 23fe196:	460a      	mov	r2, r1
        state_(BEGIN) {
 23fe198:	2300      	movs	r3, #0
        bytesWritten_(0) {
 23fe19a:	4907      	ldr	r1, [pc, #28]	; (23fe1b8 <_ZN5Print12printVariantERKN8particle7VariantE+0x24>)
 23fe19c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 23fe1a0:	9100      	str	r1, [sp, #0]
    writeVariant(var, writer);
 23fe1a2:	4610      	mov	r0, r2
 23fe1a4:	4669      	mov	r1, sp
        state_(BEGIN) {
 23fe1a6:	f88d 3004 	strb.w	r3, [sp, #4]
 23fe1aa:	f7ff ff27 	bl	23fdffc <_ZN12_GLOBAL__N_112writeVariantERKN8particle7VariantERN5spark16JSONStreamWriterE>
}
 23fe1ae:	9803      	ldr	r0, [sp, #12]
 23fe1b0:	b005      	add	sp, #20
 23fe1b2:	f85d fb04 	ldr.w	pc, [sp], #4
 23fe1b6:	bf00      	nop
 23fe1b8:	023ffc88 	.word	0x023ffc88

023fe1bc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23fe1bc:	2200      	movs	r2, #0
 23fe1be:	4b01      	ldr	r3, [pc, #4]	; (23fe1c4 <_GLOBAL__sub_I_RGB+0x8>)
 23fe1c0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fe1c2:	4770      	bx	lr
 23fe1c4:	1007af6c 	.word	0x1007af6c

023fe1c8 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 23fe1c8:	b510      	push	{r4, lr}
 23fe1ca:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fe1cc:	f7fc fbba 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 23fe1d0:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 23fe1d2:	6823      	ldr	r3, [r4, #0]
 23fe1d4:	4620      	mov	r0, r4
 23fe1d6:	695b      	ldr	r3, [r3, #20]
 23fe1d8:	4798      	blx	r3
    if (c >= 0) return c;
 23fe1da:	2800      	cmp	r0, #0
 23fe1dc:	da08      	bge.n	23fe1f0 <_ZN6Stream9timedReadEv+0x28>
 23fe1de:	f7fc fbb1 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
 23fe1e2:	68e3      	ldr	r3, [r4, #12]
 23fe1e4:	1ac0      	subs	r0, r0, r3
 23fe1e6:	68a3      	ldr	r3, [r4, #8]
 23fe1e8:	4298      	cmp	r0, r3
 23fe1ea:	d3f2      	bcc.n	23fe1d2 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
 23fe1ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 23fe1f0:	bd10      	pop	{r4, pc}

023fe1f2 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 23fe1f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe1f6:	4607      	mov	r7, r0
 23fe1f8:	460c      	mov	r4, r1
 23fe1fa:	460d      	mov	r5, r1
 23fe1fc:	188e      	adds	r6, r1, r2
  size_t count = 0;
  while (count < length) {
 23fe1fe:	42b5      	cmp	r5, r6
 23fe200:	eba5 0804 	sub.w	r8, r5, r4
 23fe204:	d007      	beq.n	23fe216 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 23fe206:	4638      	mov	r0, r7
 23fe208:	f7ff ffde 	bl	23fe1c8 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 23fe20c:	1e03      	subs	r3, r0, #0
 23fe20e:	db02      	blt.n	23fe216 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 23fe210:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
 23fe214:	e7f3      	b.n	23fe1fe <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
 23fe216:	4640      	mov	r0, r8
 23fe218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fe21c <_ZN6StringD1Ev>:
    init();
    char buf[33] = {};
    dtoa(value, decimalPlaces, buf);
  *this = buf;
}
String::~String()
 23fe21c:	b510      	push	{r4, lr}
 23fe21e:	4604      	mov	r4, r0
{
    free(buffer);
 23fe220:	6800      	ldr	r0, [r0, #0]
 23fe222:	f7fc ff01 	bl	23fb028 <free>
}
 23fe226:	4620      	mov	r0, r4
 23fe228:	bd10      	pop	{r4, pc}

023fe22a <_ZN6String10invalidateEv>:
    len = 0;
    flags = 0;
}

void String::invalidate(void)
{
 23fe22a:	b510      	push	{r4, lr}
 23fe22c:	4604      	mov	r4, r0
    if (buffer) {
 23fe22e:	6800      	ldr	r0, [r0, #0]
 23fe230:	b108      	cbz	r0, 23fe236 <_ZN6String10invalidateEv+0xc>
        free(buffer);
 23fe232:	f7fc fef9 	bl	23fb028 <free>
    }
    buffer = nullptr;
 23fe236:	2300      	movs	r3, #0
    capacity_ = len = 0;
 23fe238:	e9c4 3301 	strd	r3, r3, [r4, #4]
    buffer = nullptr;
 23fe23c:	6023      	str	r3, [r4, #0]
}
 23fe23e:	bd10      	pop	{r4, pc}

023fe240 <_ZN6String12changeBufferEj>:
    len = size;
    return true;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23fe240:	b538      	push	{r3, r4, r5, lr}
 23fe242:	4604      	mov	r4, r0
 23fe244:	460d      	mov	r5, r1
    char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23fe246:	6800      	ldr	r0, [r0, #0]
 23fe248:	3101      	adds	r1, #1
 23fe24a:	f7fc fefb 	bl	23fb044 <realloc>
    if (newbuffer) {
 23fe24e:	b110      	cbz	r0, 23fe256 <_ZN6String12changeBufferEj+0x16>
        buffer = newbuffer;
        capacity_ = maxStrLen;
 23fe250:	e9c4 0500 	strd	r0, r5, [r4]
        return 1;
 23fe254:	2001      	movs	r0, #1
    }
    return 0;
}
 23fe256:	bd38      	pop	{r3, r4, r5, pc}

023fe258 <_ZN6String7reserveEj>:
{
 23fe258:	b510      	push	{r4, lr}
    if (buffer && capacity_ >= size) {
 23fe25a:	6803      	ldr	r3, [r0, #0]
{
 23fe25c:	4604      	mov	r4, r0
    if (buffer && capacity_ >= size) {
 23fe25e:	b123      	cbz	r3, 23fe26a <_ZN6String7reserveEj+0x12>
 23fe260:	6843      	ldr	r3, [r0, #4]
 23fe262:	428b      	cmp	r3, r1
 23fe264:	d301      	bcc.n	23fe26a <_ZN6String7reserveEj+0x12>
 23fe266:	2001      	movs	r0, #1
}
 23fe268:	bd10      	pop	{r4, pc}
    if (changeBuffer(size)) {
 23fe26a:	4620      	mov	r0, r4
 23fe26c:	f7ff ffe8 	bl	23fe240 <_ZN6String12changeBufferEj>
 23fe270:	2800      	cmp	r0, #0
 23fe272:	d0f9      	beq.n	23fe268 <_ZN6String7reserveEj+0x10>
        if (len == 0) {
 23fe274:	68a3      	ldr	r3, [r4, #8]
 23fe276:	2b00      	cmp	r3, #0
 23fe278:	d1f5      	bne.n	23fe266 <_ZN6String7reserveEj+0xe>
            buffer[0] = 0;
 23fe27a:	6822      	ldr	r2, [r4, #0]
 23fe27c:	7013      	strb	r3, [r2, #0]
 23fe27e:	e7f2      	b.n	23fe266 <_ZN6String7reserveEj+0xe>

023fe280 <_ZN6String6resizeEj>:
bool String::resize(size_t size) {
 23fe280:	b538      	push	{r3, r4, r5, lr}
    if (size > capacity_ && !changeBuffer(size)) {
 23fe282:	6843      	ldr	r3, [r0, #4]
bool String::resize(size_t size) {
 23fe284:	4604      	mov	r4, r0
    if (size > capacity_ && !changeBuffer(size)) {
 23fe286:	428b      	cmp	r3, r1
bool String::resize(size_t size) {
 23fe288:	460d      	mov	r5, r1
    if (size > capacity_ && !changeBuffer(size)) {
 23fe28a:	d30e      	bcc.n	23fe2aa <_ZN6String6resizeEj+0x2a>
    if (size > len) {
 23fe28c:	68a3      	ldr	r3, [r4, #8]
 23fe28e:	42ab      	cmp	r3, r5
 23fe290:	d205      	bcs.n	23fe29e <_ZN6String6resizeEj+0x1e>
        std::memset(buffer + len, 0, size - len);
 23fe292:	6820      	ldr	r0, [r4, #0]
 23fe294:	2100      	movs	r1, #0
 23fe296:	1aea      	subs	r2, r5, r3
 23fe298:	4418      	add	r0, r3
 23fe29a:	f001 f822 	bl	23ff2e2 <memset>
    buffer[size] = '\0';
 23fe29e:	2200      	movs	r2, #0
 23fe2a0:	6823      	ldr	r3, [r4, #0]
    return true;
 23fe2a2:	2001      	movs	r0, #1
    buffer[size] = '\0';
 23fe2a4:	555a      	strb	r2, [r3, r5]
    len = size;
 23fe2a6:	60a5      	str	r5, [r4, #8]
    return true;
 23fe2a8:	e003      	b.n	23fe2b2 <_ZN6String6resizeEj+0x32>
    if (size > capacity_ && !changeBuffer(size)) {
 23fe2aa:	f7ff ffc9 	bl	23fe240 <_ZN6String12changeBufferEj>
 23fe2ae:	2800      	cmp	r0, #0
 23fe2b0:	d1ec      	bne.n	23fe28c <_ZN6String6resizeEj+0xc>
}
 23fe2b2:	bd38      	pop	{r3, r4, r5, pc}

023fe2b4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23fe2b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe2b6:	460d      	mov	r5, r1
    if (!reserve(length)) {
 23fe2b8:	4611      	mov	r1, r2
 23fe2ba:	9201      	str	r2, [sp, #4]
{
 23fe2bc:	4604      	mov	r4, r0
    if (!reserve(length)) {
 23fe2be:	f7ff ffcb 	bl	23fe258 <_ZN6String7reserveEj>
 23fe2c2:	9a01      	ldr	r2, [sp, #4]
 23fe2c4:	b928      	cbnz	r0, 23fe2d2 <_ZN6String4copyEPKcj+0x1e>
        invalidate();
 23fe2c6:	4620      	mov	r0, r4
 23fe2c8:	f7ff ffaf 	bl	23fe22a <_ZN6String10invalidateEv>
    }
    len = length;
    memcpy(buffer, cstr, length);
    buffer[len] = 0;
    return *this;
}
 23fe2cc:	4620      	mov	r0, r4
 23fe2ce:	b003      	add	sp, #12
 23fe2d0:	bd30      	pop	{r4, r5, pc}
    memcpy(buffer, cstr, length);
 23fe2d2:	4629      	mov	r1, r5
    len = length;
 23fe2d4:	60a2      	str	r2, [r4, #8]
    memcpy(buffer, cstr, length);
 23fe2d6:	6820      	ldr	r0, [r4, #0]
 23fe2d8:	f000 ffdc 	bl	23ff294 <memcpy>
    buffer[len] = 0;
 23fe2dc:	2100      	movs	r1, #0
 23fe2de:	6822      	ldr	r2, [r4, #0]
 23fe2e0:	68a3      	ldr	r3, [r4, #8]
 23fe2e2:	54d1      	strb	r1, [r2, r3]
    return *this;
 23fe2e4:	e7f2      	b.n	23fe2cc <_ZN6String4copyEPKcj+0x18>

023fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>:
    buffer = nullptr;
 23fe2e6:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23fe2e8:	b513      	push	{r0, r1, r4, lr}
 23fe2ea:	4604      	mov	r4, r0
    capacity_ = 0;
 23fe2ec:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fe2f0:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fe2f2:	7303      	strb	r3, [r0, #12]
    if (cstr) {
 23fe2f4:	b141      	cbz	r1, 23fe308 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
        copy(cstr, strlen(cstr));
 23fe2f6:	4608      	mov	r0, r1
 23fe2f8:	9101      	str	r1, [sp, #4]
 23fe2fa:	f7fb fc55 	bl	23f9ba8 <strlen>
 23fe2fe:	9901      	ldr	r1, [sp, #4]
 23fe300:	4602      	mov	r2, r0
 23fe302:	4620      	mov	r0, r4
 23fe304:	f7ff ffd6 	bl	23fe2b4 <_ZN6String4copyEPKcj>
}
 23fe308:	4620      	mov	r0, r4
 23fe30a:	b002      	add	sp, #8
 23fe30c:	bd10      	pop	{r4, pc}

023fe30e <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 23fe30e:	b538      	push	{r3, r4, r5, lr}
 23fe310:	4605      	mov	r5, r0
    if (buffer) {
 23fe312:	6800      	ldr	r0, [r0, #0]
{
 23fe314:	460c      	mov	r4, r1
    if (buffer) {
 23fe316:	b170      	cbz	r0, 23fe336 <_ZN6String4moveERS_+0x28>
        if (capacity_ >= rhs.len && rhs.buffer) {
 23fe318:	686a      	ldr	r2, [r5, #4]
 23fe31a:	688b      	ldr	r3, [r1, #8]
 23fe31c:	429a      	cmp	r2, r3
 23fe31e:	d308      	bcc.n	23fe332 <_ZN6String4moveERS_+0x24>
 23fe320:	6809      	ldr	r1, [r1, #0]
 23fe322:	b131      	cbz	r1, 23fe332 <_ZN6String4moveERS_+0x24>
            strcpy(buffer, rhs.buffer);
 23fe324:	f001 f82b 	bl	23ff37e <strcpy>
            len = rhs.len;
 23fe328:	68a3      	ldr	r3, [r4, #8]
 23fe32a:	60ab      	str	r3, [r5, #8]
            rhs.len = 0;
 23fe32c:	2300      	movs	r3, #0
    buffer = rhs.buffer;
    capacity_ = rhs.capacity_;
    len = rhs.len;
    rhs.buffer = nullptr;
    rhs.capacity_ = 0;
    rhs.len = 0;
 23fe32e:	60a3      	str	r3, [r4, #8]
}
 23fe330:	bd38      	pop	{r3, r4, r5, pc}
            free(buffer);
 23fe332:	f7fc fe79 	bl	23fb028 <free>
    buffer = rhs.buffer;
 23fe336:	6823      	ldr	r3, [r4, #0]
 23fe338:	602b      	str	r3, [r5, #0]
    capacity_ = rhs.capacity_;
 23fe33a:	6863      	ldr	r3, [r4, #4]
 23fe33c:	606b      	str	r3, [r5, #4]
    len = rhs.len;
 23fe33e:	68a3      	ldr	r3, [r4, #8]
 23fe340:	60ab      	str	r3, [r5, #8]
    rhs.buffer = nullptr;
 23fe342:	2300      	movs	r3, #0
    rhs.capacity_ = 0;
 23fe344:	e9c4 3300 	strd	r3, r3, [r4]
 23fe348:	e7f1      	b.n	23fe32e <_ZN6String4moveERS_+0x20>

023fe34a <_ZN6StringC1EOS_>:
    buffer = nullptr;
 23fe34a:	2300      	movs	r3, #0
String::String(String &&rval)
 23fe34c:	b510      	push	{r4, lr}
 23fe34e:	4604      	mov	r4, r0
    capacity_ = 0;
 23fe350:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fe354:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fe356:	7303      	strb	r3, [r0, #12]
    move(rval);
 23fe358:	f7ff ffd9 	bl	23fe30e <_ZN6String4moveERS_>
}
 23fe35c:	4620      	mov	r0, r4
 23fe35e:	bd10      	pop	{r4, pc}

023fe360 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
    if (this == &rhs) {
 23fe360:	4288      	cmp	r0, r1
{
 23fe362:	b510      	push	{r4, lr}
 23fe364:	4604      	mov	r4, r0
    if (this == &rhs) {
 23fe366:	d005      	beq.n	23fe374 <_ZN6StringaSERKS_+0x14>
        return *this;
    }

    if (rhs.buffer) {
 23fe368:	680b      	ldr	r3, [r1, #0]
 23fe36a:	b12b      	cbz	r3, 23fe378 <_ZN6StringaSERKS_+0x18>
        copy(rhs.buffer, rhs.len);
 23fe36c:	688a      	ldr	r2, [r1, #8]
 23fe36e:	4619      	mov	r1, r3
 23fe370:	f7ff ffa0 	bl	23fe2b4 <_ZN6String4copyEPKcj>
    else {
        invalidate();
    }

    return *this;
}
 23fe374:	4620      	mov	r0, r4
 23fe376:	bd10      	pop	{r4, pc}
        invalidate();
 23fe378:	f7ff ff57 	bl	23fe22a <_ZN6String10invalidateEv>
 23fe37c:	e7fa      	b.n	23fe374 <_ZN6StringaSERKS_+0x14>

023fe37e <_ZN6StringC1ERKS_>:
    buffer = nullptr;
 23fe37e:	2300      	movs	r3, #0
String::String(const String &value)
 23fe380:	b510      	push	{r4, lr}
 23fe382:	4604      	mov	r4, r0
    capacity_ = 0;
 23fe384:	e9c0 3300 	strd	r3, r3, [r0]
    len = 0;
 23fe388:	6083      	str	r3, [r0, #8]
    flags = 0;
 23fe38a:	7303      	strb	r3, [r0, #12]
    *this = value;
 23fe38c:	f7ff ffe8 	bl	23fe360 <_ZN6StringaSERKS_>
}
 23fe390:	4620      	mov	r0, r4
 23fe392:	bd10      	pop	{r4, pc}

023fe394 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
    if (this != &rval) {
 23fe394:	4288      	cmp	r0, r1
{
 23fe396:	b510      	push	{r4, lr}
 23fe398:	4604      	mov	r4, r0
    if (this != &rval) {
 23fe39a:	d001      	beq.n	23fe3a0 <_ZN6StringaSEOS_+0xc>
        move(rval);
 23fe39c:	f7ff ffb7 	bl	23fe30e <_ZN6String4moveERS_>
    }
    return *this;
}
 23fe3a0:	4620      	mov	r0, r4
 23fe3a2:	bd10      	pop	{r4, pc}

023fe3a4 <_ZN6String6concatEPKcj>:
{
    return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23fe3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fe3a6:	4604      	mov	r4, r0
 23fe3a8:	4616      	mov	r6, r2
    unsigned int newlen = len + length;
    if (!cstr) {
 23fe3aa:	460f      	mov	r7, r1
 23fe3ac:	b909      	cbnz	r1, 23fe3b2 <_ZN6String6concatEPKcj+0xe>
        return 0;
 23fe3ae:	2000      	movs	r0, #0
    }
    memcpy(buffer + len, cstr, length);
    buffer[newlen] = 0;
    len = newlen;
    return 1;
}
 23fe3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (length == 0) {
 23fe3b2:	b18a      	cbz	r2, 23fe3d8 <_ZN6String6concatEPKcj+0x34>
    unsigned int newlen = len + length;
 23fe3b4:	6885      	ldr	r5, [r0, #8]
 23fe3b6:	4415      	add	r5, r2
    if (!reserve(newlen)) {
 23fe3b8:	4629      	mov	r1, r5
 23fe3ba:	f7ff ff4d 	bl	23fe258 <_ZN6String7reserveEj>
 23fe3be:	2800      	cmp	r0, #0
 23fe3c0:	d0f5      	beq.n	23fe3ae <_ZN6String6concatEPKcj+0xa>
    memcpy(buffer + len, cstr, length);
 23fe3c2:	68a3      	ldr	r3, [r4, #8]
 23fe3c4:	6820      	ldr	r0, [r4, #0]
 23fe3c6:	4632      	mov	r2, r6
 23fe3c8:	4418      	add	r0, r3
 23fe3ca:	4639      	mov	r1, r7
 23fe3cc:	f000 ff62 	bl	23ff294 <memcpy>
    buffer[newlen] = 0;
 23fe3d0:	2200      	movs	r2, #0
 23fe3d2:	6823      	ldr	r3, [r4, #0]
 23fe3d4:	555a      	strb	r2, [r3, r5]
    len = newlen;
 23fe3d6:	60a5      	str	r5, [r4, #8]
        return 1;
 23fe3d8:	2001      	movs	r0, #1
 23fe3da:	e7e9      	b.n	23fe3b0 <_ZN6String6concatEPKcj+0xc>

023fe3dc <_ZNK6String9compareToEPKc>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const char* cstr) const
{
 23fe3dc:	4602      	mov	r2, r0
    if (!buffer || !cstr) {
 23fe3de:	6800      	ldr	r0, [r0, #0]
{
 23fe3e0:	460b      	mov	r3, r1
    if (!buffer || !cstr) {
 23fe3e2:	b160      	cbz	r0, 23fe3fe <_ZNK6String9compareToEPKc+0x22>
 23fe3e4:	b939      	cbnz	r1, 23fe3f6 <_ZNK6String9compareToEPKc+0x1a>
        if (cstr && cstr[0] != '\0') {
            return 0 - (unsigned char)cstr[0];
        }
        if (buffer && len > 0) {
 23fe3e6:	6891      	ldr	r1, [r2, #8]
 23fe3e8:	b139      	cbz	r1, 23fe3fa <_ZNK6String9compareToEPKc+0x1e>
            return (unsigned char)buffer[0];
 23fe3ea:	7800      	ldrb	r0, [r0, #0]
 23fe3ec:	4770      	bx	lr
        if (cstr && cstr[0] != '\0') {
 23fe3ee:	7818      	ldrb	r0, [r3, #0]
 23fe3f0:	b140      	cbz	r0, 23fe404 <_ZNK6String9compareToEPKc+0x28>
            return 0 - (unsigned char)cstr[0];
 23fe3f2:	4240      	negs	r0, r0
 23fe3f4:	4770      	bx	lr
        }
        return 0;
    }
    return strcmp(buffer, cstr);
 23fe3f6:	f7fb bbcd 	b.w	23f9b94 <strcmp>
        return 0;
 23fe3fa:	4608      	mov	r0, r1
 23fe3fc:	4770      	bx	lr
        if (cstr && cstr[0] != '\0') {
 23fe3fe:	2900      	cmp	r1, #0
 23fe400:	d1f5      	bne.n	23fe3ee <_ZNK6String9compareToEPKc+0x12>
        return 0;
 23fe402:	4608      	mov	r0, r1
}
 23fe404:	4770      	bx	lr

023fe406 <_ZNK6StringltERKS_>:
    }
    return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
 23fe406:	b508      	push	{r3, lr}
    int compareTo(const String &s) const { return compareTo(s.buffer); }
 23fe408:	6809      	ldr	r1, [r1, #0]
 23fe40a:	f7ff ffe7 	bl	23fe3dc <_ZNK6String9compareToEPKc>
    return compareTo(rhs) < 0;
}
 23fe40e:	0fc0      	lsrs	r0, r0, #31
 23fe410:	bd08      	pop	{r3, pc}
	...

023fe414 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    static char dummy_writable_char;
    if (index >= len || !buffer) {
 23fe414:	6883      	ldr	r3, [r0, #8]
 23fe416:	428b      	cmp	r3, r1
 23fe418:	d901      	bls.n	23fe41e <_ZN6StringixEj+0xa>
 23fe41a:	6800      	ldr	r0, [r0, #0]
 23fe41c:	b918      	cbnz	r0, 23fe426 <_ZN6StringixEj+0x12>
        dummy_writable_char = 0;
 23fe41e:	2300      	movs	r3, #0
 23fe420:	4802      	ldr	r0, [pc, #8]	; (23fe42c <_ZN6StringixEj+0x18>)
 23fe422:	7003      	strb	r3, [r0, #0]
        return dummy_writable_char;
 23fe424:	4770      	bx	lr
    }
    return buffer[index];
 23fe426:	4408      	add	r0, r1
}
 23fe428:	4770      	bx	lr
 23fe42a:	bf00      	nop
 23fe42c:	1007af7c 	.word	0x1007af7c

023fe430 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:
            free(wakeupSource_);
            wakeupSource_ = nullptr;
        }
    }

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 23fe430:	b538      	push	{r3, r4, r5, lr}
 23fe432:	460c      	mov	r4, r1
 23fe434:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 23fe436:	f7fb fce9 	bl	23f9e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
 23fe43a:	b154      	cbz	r4, 23fe452 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 23fe43c:	8820      	ldrh	r0, [r4, #0]
 23fe43e:	f7fc fde5 	bl	23fb00c <malloc>
 23fe442:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 23fe444:	b128      	cbz	r0, 23fe452 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
 23fe446:	4621      	mov	r1, r4
 23fe448:	8822      	ldrh	r2, [r4, #0]
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
 23fe44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
 23fe44e:	f000 bf21 	b.w	23ff294 <memcpy>
    }
 23fe452:	bd38      	pop	{r3, r4, r5, pc}

023fe454 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 23fe454:	b538      	push	{r3, r4, r5, lr}
 23fe456:	460c      	mov	r4, r1
        error_ = result.error_;
 23fe458:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 23fe45c:	4605      	mov	r5, r0
        error_ = result.error_;
 23fe45e:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 23fe460:	f8d1 3006 	ldr.w	r3, [r1, #6]
 23fe464:	f8c0 3006 	str.w	r3, [r0, #6]
 23fe468:	894b      	ldrh	r3, [r1, #10]
 23fe46a:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 23fe46c:	f7fb fcce 	bl	23f9e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
 23fe470:	6823      	ldr	r3, [r4, #0]
 23fe472:	b113      	cbz	r3, 23fe47a <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
 23fe474:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
 23fe476:	2300      	movs	r3, #0
 23fe478:	6023      	str	r3, [r4, #0]
    }
 23fe47a:	bd38      	pop	{r3, r4, r5, pc}

023fe47c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
 23fe47c:	b507      	push	{r0, r1, r2, lr}
 23fe47e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fe480:	2100      	movs	r1, #0
{
 23fe482:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
 23fe484:	9100      	str	r1, [sp, #0]
 23fe486:	2001      	movs	r0, #1
 23fe488:	218c      	movs	r1, #140	; 0x8c
 23fe48a:	f7fc fca7 	bl	23faddc <system_reset>
}
 23fe48e:	b003      	add	sp, #12
 23fe490:	f85d fb04 	ldr.w	pc, [sp], #4

023fe494 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
 23fe494:	4601      	mov	r1, r0
    reset(0, flags);
 23fe496:	2000      	movs	r0, #0
 23fe498:	f7ff bff0 	b.w	23fe47c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

023fe49c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
 23fe49c:	2000      	movs	r0, #0
 23fe49e:	f7ff bff9 	b.w	23fe494 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

023fe4a4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 23fe4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe4a6:	4d2b      	ldr	r5, [pc, #172]	; (23fe554 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 23fe4a8:	7d0b      	ldrb	r3, [r1, #20]
 23fe4aa:	4604      	mov	r4, r0
 23fe4ac:	b08b      	sub	sp, #44	; 0x2c
 23fe4ae:	4608      	mov	r0, r1
 23fe4b0:	1daf      	adds	r7, r5, #6
 23fe4b2:	2b00      	cmp	r3, #0
 23fe4b4:	d036      	beq.n	23fe524 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
 23fe4b6:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 23fe4b8:	791b      	ldrb	r3, [r3, #4]
 23fe4ba:	2b00      	cmp	r3, #0
 23fe4bc:	d032      	beq.n	23fe524 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
              error_(SYSTEM_ERROR_NONE) {
 23fe4be:	2200      	movs	r2, #0
    SleepResult() {}
 23fe4c0:	4b25      	ldr	r3, [pc, #148]	; (23fe558 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 23fe4c2:	a902      	add	r1, sp, #8
 23fe4c4:	3004      	adds	r0, #4
 23fe4c6:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 23fe4c8:	e9cd 2202 	strd	r2, r2, [sp, #8]
 23fe4cc:	f7fc fc78 	bl	23fadc0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 23fe4d0:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 23fe4d4:	b200      	sxth	r0, r0
 23fe4d6:	f8c5 3006 	str.w	r3, [r5, #6]
 23fe4da:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 23fe4de:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 23fe4e2:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 23fe4e4:	9902      	ldr	r1, [sp, #8]
 23fe4e6:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 23fe4e8:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 23fe4ea:	f7ff ffa1 	bl	23fe430 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
 23fe4ee:	a802      	add	r0, sp, #8
 23fe4f0:	f7fb fc8c 	bl	23f9e0c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
 23fe4f4:	2300      	movs	r3, #0
 23fe4f6:	6023      	str	r3, [r4, #0]
 23fe4f8:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 23fe4fa:	71a3      	strb	r3, [r4, #6]
 23fe4fc:	8123      	strh	r3, [r4, #8]
 23fe4fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23fe502:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 23fe504:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 23fe508:	4620      	mov	r0, r4
        error_ = result.error_;
 23fe50a:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 23fe50c:	f8d5 3006 	ldr.w	r3, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
 23fe510:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 23fe512:	f8c4 3006 	str.w	r3, [r4, #6]
 23fe516:	88bb      	ldrh	r3, [r7, #4]
 23fe518:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 23fe51a:	f7ff ff89 	bl	23fe430 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 23fe51e:	4620      	mov	r0, r4
 23fe520:	b00b      	add	sp, #44	; 0x2c
 23fe522:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 23fe524:	2600      	movs	r6, #0
 23fe526:	2320      	movs	r3, #32
 23fe528:	e9cd 3602 	strd	r3, r6, [sp, #8]
 23fe52c:	4b0b      	ldr	r3, [pc, #44]	; (23fe55c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
 23fe52e:	aa02      	add	r2, sp, #8
 23fe530:	9300      	str	r3, [sp, #0]
 23fe532:	2032      	movs	r0, #50	; 0x32
 23fe534:	4633      	mov	r3, r6
 23fe536:	490a      	ldr	r1, [pc, #40]	; (23fe560 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
 23fe538:	f7fc fb7e 	bl	23fac38 <log_message>
            : wakeupSource_(nullptr),
 23fe53c:	f64f 62f2 	movw	r2, #65266	; 0xfef2
 23fe540:	4b05      	ldr	r3, [pc, #20]	; (23fe558 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 23fe542:	4804      	ldr	r0, [pc, #16]	; (23fe554 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
 23fe544:	a902      	add	r1, sp, #8
 23fe546:	e9cd 2303 	strd	r2, r3, [sp, #12]
              error_(SYSTEM_ERROR_NONE) {
 23fe54a:	9602      	str	r6, [sp, #8]
 23fe54c:	f7ff ff82 	bl	23fe454 <_ZN17SystemSleepResultaSEOS_.isra.0>
 23fe550:	e7cd      	b.n	23fe4ee <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
 23fe552:	bf00      	nop
 23fe554:	1007af80 	.word	0x1007af80
 23fe558:	ffff0000 	.word	0xffff0000
 23fe55c:	023ffd64 	.word	0x023ffd64
 23fe560:	023ff948 	.word	0x023ff948

023fe564 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fe564:	2202      	movs	r2, #2
 23fe566:	2000      	movs	r0, #0
 23fe568:	4b04      	ldr	r3, [pc, #16]	; (23fe57c <_GLOBAL__sub_I_System+0x18>)
 23fe56a:	601a      	str	r2, [r3, #0]
 23fe56c:	4b04      	ldr	r3, [pc, #16]	; (23fe580 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fe56e:	4a05      	ldr	r2, [pc, #20]	; (23fe584 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fe570:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fe574:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fe576:	f7fc bba5 	b.w	23facc4 <set_system_mode>
 23fe57a:	bf00      	nop
 23fe57c:	1007af8c 	.word	0x1007af8c
 23fe580:	1007af80 	.word	0x1007af80
 23fe584:	ffff0000 	.word	0xffff0000

023fe588 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fe588:	4b02      	ldr	r3, [pc, #8]	; (23fe594 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fe58a:	681a      	ldr	r2, [r3, #0]
 23fe58c:	4b02      	ldr	r3, [pc, #8]	; (23fe598 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fe58e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fe590:	4770      	bx	lr
 23fe592:	bf00      	nop
 23fe594:	1007ae04 	.word	0x1007ae04
 23fe598:	1007af90 	.word	0x1007af90

023fe59c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fe59c:	4770      	bx	lr

023fe59e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe59e:	7441      	strb	r1, [r0, #17]
}
 23fe5a0:	4770      	bx	lr

023fe5a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fe5a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fe5a4:	7c00      	ldrb	r0, [r0, #16]
 23fe5a6:	f7fc fa9f 	bl	23faae8 <hal_usart_available_data_for_write>
}
 23fe5aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe5ae:	bd08      	pop	{r3, pc}

023fe5b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fe5b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fe5b2:	7c00      	ldrb	r0, [r0, #16]
 23fe5b4:	f7fc fa52 	bl	23faa5c <hal_usart_available>
}
 23fe5b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe5bc:	bd08      	pop	{r3, pc}

023fe5be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fe5be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fe5c0:	7c00      	ldrb	r0, [r0, #16]
 23fe5c2:	f7fc fa67 	bl	23faa94 <hal_usart_peek>
}
 23fe5c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe5ca:	bd08      	pop	{r3, pc}

023fe5cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fe5cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fe5ce:	7c00      	ldrb	r0, [r0, #16]
 23fe5d0:	f7fc fa52 	bl	23faa78 <hal_usart_read>
}
 23fe5d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe5d8:	bd08      	pop	{r3, pc}

023fe5da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fe5da:	7c00      	ldrb	r0, [r0, #16]
 23fe5dc:	f7fc ba68 	b.w	23faab0 <hal_usart_flush>

023fe5e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fe5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe5e2:	7c45      	ldrb	r5, [r0, #17]
{
 23fe5e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe5e6:	b12d      	cbz	r5, 23fe5f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fe5e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fe5ea:	b003      	add	sp, #12
 23fe5ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fe5f0:	f7fc ba26 	b.w	23faa40 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fe5f4:	7c00      	ldrb	r0, [r0, #16]
 23fe5f6:	9101      	str	r1, [sp, #4]
 23fe5f8:	f7fc fa76 	bl	23faae8 <hal_usart_available_data_for_write>
 23fe5fc:	2800      	cmp	r0, #0
 23fe5fe:	9901      	ldr	r1, [sp, #4]
 23fe600:	dcf2      	bgt.n	23fe5e8 <_ZN11USARTSerial5writeEh+0x8>
}
 23fe602:	4628      	mov	r0, r5
 23fe604:	b003      	add	sp, #12
 23fe606:	bd30      	pop	{r4, r5, pc}

023fe608 <_ZN11USARTSerialD0Ev>:
 23fe608:	b510      	push	{r4, lr}
 23fe60a:	4604      	mov	r4, r0
 23fe60c:	2114      	movs	r1, #20
 23fe60e:	f7fb faf4 	bl	23f9bfa <_ZdlPvj>
 23fe612:	4620      	mov	r0, r4
 23fe614:	bd10      	pop	{r4, pc}
	...

023fe618 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe618:	b510      	push	{r4, lr}
 23fe61a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe61e:	4604      	mov	r4, r0
 23fe620:	4608      	mov	r0, r1
 23fe622:	4611      	mov	r1, r2
 23fe624:	2200      	movs	r2, #0
 23fe626:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fe62a:	4b04      	ldr	r3, [pc, #16]	; (23fe63c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fe62c:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fe62e:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe630:	2301      	movs	r3, #1
 23fe632:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fe634:	f7fc fa74 	bl	23fab20 <hal_usart_init_ex>
}
 23fe638:	4620      	mov	r0, r4
 23fe63a:	bd10      	pop	{r4, pc}
 23fe63c:	023ffdb0 	.word	0x023ffdb0

023fe640 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
 23fe640:	2300      	movs	r3, #0
 23fe642:	7c00      	ldrb	r0, [r0, #16]
 23fe644:	f7fc ba5e 	b.w	23fab04 <hal_usart_begin_config>

023fe648 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
 23fe648:	2200      	movs	r2, #0
 23fe64a:	f7ff bff9 	b.w	23fe640 <_ZN11USARTSerial5beginEmm>

023fe64e <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
 23fe64e:	7c00      	ldrb	r0, [r0, #16]
 23fe650:	f7fc b9e8 	b.w	23faa24 <hal_usart_end>

023fe654 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fe654:	7c00      	ldrb	r0, [r0, #16]
 23fe656:	f7fc ba39 	b.w	23faacc <hal_usart_is_enabled>

023fe65a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fe65a:	7441      	strb	r1, [r0, #17]
}
 23fe65c:	4770      	bx	lr

023fe65e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe65e:	4770      	bx	lr

023fe660 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fe660:	4770      	bx	lr

023fe662 <_ZN9USBSerial4readEv>:
{
 23fe662:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fe664:	2100      	movs	r1, #0
 23fe666:	7c00      	ldrb	r0, [r0, #16]
 23fe668:	f7fc faae 	bl	23fabc8 <HAL_USB_USART_Receive_Data>
}
 23fe66c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe670:	bd08      	pop	{r3, pc}

023fe672 <_ZN9USBSerial4peekEv>:
{
 23fe672:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fe674:	2101      	movs	r1, #1
 23fe676:	7c00      	ldrb	r0, [r0, #16]
 23fe678:	f7fc faa6 	bl	23fabc8 <HAL_USB_USART_Receive_Data>
}
 23fe67c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fe680:	bd08      	pop	{r3, pc}

023fe682 <_ZN9USBSerial17availableForWriteEv>:
{
 23fe682:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fe684:	7c00      	ldrb	r0, [r0, #16]
 23fe686:	f7fc fa91 	bl	23fabac <HAL_USB_USART_Available_Data_For_Write>
}
 23fe68a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe68e:	bd08      	pop	{r3, pc}

023fe690 <_ZN9USBSerial9availableEv>:
{
 23fe690:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fe692:	7c00      	ldrb	r0, [r0, #16]
 23fe694:	f7fc fa7c 	bl	23fab90 <HAL_USB_USART_Available_Data>
}
 23fe698:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fe69c:	bd08      	pop	{r3, pc}

023fe69e <_ZN9USBSerial5writeEh>:
{
 23fe69e:	b513      	push	{r0, r1, r4, lr}
 23fe6a0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe6a2:	7c00      	ldrb	r0, [r0, #16]
{
 23fe6a4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fe6a6:	f7fc fa81 	bl	23fabac <HAL_USB_USART_Available_Data_For_Write>
 23fe6aa:	2800      	cmp	r0, #0
 23fe6ac:	9901      	ldr	r1, [sp, #4]
 23fe6ae:	dc01      	bgt.n	23fe6b4 <_ZN9USBSerial5writeEh+0x16>
 23fe6b0:	7c60      	ldrb	r0, [r4, #17]
 23fe6b2:	b120      	cbz	r0, 23fe6be <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fe6b4:	7c20      	ldrb	r0, [r4, #16]
 23fe6b6:	f7fc fa95 	bl	23fabe4 <HAL_USB_USART_Send_Data>
 23fe6ba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fe6be:	b002      	add	sp, #8
 23fe6c0:	bd10      	pop	{r4, pc}

023fe6c2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fe6c2:	7c00      	ldrb	r0, [r0, #16]
 23fe6c4:	f7fc ba9c 	b.w	23fac00 <HAL_USB_USART_Flush_Data>

023fe6c8 <_ZN9USBSerialD0Ev>:
 23fe6c8:	b510      	push	{r4, lr}
 23fe6ca:	4604      	mov	r4, r0
 23fe6cc:	2114      	movs	r1, #20
 23fe6ce:	f7fb fa94 	bl	23f9bfa <_ZdlPvj>
 23fe6d2:	4620      	mov	r0, r4
 23fe6d4:	bd10      	pop	{r4, pc}
	...

023fe6d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe6d8:	b510      	push	{r4, lr}
 23fe6da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fe6de:	4604      	mov	r4, r0
 23fe6e0:	4608      	mov	r0, r1
 23fe6e2:	2100      	movs	r1, #0
 23fe6e4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fe6e8:	4b04      	ldr	r3, [pc, #16]	; (23fe6fc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fe6ea:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fe6ec:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fe6ee:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fe6f0:	4611      	mov	r1, r2
  _blocking = true;
 23fe6f2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fe6f4:	f7fc fa22 	bl	23fab3c <HAL_USB_USART_Init>
}
 23fe6f8:	4620      	mov	r0, r4
 23fe6fa:	bd10      	pop	{r4, pc}
 23fe6fc:	023ffde4 	.word	0x023ffde4

023fe700 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fe700:	2200      	movs	r2, #0
 23fe702:	7c00      	ldrb	r0, [r0, #16]
 23fe704:	f7fc ba28 	b.w	23fab58 <HAL_USB_USART_Begin>

023fe708 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
 23fe708:	7c00      	ldrb	r0, [r0, #16]
 23fe70a:	f7fc ba33 	b.w	23fab74 <HAL_USB_USART_End>

023fe70e <_Z19acquireSerialBufferv>:
{
 23fe70e:	b510      	push	{r4, lr}
 23fe710:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fe712:	2214      	movs	r2, #20
 23fe714:	2100      	movs	r1, #0
 23fe716:	f000 fde4 	bl	23ff2e2 <memset>
}
 23fe71a:	4620      	mov	r0, r4
 23fe71c:	bd10      	pop	{r4, pc}
	...

023fe720 <_Z16_fetch_usbserialv>:
{
 23fe720:	b510      	push	{r4, lr}
 23fe722:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fe724:	a803      	add	r0, sp, #12
 23fe726:	f7ff fff2 	bl	23fe70e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fe72a:	4c0c      	ldr	r4, [pc, #48]	; (23fe75c <_Z16_fetch_usbserialv+0x3c>)
 23fe72c:	e8d4 1f8f 	ldab	r1, [r4]
 23fe730:	f011 0101 	ands.w	r1, r1, #1
 23fe734:	d10f      	bne.n	23fe756 <_Z16_fetch_usbserialv+0x36>
 23fe736:	4620      	mov	r0, r4
 23fe738:	9101      	str	r1, [sp, #4]
 23fe73a:	f7fc fcf3 	bl	23fb124 <__cxa_guard_acquire>
 23fe73e:	9901      	ldr	r1, [sp, #4]
 23fe740:	b148      	cbz	r0, 23fe756 <_Z16_fetch_usbserialv+0x36>
 23fe742:	aa03      	add	r2, sp, #12
 23fe744:	4806      	ldr	r0, [pc, #24]	; (23fe760 <_Z16_fetch_usbserialv+0x40>)
 23fe746:	f7ff ffc7 	bl	23fe6d8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fe74a:	4620      	mov	r0, r4
 23fe74c:	f7fc fcf8 	bl	23fb140 <__cxa_guard_release>
 23fe750:	4804      	ldr	r0, [pc, #16]	; (23fe764 <_Z16_fetch_usbserialv+0x44>)
 23fe752:	f000 fd90 	bl	23ff276 <atexit>
	return _usbserial;
}
 23fe756:	4802      	ldr	r0, [pc, #8]	; (23fe760 <_Z16_fetch_usbserialv+0x40>)
 23fe758:	b008      	add	sp, #32
 23fe75a:	bd10      	pop	{r4, pc}
 23fe75c:	1007af94 	.word	0x1007af94
 23fe760:	1007af98 	.word	0x1007af98
 23fe764:	023fe65f 	.word	0x023fe65f

023fe768 <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>:
	__i += __n;
 23fe768:	2228      	movs	r2, #40	; 0x28
 23fe76a:	6803      	ldr	r3, [r0, #0]
 23fe76c:	fb02 3101 	mla	r1, r2, r1, r3
 23fe770:	6001      	str	r1, [r0, #0]
    }
 23fe772:	4770      	bx	lr

023fe774 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>:
        v = nativeToBigEndian(v);
        CHECK(write((const char*)&v, sizeof(v)));
        return 0;
    }

    int write(const char* data, size_t size) {
 23fe774:	b538      	push	{r3, r4, r5, lr}
        size_t n = stream_.write((const uint8_t*)data, size);
 23fe776:	6803      	ldr	r3, [r0, #0]
    int write(const char* data, size_t size) {
 23fe778:	4615      	mov	r5, r2
        size_t n = stream_.write((const uint8_t*)data, size);
 23fe77a:	68db      	ldr	r3, [r3, #12]
    int write(const char* data, size_t size) {
 23fe77c:	4604      	mov	r4, r0
        size_t n = stream_.write((const uint8_t*)data, size);
 23fe77e:	4798      	blx	r3
        if (n != size) {
 23fe780:	4285      	cmp	r5, r0
 23fe782:	d005      	beq.n	23fe790 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0+0x1c>
    int getWriteError() const { return write_error; }
 23fe784:	6860      	ldr	r0, [r4, #4]
            int err = stream_.getWriteError();
            return (err < 0) ? err : Error::IO;
 23fe786:	2800      	cmp	r0, #0
 23fe788:	bfa8      	it	ge
 23fe78a:	f06f 00db 	mvnge.w	r0, #219	; 0xdb
        }
        return 0;
    }
 23fe78e:	bd38      	pop	{r3, r4, r5, pc}
        return 0;
 23fe790:	2000      	movs	r0, #0
 23fe792:	e7fc      	b.n	23fe78e <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0+0x1a>

023fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>:
    int writeUint8(uint8_t val) {
 23fe794:	b507      	push	{r0, r1, r2, lr}
 23fe796:	2201      	movs	r2, #1
 23fe798:	f88d 1007 	strb.w	r1, [sp, #7]
 23fe79c:	f10d 0107 	add.w	r1, sp, #7
 23fe7a0:	f7ff ffe8 	bl	23fe774 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
    }
 23fe7a4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fe7a8:	b003      	add	sp, #12
 23fe7aa:	f85d fb04 	ldr.w	pc, [sp], #4

023fe7ae <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>:
        }
    }
    return 0;
}

int writeCborHead(EncodingStream& stream, int type, uint64_t arg) {
 23fe7ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 23fe7b0:	461e      	mov	r6, r3
    type <<= 5;
    if (arg < 24) {
 23fe7b2:	2a18      	cmp	r2, #24
 23fe7b4:	f176 0300 	sbcs.w	r3, r6, #0
int writeCborHead(EncodingStream& stream, int type, uint64_t arg) {
 23fe7b8:	4604      	mov	r4, r0
 23fe7ba:	4615      	mov	r5, r2
 23fe7bc:	6800      	ldr	r0, [r0, #0]
    type <<= 5;
 23fe7be:	ea4f 1141 	mov.w	r1, r1, lsl #5
    if (arg < 24) {
 23fe7c2:	d207      	bcs.n	23fe7d4 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x26>
        CHECK(stream.writeUint8(arg | type));
 23fe7c4:	4311      	orrs	r1, r2
 23fe7c6:	b2c9      	uxtb	r1, r1
    } else if (arg <= 0xff) {
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
        CHECK(stream.writeUint8(arg));
 23fe7c8:	f7ff ffe4 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
        CHECK(write((const char*)&val, sizeof(val)));
 23fe7cc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    } else {
        CHECK(stream.writeUint8(27 /* 8-byte argument */ | type));
        CHECK(stream.writeUint64Be(arg));
    }
    return 0;
}
 23fe7d0:	b002      	add	sp, #8
 23fe7d2:	bd70      	pop	{r4, r5, r6, pc}
    } else if (arg <= 0xff) {
 23fe7d4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 23fe7d8:	f176 0300 	sbcs.w	r3, r6, #0
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
 23fe7dc:	b249      	sxtb	r1, r1
    } else if (arg <= 0xff) {
 23fe7de:	d20a      	bcs.n	23fe7f6 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x48>
        CHECK(stream.writeUint8(24 /* 1-byte argument */ | type));
 23fe7e0:	f041 0118 	orr.w	r1, r1, #24
 23fe7e4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 23fe7e8:	f7ff ffd4 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fe7ec:	2800      	cmp	r0, #0
 23fe7ee:	dbef      	blt.n	23fe7d0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
        CHECK(stream.writeUint8(arg));
 23fe7f0:	6820      	ldr	r0, [r4, #0]
 23fe7f2:	b2e9      	uxtb	r1, r5
 23fe7f4:	e7e8      	b.n	23fe7c8 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x1a>
    } else if (arg <= 0xffff) {
 23fe7f6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 23fe7fa:	f176 0300 	sbcs.w	r3, r6, #0
 23fe7fe:	d210      	bcs.n	23fe822 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x74>
        CHECK(stream.writeUint8(25 /* 2-byte argument */ | type));
 23fe800:	f041 0119 	orr.w	r1, r1, #25
 23fe804:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 23fe808:	f7ff ffc4 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fe80c:	2800      	cmp	r0, #0
 23fe80e:	dbdf      	blt.n	23fe7d0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
        CHECK(write((const char*)&val, sizeof(val)));
 23fe810:	2202      	movs	r2, #2
inline int16_t reverseByteOrder(int16_t val) {
    return __builtin_bswap16(val);
}

inline uint16_t reverseByteOrder(uint16_t val) {
    return __builtin_bswap16(val);
 23fe812:	ba6d      	rev16	r5, r5
        val = nativeToBigEndian(val);
 23fe814:	f8ad 5000 	strh.w	r5, [sp]
        CHECK(write((const char*)&val, sizeof(val)));
 23fe818:	4669      	mov	r1, sp
 23fe81a:	6820      	ldr	r0, [r4, #0]
 23fe81c:	f7ff ffaa 	bl	23fe774 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
 23fe820:	e7d4      	b.n	23fe7cc <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x1e>
    } else if (arg <= 0xffffffffu) {
 23fe822:	b95e      	cbnz	r6, 23fe83c <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x8e>
        CHECK(stream.writeUint8(26 /* 4-byte argument */ | type));
 23fe824:	f041 011a 	orr.w	r1, r1, #26
 23fe828:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
 23fe82c:	f7ff ffb2 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fe830:	2800      	cmp	r0, #0
 23fe832:	dbcd      	blt.n	23fe7d0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
inline int32_t reverseByteOrder(int32_t val) {
    return __builtin_bswap32(val);
}

inline uint32_t reverseByteOrder(uint32_t val) {
    return __builtin_bswap32(val);
 23fe834:	ba2d      	rev	r5, r5
        CHECK(write((const char*)&val, sizeof(val)));
 23fe836:	2204      	movs	r2, #4
        val = nativeToBigEndian(val);
 23fe838:	9500      	str	r5, [sp, #0]
        CHECK(write((const char*)&val, sizeof(val)));
 23fe83a:	e7ed      	b.n	23fe818 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x6a>
        CHECK(stream.writeUint8(27 /* 8-byte argument */ | type));
 23fe83c:	f041 011b 	orr.w	r1, r1, #27
 23fe840:	f001 01fb 	and.w	r1, r1, #251	; 0xfb
 23fe844:	f7ff ffa6 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23fe848:	2800      	cmp	r0, #0
 23fe84a:	dbc1      	blt.n	23fe7d0 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x22>
inline int64_t reverseByteOrder(int64_t val) {
    return __builtin_bswap64(val);
}

inline uint64_t reverseByteOrder(uint64_t val) {
    return __builtin_bswap64(val);
 23fe84c:	ba2d      	rev	r5, r5
 23fe84e:	ba36      	rev	r6, r6
        CHECK(write((const char*)&val, sizeof(val)));
 23fe850:	2208      	movs	r2, #8
        val = nativeToBigEndian(val);
 23fe852:	e9cd 6500 	strd	r6, r5, [sp]
        CHECK(write((const char*)&val, sizeof(val)));
 23fe856:	e7df      	b.n	23fe818 <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy+0x6a>

023fe858 <_ZN8particle12_GLOBAL__N_122writeCborSignedIntegerERNS0_14EncodingStreamEx>:
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
    return 0;
}

int writeCborSignedInteger(EncodingStream& stream, int64_t val) {
    if (val < 0) {
 23fe858:	1e19      	subs	r1, r3, #0
        val = -(val + 1);
        CHECK(writeCborHead(stream, 1 /* Negative integer */, val));
 23fe85a:	bfbd      	ittte	lt
 23fe85c:	43cb      	mvnlt	r3, r1
 23fe85e:	43d2      	mvnlt	r2, r2
 23fe860:	2101      	movlt	r1, #1
    } else {
        CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23fe862:	2100      	movge	r1, #0
int writeCborSignedInteger(EncodingStream& stream, int64_t val) {
 23fe864:	b510      	push	{r4, lr}
        CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23fe866:	f7ff ffa2 	bl	23fe7ae <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fe86a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    }
    return 0;
}
 23fe86e:	bd10      	pop	{r4, pc}

023fe870 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>:
int readCborTextString(DecodingStream& stream, const CborHead& head, String& str) {
    CHECK(readCborString(stream, head, str, readAndAppendToString));
    return 0;
}

int writeCborTextString(EncodingStream& stream, const String& str) {
 23fe870:	b538      	push	{r3, r4, r5, lr}
 23fe872:	460c      	mov	r4, r1
    CHECK(writeCborHead(stream, 3 /* Text string */, str.length()));
 23fe874:	688a      	ldr	r2, [r1, #8]
 23fe876:	2300      	movs	r3, #0
 23fe878:	2103      	movs	r1, #3
int writeCborTextString(EncodingStream& stream, const String& str) {
 23fe87a:	4605      	mov	r5, r0
    CHECK(writeCborHead(stream, 3 /* Text string */, str.length()));
 23fe87c:	f7ff ff97 	bl	23fe7ae <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23fe880:	2800      	cmp	r0, #0
 23fe882:	db06      	blt.n	23fe892 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String+0x22>
    CHECK(stream.write(str.c_str(), str.length()));
 23fe884:	68a2      	ldr	r2, [r4, #8]
 23fe886:	6821      	ldr	r1, [r4, #0]
 23fe888:	6828      	ldr	r0, [r5, #0]
 23fe88a:	f7ff ff73 	bl	23fe774 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
 23fe88e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
    return 0;
}
 23fe892:	bd38      	pop	{r3, r4, r5, pc}

023fe894 <_ZNK8particle7Variant6toJSONEv>:
    default:
        return false;
    }
}

String Variant::toJSON() const {
 23fe894:	b570      	push	{r4, r5, r6, lr}
 23fe896:	b088      	sub	sp, #32
    String s;
 23fe898:	ad04      	add	r5, sp, #16
String Variant::toJSON() const {
 23fe89a:	460e      	mov	r6, r1
 23fe89c:	4604      	mov	r4, r0
    String s;
 23fe89e:	490f      	ldr	r1, [pc, #60]	; (23fe8dc <_ZNK8particle7Variant6toJSONEv+0x48>)
 23fe8a0:	4628      	mov	r0, r5
 23fe8a2:	f7ff fd20 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
    Print() : write_error(0) {}
 23fe8a6:	2300      	movs	r3, #0
 23fe8a8:	9302      	str	r3, [sp, #8]
            s_(str) {
 23fe8aa:	4b0d      	ldr	r3, [pc, #52]	; (23fe8e0 <_ZNK8particle7Variant6toJSONEv+0x4c>)
        return printVariant(var);
 23fe8ac:	4631      	mov	r1, r6
 23fe8ae:	a801      	add	r0, sp, #4
            s_(str) {
 23fe8b0:	9301      	str	r3, [sp, #4]
 23fe8b2:	9503      	str	r5, [sp, #12]
        return printVariant(var);
 23fe8b4:	f7ff fc6e 	bl	23fe194 <_ZN5Print12printVariantERKN8particle7VariantE>
    OutputStringStream stream(s);
    stream.print(*this);
    if (stream.getWriteError()) {
 23fe8b8:	9b02      	ldr	r3, [sp, #8]
 23fe8ba:	b14b      	cbz	r3, 23fe8d0 <_ZNK8particle7Variant6toJSONEv+0x3c>
        return String();
 23fe8bc:	4620      	mov	r0, r4
 23fe8be:	4907      	ldr	r1, [pc, #28]	; (23fe8dc <_ZNK8particle7Variant6toJSONEv+0x48>)
 23fe8c0:	f7ff fd11 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
    String s;
 23fe8c4:	4628      	mov	r0, r5
 23fe8c6:	f7ff fca9 	bl	23fe21c <_ZN6StringD1Ev>
    }
    return s;
}
 23fe8ca:	4620      	mov	r0, r4
 23fe8cc:	b008      	add	sp, #32
 23fe8ce:	bd70      	pop	{r4, r5, r6, pc}
    return s;
 23fe8d0:	4629      	mov	r1, r5
 23fe8d2:	4620      	mov	r0, r4
 23fe8d4:	f7ff fd39 	bl	23fe34a <_ZN6StringC1EOS_>
 23fe8d8:	e7f4      	b.n	23fe8c4 <_ZNK8particle7Variant6toJSONEv+0x30>
 23fe8da:	bf00      	nop
 23fe8dc:	023ffc6a 	.word	0x023ffc6a
 23fe8e0:	023ffd54 	.word	0x023ffd54

023fe8e4 <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>:
    struct pair
 23fe8e4:	b510      	push	{r4, lr}
 23fe8e6:	4604      	mov	r4, r0
      { _M_reset(); }
 23fe8e8:	3010      	adds	r0, #16
 23fe8ea:	f7fb fce9 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fe8ee:	4620      	mov	r0, r4
 23fe8f0:	f7ff fc94 	bl	23fe21c <_ZN6StringD1Ev>
 23fe8f4:	4620      	mov	r0, r4
 23fe8f6:	bd10      	pop	{r4, pc}

023fe8f8 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>:
    get(variant<_Types...>& __v)
 23fe8f8:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fe8fa:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fe8fc:	2b0a      	cmp	r3, #10
 23fe8fe:	d004      	beq.n	23fe90a <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fe900:	3bff      	subs	r3, #255	; 0xff
 23fe902:	4258      	negs	r0, r3
 23fe904:	4158      	adcs	r0, r3
 23fe906:	f7fc fd57 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
    }
 23fe90a:	bd08      	pop	{r3, pc}

023fe90c <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>:
    T& as() {
 23fe90c:	b510      	push	{r4, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fe90e:	7c03      	ldrb	r3, [r0, #16]
 23fe910:	4604      	mov	r4, r0
        if (!is<T>()) {
 23fe912:	2b0a      	cmp	r3, #10
    T& as() {
 23fe914:	b088      	sub	sp, #32
        if (!is<T>()) {
 23fe916:	d02a      	beq.n	23fe96e <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x62>
        return std::visit(ConvertToVisitor<T>(), v_);
 23fe918:	2200      	movs	r2, #0

  template<typename _Visitor, typename... _Variants>
    constexpr decltype(auto)
    visit(_Visitor&& __visitor, _Variants&&... __variants)
    {
      if ((__variants.valueless_by_exception() || ...))
 23fe91a:	2bff      	cmp	r3, #255	; 0xff
 23fe91c:	f88d 2010 	strb.w	r2, [sp, #16]
 23fe920:	d101      	bne.n	23fe926 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x1a>
  { _GLIBCXX_THROW_OR_ABORT(bad_variant_access(__what)); }
 23fe922:	f7fc fbb9 	bl	23fb098 <abort>
			   std::forward<_Variants>(__variants)...);
 23fe926:	4a1b      	ldr	r2, [pc, #108]	; (23fe994 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x88>)
	  return make_signed_t<__index_type>(this->_M_index);
 23fe928:	b25b      	sxtb	r3, r3
			   std::forward<_Variants>(__variants)...);
 23fe92a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 23fe92e:	a904      	add	r1, sp, #16
 23fe930:	4602      	mov	r2, r0
 23fe932:	4668      	mov	r0, sp
 23fe934:	4798      	blx	r3
	  if (index() == __index)
 23fe936:	7c23      	ldrb	r3, [r4, #16]
 23fe938:	2b0a      	cmp	r3, #10
 23fe93a:	d11d      	bne.n	23fe978 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x6c>
	    std::get<__index>(*this) = std::forward<_Tp>(__rhs);
 23fe93c:	4669      	mov	r1, sp
 23fe93e:	a804      	add	r0, sp, #16
 23fe940:	f7fc fd9a 	bl	23fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
 23fe944:	4620      	mov	r0, r4
 23fe946:	f7ff ffd7 	bl	23fe8f8 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
 23fe94a:	9a04      	ldr	r2, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe94c:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 23fe94e:	6002      	str	r2, [r0, #0]
 23fe950:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe952:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe954:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe956:	6042      	str	r2, [r0, #4]
 23fe958:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe95a:	9305      	str	r3, [sp, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe95c:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 23fe95e:	6082      	str	r2, [r0, #8]
class Map {
 23fe960:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 23fe962:	9306      	str	r3, [sp, #24]
 23fe964:	f7fc fd97 	bl	23fb496 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
 23fe968:	4668      	mov	r0, sp
 23fe96a:	f7fc fd94 	bl	23fb496 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEED1Ev>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23fe96e:	4620      	mov	r0, r4
 23fe970:	f7ff ffc2 	bl	23fe8f8 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
    }
 23fe974:	b008      	add	sp, #32
 23fe976:	bd10      	pop	{r4, pc}
	      this->_M_reset();
 23fe978:	4620      	mov	r0, r4
 23fe97a:	f7fb fca1 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
      __v._M_index = _Np;
 23fe97e:	230a      	movs	r3, #10
      ::new ((void*)std::addressof(__storage))
 23fe980:	4669      	mov	r1, sp
 23fe982:	4620      	mov	r0, r4
      __v._M_index = _Np;
 23fe984:	7423      	strb	r3, [r4, #16]
      ::new ((void*)std::addressof(__storage))
 23fe986:	f7fc fd77 	bl	23fb478 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EEC1EOS5_>
	  return std::get<_Np>(*this);
 23fe98a:	4620      	mov	r0, r4
 23fe98c:	f7ff ffb4 	bl	23fe8f8 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERSH_>
 23fe990:	e7ea      	b.n	23fe968 <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v+0x5c>
 23fe992:	bf00      	nop
 23fe994:	023ffbe4 	.word	0x023ffbe4

023fe998 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fe998:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fe99a:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fe99c:	2b09      	cmp	r3, #9
 23fe99e:	d004      	beq.n	23fe9aa <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fe9a0:	3bff      	subs	r3, #255	; 0xff
 23fe9a2:	4258      	negs	r0, r3
 23fe9a4:	4158      	adcs	r0, r3
 23fe9a6:	f7fc fd07 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
    }
 23fe9aa:	bd08      	pop	{r3, pc}

023fe9ac <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_>:
    return data_ + size_;
 23fe9ac:	2328      	movs	r3, #40	; 0x28
     *
     * @param key Key.
     * @return Iterator.
     */
    template<typename T>
    Iterator lowerBound(const T& key) {
 23fe9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fe9b2:	460f      	mov	r7, r1
 23fe9b4:	e9d0 6400 	ldrd	r6, r4, [r0]
 23fe9b8:	435c      	muls	r4, r3
      return __last - __first;
 23fe9ba:	4b13      	ldr	r3, [pc, #76]	; (23fea08 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x5c>)
 23fe9bc:	10e4      	asrs	r4, r4, #3
 23fe9be:	435c      	muls	r4, r3
 23fe9c0:	b086      	sub	sp, #24
      while (__len > 0)
 23fe9c2:	2c00      	cmp	r4, #0
 23fe9c4:	dd1c      	ble.n	23fea00 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x54>
	  _DistanceType __half = __len >> 1;
 23fe9c6:	1065      	asrs	r5, r4, #1
    inline _GLIBCXX17_CONSTEXPR void
    advance(_InputIterator& __i, _Distance __n)
    {
      // concept requirements -- taken care of in __advance
      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
 23fe9c8:	4629      	mov	r1, r5
 23fe9ca:	a801      	add	r0, sp, #4
	  _ForwardIterator __middle = __first;
 23fe9cc:	9601      	str	r6, [sp, #4]
 23fe9ce:	f7ff fecb 	bl	23fe768 <_ZSt9__advanceIPSt4pairIK6StringN8particle7VariantEEiEvRT_T0_St26random_access_iterator_tag.isra.0>
        return std::lower_bound(entries_.begin(), entries_.end(), key, [this](const Entry& entry, const T& key) {
            return this->cmp_(entry.first, key);
 23fe9d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 23fe9d6:	6839      	ldr	r1, [r7, #0]
 23fe9d8:	a802      	add	r0, sp, #8
 23fe9da:	f7ff fc84 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 23fe9de:	4640      	mov	r0, r8
 23fe9e0:	a902      	add	r1, sp, #8
 23fe9e2:	f7ff fd10 	bl	23fe406 <_ZNK6StringltERKS_>
 23fe9e6:	4680      	mov	r8, r0
 23fe9e8:	a802      	add	r0, sp, #8
 23fe9ea:	f7ff fc17 	bl	23fe21c <_ZN6StringD1Ev>
	  if (__comp(__middle, __val))
 23fe9ee:	f1b8 0f00 	cmp.w	r8, #0
 23fe9f2:	d003      	beq.n	23fe9fc <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x50>
	      __first = __middle;
 23fe9f4:	9e01      	ldr	r6, [sp, #4]
	      __len = __len - __half - 1;
 23fe9f6:	1b65      	subs	r5, r4, r5
	      ++__first;
 23fe9f8:	3628      	adds	r6, #40	; 0x28
	      __len = __len - __half - 1;
 23fe9fa:	3d01      	subs	r5, #1
      while (__len > 0)
 23fe9fc:	462c      	mov	r4, r5
 23fe9fe:	e7e0      	b.n	23fe9c2 <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_+0x16>
        });
    }
 23fea00:	4630      	mov	r0, r6
 23fea02:	b006      	add	sp, #24
 23fea04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fea08:	cccccccd 	.word	0xcccccccd

023fea0c <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>:
      constexpr pair(pair&&) = default;		///< Move constructor
 23fea0c:	b538      	push	{r3, r4, r5, lr}
 23fea0e:	4604      	mov	r4, r0
 23fea10:	460d      	mov	r5, r1
 23fea12:	f7ff fcb4 	bl	23fe37e <_ZN6StringC1ERKS_>
 23fea16:	f105 0110 	add.w	r1, r5, #16
 23fea1a:	f104 0010 	add.w	r0, r4, #16
 23fea1e:	f7fc fccf 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
 23fea22:	4620      	mov	r0, r4
 23fea24:	bd38      	pop	{r3, r4, r5, pc}

023fea26 <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>:
	       enable_if<_PCCFP<_U1, _U2>::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCFP<_U1, _U2>::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(pair<_U1, _U2>&& __p)
 23fea26:	b538      	push	{r3, r4, r5, lr}
 23fea28:	4604      	mov	r4, r0
 23fea2a:	460d      	mov	r5, r1
	: first(std::forward<_U1>(__p.first)),
	  second(std::forward<_U2>(__p.second)) { }
 23fea2c:	f7ff fc8d 	bl	23fe34a <_ZN6StringC1EOS_>
 23fea30:	f105 0110 	add.w	r1, r5, #16
 23fea34:	f104 0010 	add.w	r0, r4, #16
 23fea38:	f7fc fcc2 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
 23fea3c:	4620      	mov	r0, r4
 23fea3e:	bd38      	pop	{r3, r4, r5, pc}

023fea40 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fea40:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fea42:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fea44:	2b07      	cmp	r3, #7
 23fea46:	d004      	beq.n	23fea52 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fea48:	3bff      	subs	r3, #255	; 0xff
 23fea4a:	4258      	negs	r0, r3
 23fea4c:	4158      	adcs	r0, r3
 23fea4e:	f7fc fcb3 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
    }
 23fea52:	bd08      	pop	{r3, pc}

023fea54 <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fea54:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fea56:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fea58:	2b08      	cmp	r3, #8
 23fea5a:	d004      	beq.n	23fea66 <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fea5c:	3bff      	subs	r3, #255	; 0xff
 23fea5e:	4258      	negs	r0, r3
 23fea60:	4158      	adcs	r0, r3
 23fea62:	f7fc fca9 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
    }
 23fea66:	bd08      	pop	{r3, pc}

023fea68 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>:
    get(const variant<_Types...>& __v)
 23fea68:	b508      	push	{r3, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fea6a:	7c03      	ldrb	r3, [r0, #16]
      if (__v.index() != _Np)
 23fea6c:	2b0a      	cmp	r3, #10
 23fea6e:	d004      	beq.n	23fea7a <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_+0x12>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23fea70:	3bff      	subs	r3, #255	; 0xff
 23fea72:	4258      	negs	r0, r3
 23fea74:	4158      	adcs	r0, r3
 23fea76:	f7fc fc9f 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
    }
 23fea7a:	bd08      	pop	{r3, pc}

023fea7c <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>:
int encodeToCbor(EncodingStream& stream, const Variant& var) {
 23fea7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	  return make_signed_t<__index_type>(this->_M_index);
 23fea80:	7c0b      	ldrb	r3, [r1, #16]
 23fea82:	4604      	mov	r4, r0
 23fea84:	4608      	mov	r0, r1
 23fea86:	2b0a      	cmp	r3, #10
 23fea88:	f200 80bb 	bhi.w	23fec02 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x186>
 23fea8c:	e8df f003 	tbb	[pc, r3]
 23fea90:	241c0f06 	.word	0x241c0f06
 23fea94:	6337322d 	.word	0x6337322d
 23fea98:	786a      	.short	0x786a
 23fea9a:	95          	.byte	0x95
 23fea9b:	00          	.byte	0x00
        CHECK(stream.writeUint8(0xf6 /* null */)); // See RFC 8949, Appendix B
 23fea9c:	21f6      	movs	r1, #246	; 0xf6
        CHECK(stream.writeUint8(v ? 0xf5 /* true */ : 0xf4 /* false */));
 23fea9e:	6820      	ldr	r0, [r4, #0]
 23feaa0:	f7ff fe78 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23feaa4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
}
 23feaa8:	b002      	add	sp, #8
 23feaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__v.index() != _Np)
 23feaae:	2b01      	cmp	r3, #1
 23feab0:	d004      	beq.n	23feabc <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x40>
	__throw_bad_variant_access(__v.valueless_by_exception());
 23feab2:	3bff      	subs	r3, #255	; 0xff
 23feab4:	4258      	negs	r0, r3
 23feab6:	4158      	adcs	r0, r3
 23feab8:	f7fc fc7e 	bl	23fb3b8 <_ZSt26__throw_bad_variant_accessb>
        CHECK(stream.writeUint8(v ? 0xf5 /* true */ : 0xf4 /* false */));
 23feabc:	7803      	ldrb	r3, [r0, #0]
 23feabe:	2b00      	cmp	r3, #0
 23feac0:	bf14      	ite	ne
 23feac2:	21f5      	movne	r1, #245	; 0xf5
 23feac4:	21f4      	moveq	r1, #244	; 0xf4
 23feac6:	e7ea      	b.n	23fea9e <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x22>
      if (__v.index() != _Np)
 23feac8:	2b02      	cmp	r3, #2
 23feaca:	d1f2      	bne.n	23feab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        CHECK(writeCborSignedInteger(stream, var.value<int>()));
 23feacc:	6802      	ldr	r2, [r0, #0]
 23feace:	17d3      	asrs	r3, r2, #31
        CHECK(writeCborSignedInteger(stream, var.value<int64_t>()));
 23fead0:	4620      	mov	r0, r4
 23fead2:	f7ff fec1 	bl	23fe858 <_ZN8particle12_GLOBAL__N_122writeCborSignedIntegerERNS0_14EncodingStreamEx>
 23fead6:	e7e5      	b.n	23feaa4 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
 23fead8:	2b03      	cmp	r3, #3
 23feada:	d1ea      	bne.n	23feab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23feadc:	2300      	movs	r3, #0
 23feade:	6802      	ldr	r2, [r0, #0]
 23feae0:	2100      	movs	r1, #0
 23feae2:	4620      	mov	r0, r4
 23feae4:	f7ff fe63 	bl	23fe7ae <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23feae8:	e7dc      	b.n	23feaa4 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
 23feaea:	2b04      	cmp	r3, #4
 23feaec:	d1e1      	bne.n	23feab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        CHECK(writeCborSignedInteger(stream, var.value<int64_t>()));
 23feaee:	e9d0 2300 	ldrd	r2, r3, [r0]
 23feaf2:	e7ed      	b.n	23fead0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x54>
 23feaf4:	2b05      	cmp	r3, #5
 23feaf6:	d1dc      	bne.n	23feab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
    CHECK(writeCborHead(stream, 0 /* Unsigned integer */, val));
 23feaf8:	e9d0 2300 	ldrd	r2, r3, [r0]
 23feafc:	e7f0      	b.n	23feae0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x64>
 23feafe:	2b06      	cmp	r3, #6
 23feb00:	d1d7      	bne.n	23feab2 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x36>
        double d = var.value<double>();
 23feb02:	e9d0 6700 	ldrd	r6, r7, [r0]
        float f = d;
 23feb06:	4639      	mov	r1, r7
 23feb08:	4630      	mov	r0, r6
 23feb0a:	f7fa fff3 	bl	23f9af4 <__aeabi_d2f>
 23feb0e:	4605      	mov	r5, r0
        if (f == d) {
 23feb10:	f7fa fefa 	bl	23f9908 <__aeabi_f2d>
 23feb14:	4632      	mov	r2, r6
 23feb16:	463b      	mov	r3, r7
 23feb18:	f8d4 8000 	ldr.w	r8, [r4]
 23feb1c:	f7fa ffa2 	bl	23f9a64 <__aeabi_dcmpeq>
 23feb20:	b168      	cbz	r0, 23feb3e <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xc2>
            CHECK(stream.writeUint8(0xfa /* Single-precision */));
 23feb22:	21fa      	movs	r1, #250	; 0xfa
 23feb24:	4640      	mov	r0, r8
 23feb26:	f7ff fe35 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23feb2a:	2800      	cmp	r0, #0
 23feb2c:	dbbc      	blt.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
        CHECK(write((const char*)&v, sizeof(v)));
 23feb2e:	2204      	movs	r2, #4
    return __builtin_bswap32(val);
 23feb30:	ba2d      	rev	r5, r5
        v = nativeToBigEndian(v);
 23feb32:	9500      	str	r5, [sp, #0]
        CHECK(write((const char*)&v, sizeof(v)));
 23feb34:	4669      	mov	r1, sp
    CHECK(stream.write(buf.data(), buf.size()));
 23feb36:	6820      	ldr	r0, [r4, #0]
 23feb38:	f7ff fe1c 	bl	23fe774 <_ZN8particle12_GLOBAL__N_114EncodingStream5writeEPKcj.isra.0>
 23feb3c:	e7b2      	b.n	23feaa4 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
            CHECK(stream.writeUint8(0xfb /* Double-precision */));
 23feb3e:	21fb      	movs	r1, #251	; 0xfb
 23feb40:	4640      	mov	r0, r8
 23feb42:	f7ff fe27 	bl	23fe794 <_ZN8particle12_GLOBAL__N_114EncodingStream10writeUint8Eh.isra.0>
 23feb46:	2800      	cmp	r0, #0
 23feb48:	dbae      	blt.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    return __builtin_bswap64(val);
 23feb4a:	ba3a      	rev	r2, r7
 23feb4c:	ba33      	rev	r3, r6
        v = nativeToBigEndian(v);
 23feb4e:	e9cd 2300 	strd	r2, r3, [sp]
        CHECK(write((const char*)&v, sizeof(v)));
 23feb52:	2208      	movs	r2, #8
 23feb54:	e7ee      	b.n	23feb34 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xb8>
      return std::get<__detail::__variant::__index_of_v<_Tp, _Types...>>(__v);
 23feb56:	f7ff ff73 	bl	23fea40 <_ZSt3getILj7EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
 23feb5a:	4601      	mov	r1, r0
        CHECK(writeCborTextString(stream, var.value<String>()));
 23feb5c:	4620      	mov	r0, r4
 23feb5e:	f7ff fe87 	bl	23fe870 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>
 23feb62:	e79f      	b.n	23feaa4 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x28>
 23feb64:	f7ff ff76 	bl	23fea54 <_ZSt3getILj8EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
    CHECK(writeCborHead(stream, 2 /* Byte string */, buf.size()));
 23feb68:	2300      	movs	r3, #0
 23feb6a:	6842      	ldr	r2, [r0, #4]
 23feb6c:	4605      	mov	r5, r0
 23feb6e:	2102      	movs	r1, #2
 23feb70:	4620      	mov	r0, r4
 23feb72:	f7ff fe1c 	bl	23fe7ae <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23feb76:	2800      	cmp	r0, #0
 23feb78:	db96      	blt.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    CHECK(stream.write(buf.data(), buf.size()));
 23feb7a:	e9d5 1200 	ldrd	r1, r2, [r5]
 23feb7e:	e7da      	b.n	23feb36 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0xba>
 23feb80:	f7ff ff0a 	bl	23fe998 <_ZSt3getILj9EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        CHECK(writeCborHead(stream, 4 /* Array */, arr.size()));
 23feb84:	6842      	ldr	r2, [r0, #4]
 23feb86:	4606      	mov	r6, r0
 23feb88:	2104      	movs	r1, #4
 23feb8a:	4620      	mov	r0, r4
 23feb8c:	17d3      	asrs	r3, r2, #31
 23feb8e:	f7ff fe0e 	bl	23fe7ae <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23feb92:	2800      	cmp	r0, #0
 23feb94:	db88      	blt.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
    return data_ + size_;
 23feb96:	e9d6 5600 	ldrd	r5, r6, [r6]
 23feb9a:	2318      	movs	r3, #24
 23feb9c:	fb03 5606 	mla	r6, r3, r6, r5
        for (auto& v: arr) {
 23feba0:	42b5      	cmp	r5, r6
 23feba2:	d101      	bne.n	23feba8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x12c>
    return 0;
 23feba4:	2000      	movs	r0, #0
 23feba6:	e77f      	b.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
            CHECK(encodeToCbor(stream, v));
 23feba8:	4629      	mov	r1, r5
 23febaa:	4620      	mov	r0, r4
 23febac:	f7ff ff66 	bl	23fea7c <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
 23febb0:	2800      	cmp	r0, #0
 23febb2:	f105 0518 	add.w	r5, r5, #24
 23febb6:	daf3      	bge.n	23feba0 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x124>
 23febb8:	e776      	b.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
 23febba:	f7ff ff55 	bl	23fea68 <_ZSt3getILj10EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEERKNSt19variant_alternativeIXT_ESt7variantIJDpT0_EEE4typeERKSH_>
        CHECK(writeCborHead(stream, 5 /* Map */, entries.size()));
 23febbe:	6842      	ldr	r2, [r0, #4]
 23febc0:	4606      	mov	r6, r0
 23febc2:	2105      	movs	r1, #5
 23febc4:	4620      	mov	r0, r4
 23febc6:	17d3      	asrs	r3, r2, #31
 23febc8:	f7ff fdf1 	bl	23fe7ae <_ZN8particle12_GLOBAL__N_113writeCborHeadERNS0_14EncodingStreamEiy>
 23febcc:	2800      	cmp	r0, #0
 23febce:	f6ff af6b 	blt.w	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
 23febd2:	e9d6 5600 	ldrd	r5, r6, [r6]
 23febd6:	2328      	movs	r3, #40	; 0x28
 23febd8:	fb03 5606 	mla	r6, r3, r6, r5
        for (auto& e: entries) {
 23febdc:	42b5      	cmp	r5, r6
 23febde:	d0e1      	beq.n	23feba4 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x128>
            CHECK(writeCborTextString(stream, e.first));
 23febe0:	4629      	mov	r1, r5
 23febe2:	4620      	mov	r0, r4
 23febe4:	f7ff fe44 	bl	23fe870 <_ZN8particle12_GLOBAL__N_119writeCborTextStringERNS0_14EncodingStreamERK6String>
 23febe8:	2800      	cmp	r0, #0
 23febea:	f6ff af5d 	blt.w	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
            CHECK(encodeToCbor(stream, e.second));
 23febee:	f105 0110 	add.w	r1, r5, #16
 23febf2:	4620      	mov	r0, r4
 23febf4:	f7ff ff42 	bl	23fea7c <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
 23febf8:	2800      	cmp	r0, #0
 23febfa:	f105 0528 	add.w	r5, r5, #40	; 0x28
 23febfe:	daed      	bge.n	23febdc <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x160>
 23fec00:	e752      	b.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>
	  return make_signed_t<__index_type>(this->_M_index);
 23fec02:	f06f 00f9 	mvn.w	r0, #249	; 0xf9
 23fec06:	e74f      	b.n	23feaa8 <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE+0x2c>

023fec08 <_ZN8particle12encodeToCBORERKNS_7VariantER5Print>:
        return Variant();
    }
    return v;
}

int encodeToCBOR(const Variant& var, Print& stream) {
 23fec08:	b507      	push	{r0, r1, r2, lr}
            stream_(stream) {
 23fec0a:	9101      	str	r1, [sp, #4]
    EncodingStream s(stream);
    CHECK(encodeToCbor(s, var));
 23fec0c:	4601      	mov	r1, r0
 23fec0e:	a801      	add	r0, sp, #4
 23fec10:	f7ff ff34 	bl	23fea7c <_ZN8particle12_GLOBAL__N_112encodeToCborERNS0_14EncodingStreamERKNS_7VariantE>
    return 0;
}
 23fec14:	ea00 70e0 	and.w	r0, r0, r0, asr #31
 23fec18:	b003      	add	sp, #12
 23fec1a:	f85d fb04 	ldr.w	pc, [sp], #4

023fec1e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>:
        if (dest > p && dest < end) {
 23fec1e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
 23fec20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fec22:	4604      	mov	r4, r0
 23fec24:	460d      	mov	r5, r1
 23fec26:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 23fec28:	d914      	bls.n	23fec54 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x36>
 23fec2a:	4290      	cmp	r0, r2
 23fec2c:	d213      	bcs.n	23fec56 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x38>
            --end;
 23fec2e:	f1a2 0628 	sub.w	r6, r2, #40	; 0x28
            dest += end - p - 1;
 23fec32:	1a75      	subs	r5, r6, r1
 23fec34:	f1a1 0728 	sub.w	r7, r1, #40	; 0x28
 23fec38:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
 23fec3a:	42b7      	cmp	r7, r6
 23fec3c:	d018      	beq.n	23fec70 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
                new(dest) T(std::move(*end));
 23fec3e:	b11c      	cbz	r4, 23fec48 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x2a>
 23fec40:	4631      	mov	r1, r6
 23fec42:	4620      	mov	r0, r4
 23fec44:	f7ff fee2 	bl	23fea0c <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
                end->~T();
 23fec48:	4630      	mov	r0, r6
 23fec4a:	f7ff fe4b 	bl	23fe8e4 <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; end != p; --end, --dest) {
 23fec4e:	3e28      	subs	r6, #40	; 0x28
 23fec50:	3c28      	subs	r4, #40	; 0x28
 23fec52:	e7f2      	b.n	23fec3a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x1c>
        } else if (dest != p) {
 23fec54:	d00c      	beq.n	23fec70 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
            for (; p != end; ++p, ++dest) {
 23fec56:	42b5      	cmp	r5, r6
 23fec58:	d00a      	beq.n	23fec70 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x52>
                new(dest) T(std::move(*p));
 23fec5a:	b11c      	cbz	r4, 23fec64 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x46>
 23fec5c:	4629      	mov	r1, r5
 23fec5e:	4620      	mov	r0, r4
 23fec60:	f7ff fed4 	bl	23fea0c <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
                p->~T();
 23fec64:	4628      	mov	r0, r5
 23fec66:	f7ff fe3d 	bl	23fe8e4 <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
            for (; p != end; ++p, ++dest) {
 23fec6a:	3528      	adds	r5, #40	; 0x28
 23fec6c:	3428      	adds	r4, #40	; 0x28
 23fec6e:	e7f2      	b.n	23fec56 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_+0x38>
    }
 23fec70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fec72 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>:
    bool realloc(int n) {
 23fec72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
 23fec74:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
 23fec76:	4605      	mov	r5, r0
        if (n > 0) {
 23fec78:	dd13      	ble.n	23feca2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
 23fec7a:	2728      	movs	r7, #40	; 0x28
    return ::malloc(size);
 23fec7c:	fb07 f006 	mul.w	r0, r7, r6
 23fec80:	f7fc f9c4 	bl	23fb00c <malloc>
            if (!d) {
 23fec84:	4604      	mov	r4, r0
 23fec86:	b158      	cbz	r0, 23feca0 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
 23fec88:	e9d5 1200 	ldrd	r1, r2, [r5]
 23fec8c:	fb07 1202 	mla	r2, r7, r2, r1
 23fec90:	f7ff ffc5 	bl	23fec1e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>
    ::free(ptr);
 23fec94:	6828      	ldr	r0, [r5, #0]
 23fec96:	f7fc f9c7 	bl	23fb028 <free>
        return true;
 23fec9a:	2001      	movs	r0, #1
        data_ = d;
 23fec9c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 23fec9e:	60ae      	str	r6, [r5, #8]
    }
 23feca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
 23feca2:	2400      	movs	r4, #0
 23feca4:	e7f6      	b.n	23fec94 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi+0x22>

023feca6 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
 23feca6:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
 23feca8:	6883      	ldr	r3, [r0, #8]
 23fecaa:	428b      	cmp	r3, r1
 23fecac:	da02      	bge.n	23fecb4 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi+0xe>
 23fecae:	f7ff ffe0 	bl	23fec72 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>
}
 23fecb2:	bd08      	pop	{r3, pc}
    return true;
 23fecb4:	2001      	movs	r0, #1
 23fecb6:	e7fc      	b.n	23fecb2 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi+0xc>

023fecb8 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>:
    static bool ensureCapacity(ContainerT& cont, int count) {
 23fecb8:	b508      	push	{r3, lr}
        int newSize = cont.size() + count;
 23fecba:	6842      	ldr	r2, [r0, #4]
    return capacity_;
 23fecbc:	6883      	ldr	r3, [r0, #8]
 23fecbe:	4411      	add	r1, r2
        if (cont.capacity() >= newSize) {
 23fecc0:	4299      	cmp	r1, r3
 23fecc2:	dd0a      	ble.n	23fecda <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i+0x22>
        return cont.reserve(std::max(newSize, cont.capacity() * 3 / 2));
 23fecc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fecc8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 23feccc:	105b      	asrs	r3, r3, #1
        return entries_.reserve(count);
 23fecce:	4299      	cmp	r1, r3
 23fecd0:	bfb8      	it	lt
 23fecd2:	4619      	movlt	r1, r3
 23fecd4:	f7ff ffe7 	bl	23feca6 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reserveEi>
    }
 23fecd8:	bd08      	pop	{r3, pc}
            return true;
 23fecda:	2001      	movs	r0, #1
 23fecdc:	e7fc      	b.n	23fecd8 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i+0x20>

023fecde <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>:
}

template<typename T, typename AllocatorT>
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::insert(ConstIterator pos, T value) {
 23fecde:	b570      	push	{r4, r5, r6, lr}
 23fece0:	4604      	mov	r4, r0
    int i = pos - data_;
 23fece2:	6803      	ldr	r3, [r0, #0]
inline typename spark::Vector<T, AllocatorT>::Iterator spark::Vector<T, AllocatorT>::insert(ConstIterator pos, T value) {
 23fece4:	b08a      	sub	sp, #40	; 0x28
    int i = pos - data_;
 23fece6:	1ace      	subs	r6, r1, r3
    if (!insert(i, std::move(value))) {
 23fece8:	4668      	mov	r0, sp
 23fecea:	4611      	mov	r1, r2
 23fecec:	f7ff fe8e 	bl	23fea0c <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fecf0:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 23fecf4:	4299      	cmp	r1, r3
 23fecf6:	da10      	bge.n	23fed1a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x3c>
    move(p + 1, p, data_ + size_);
 23fecf8:	2128      	movs	r1, #40	; 0x28
    T* const p = data_ + i;
 23fecfa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
 23fecfc:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
 23fecfe:	199d      	adds	r5, r3, r6
    move(p + 1, p, data_ + size_);
 23fed00:	fb01 3202 	mla	r2, r1, r2, r3
 23fed04:	f105 0028 	add.w	r0, r5, #40	; 0x28
 23fed08:	4629      	mov	r1, r5
 23fed0a:	f7ff ff88 	bl	23fec1e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE4moveIS6_Li0EEEvPS6_SA_SA_>
    new(p) T(std::move(value));
 23fed0e:	b9b5      	cbnz	r5, 23fed3e <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x60>
    ++size_;
 23fed10:	6863      	ldr	r3, [r4, #4]
    return true;
 23fed12:	2501      	movs	r5, #1
    ++size_;
 23fed14:	3301      	adds	r3, #1
 23fed16:	6063      	str	r3, [r4, #4]
    return true;
 23fed18:	e006      	b.n	23fed28 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x4a>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 23fed1a:	4620      	mov	r0, r4
 23fed1c:	3101      	adds	r1, #1
 23fed1e:	f7ff ffa8 	bl	23fec72 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE7reallocIS6_Li0EEEbi>
 23fed22:	4605      	mov	r5, r0
 23fed24:	2800      	cmp	r0, #0
 23fed26:	d1e7      	bne.n	23fecf8 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x1a>
    if (!insert(i, std::move(value))) {
 23fed28:	4668      	mov	r0, sp
 23fed2a:	f7ff fddb 	bl	23fe8e4 <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23fed2e:	6823      	ldr	r3, [r4, #0]
 23fed30:	b955      	cbnz	r5, 23fed48 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x6a>
        return data_ + size_;
 23fed32:	2128      	movs	r1, #40	; 0x28
 23fed34:	6860      	ldr	r0, [r4, #4]
 23fed36:	fb01 3000 	mla	r0, r1, r0, r3
    }
    return data_ + i;
}
 23fed3a:	b00a      	add	sp, #40	; 0x28
 23fed3c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
 23fed3e:	4669      	mov	r1, sp
 23fed40:	4628      	mov	r0, r5
 23fed42:	f7ff fe63 	bl	23fea0c <_ZNSt4pairIK6StringN8particle7VariantEEC1EOS4_>
 23fed46:	e7e3      	b.n	23fed10 <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x32>
    return data_ + i;
 23fed48:	1998      	adds	r0, r3, r6
 23fed4a:	e7f6      	b.n	23fed3a <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_+0x5c>

023fed4c <_ZN8particle7Variant3setEPKcS0_>:
bool Variant::set(const char* key, Variant val) {
 23fed4c:	b570      	push	{r4, r5, r6, lr}
 23fed4e:	b0a6      	sub	sp, #152	; 0x98
 23fed50:	4616      	mov	r6, r2
 23fed52:	9101      	str	r1, [sp, #4]
        return as<VariantMap>();
 23fed54:	f7ff fdda 	bl	23fe90c <_ZN8particle7Variant2asINS_3MapI6StringS0_St4lessIS3_EEEEERT_v>
    if (!ensureCapacity(map, 1)) {
 23fed58:	2101      	movs	r1, #1
 23fed5a:	4605      	mov	r5, r0
 23fed5c:	f7ff ffac 	bl	23fecb8 <_ZN8particle7Variant14ensureCapacityINS_3MapI6StringS0_St4lessIS3_EEEEEbRT_i>
 23fed60:	4604      	mov	r4, r0
 23fed62:	2800      	cmp	r0, #0
 23fed64:	d03a      	beq.n	23feddc <_ZN8particle7Variant3setEPKcS0_+0x90>
    return map.set(key, std::move(val));
 23fed66:	4631      	mov	r1, r6
 23fed68:	a806      	add	r0, sp, #24
 23fed6a:	f7fc fb29 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
        auto r = insert(key, std::move(val));
 23fed6e:	a906      	add	r1, sp, #24
 23fed70:	a80c      	add	r0, sp, #48	; 0x30
 23fed72:	f7fc fb25 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
        auto it = lowerBound(key);
 23fed76:	a901      	add	r1, sp, #4
 23fed78:	4628      	mov	r0, r5
 23fed7a:	f7ff fe17 	bl	23fe9ac <_ZN8particle3MapI6StringNS_7VariantESt4lessIS1_EE10lowerBoundIPKcEEPSt4pairIKS1_S2_ERKT_>
    return data_ + size_;
 23fed7e:	e9d5 3200 	ldrd	r3, r2, [r5]
 23fed82:	2128      	movs	r1, #40	; 0x28
 23fed84:	fb01 3302 	mla	r3, r1, r2, r3
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fed88:	4298      	cmp	r0, r3
        auto it = lowerBound(key);
 23fed8a:	4604      	mov	r4, r0
        if (it != entries_.end() && !cmp_(key, it->first)) {
 23fed8c:	d029      	beq.n	23fede2 <_ZN8particle7Variant3setEPKcS0_+0x96>
 23fed8e:	9901      	ldr	r1, [sp, #4]
 23fed90:	a81c      	add	r0, sp, #112	; 0x70
 23fed92:	f7ff faa8 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
 23fed96:	4621      	mov	r1, r4
 23fed98:	a81c      	add	r0, sp, #112	; 0x70
 23fed9a:	f7ff fb34 	bl	23fe406 <_ZNK6StringltERKS_>
 23fed9e:	4606      	mov	r6, r0
 23feda0:	a81c      	add	r0, sp, #112	; 0x70
 23feda2:	f7ff fa3b 	bl	23fe21c <_ZN6StringD1Ev>
 23feda6:	b9e6      	cbnz	r6, 23fede2 <_ZN8particle7Variant3setEPKcS0_+0x96>
            it->second = std::move(val);
 23feda8:	a90c      	add	r1, sp, #48	; 0x30
 23fedaa:	a81c      	add	r0, sp, #112	; 0x70
 23fedac:	f7fc fb08 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
    { __lhs.swap(__rhs); }
 23fedb0:	f104 0010 	add.w	r0, r4, #16
 23fedb4:	a91c      	add	r1, sp, #112	; 0x70
 23fedb6:	f7fd ff35 	bl	23fcc24 <_ZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS2_7VariantENS4_16DefaultAllocatorEEENS2_3MapIS1_S6_St4lessIS1_EEEEE4swapERSD_>
      { _M_reset(); }
 23fedba:	a81c      	add	r0, sp, #112	; 0x70
 23fedbc:	f7fb fa80 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fedc0:	a80c      	add	r0, sp, #48	; 0x30
 23fedc2:	f7fb fa7d 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
 23fedc6:	e9d5 0300 	ldrd	r0, r3, [r5]
 23fedca:	2228      	movs	r2, #40	; 0x28
 23fedcc:	fb02 0003 	mla	r0, r2, r3, r0
        if (r.first == entries_.end()) {
 23fedd0:	1a24      	subs	r4, r4, r0
 23fedd2:	a806      	add	r0, sp, #24
 23fedd4:	bf18      	it	ne
 23fedd6:	2401      	movne	r4, #1
 23fedd8:	f7fb fa72 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
}
 23feddc:	4620      	mov	r0, r4
 23fedde:	b026      	add	sp, #152	; 0x98
 23fede0:	bd70      	pop	{r4, r5, r6, pc}
        it = entries_.insert(it, std::make_pair(KeyT(key), std::move(val)));
 23fede2:	9901      	ldr	r1, [sp, #4]
 23fede4:	a802      	add	r0, sp, #8
 23fede6:	f7ff fa7e 	bl	23fe2e6 <_ZN6StringC1EPK19__FlashStringHelper>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 23fedea:	a902      	add	r1, sp, #8
 23fedec:	a812      	add	r0, sp, #72	; 0x48
 23fedee:	f7ff faac 	bl	23fe34a <_ZN6StringC1EOS_>
 23fedf2:	a90c      	add	r1, sp, #48	; 0x30
 23fedf4:	a816      	add	r0, sp, #88	; 0x58
 23fedf6:	f7fc fae3 	bl	23fb3c0 <_ZN8particle7VariantC1EOS0_>
 23fedfa:	a912      	add	r1, sp, #72	; 0x48
 23fedfc:	a81c      	add	r0, sp, #112	; 0x70
 23fedfe:	f7ff fe12 	bl	23fea26 <_ZNSt4pairIK6StringN8particle7VariantEEC1IS0_S3_Lb1EEEOS_IT_T0_E>
 23fee02:	4621      	mov	r1, r4
 23fee04:	aa1c      	add	r2, sp, #112	; 0x70
 23fee06:	4628      	mov	r0, r5
 23fee08:	f7ff ff69 	bl	23fecde <_ZN5spark6VectorISt4pairIK6StringN8particle7VariantEENS_16DefaultAllocatorEE6insertEPKS6_S6_>
 23fee0c:	4604      	mov	r4, r0
 23fee0e:	a81c      	add	r0, sp, #112	; 0x70
 23fee10:	f7ff fd68 	bl	23fe8e4 <_ZNSt4pairIK6StringN8particle7VariantEED1Ev>
 23fee14:	a816      	add	r0, sp, #88	; 0x58
 23fee16:	f7fb fa53 	bl	23fa2c0 <_ZNSt8__detail9__variant16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS4_7VariantENS6_16DefaultAllocatorEEENS4_3MapIS3_S8_St4lessIS3_EEEEE8_M_resetEv>
    struct pair
 23fee1a:	a812      	add	r0, sp, #72	; 0x48
 23fee1c:	f7ff f9fe 	bl	23fe21c <_ZN6StringD1Ev>
 23fee20:	a802      	add	r0, sp, #8
 23fee22:	f7ff f9fb 	bl	23fe21c <_ZN6StringD1Ev>
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 23fee26:	e7cb      	b.n	23fedc0 <_ZN8particle7Variant3setEPKcS0_+0x74>

023fee28 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fee28:	2200      	movs	r2, #0
 23fee2a:	6840      	ldr	r0, [r0, #4]
 23fee2c:	4611      	mov	r1, r2
 23fee2e:	f7fc b853 	b.w	23faed8 <network_ready>

023fee32 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fee32:	2200      	movs	r2, #0
 23fee34:	6840      	ldr	r0, [r0, #4]
 23fee36:	4611      	mov	r1, r2
 23fee38:	f7fc b886 	b.w	23faf48 <network_listening>

023fee3c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fee3c:	2200      	movs	r2, #0
 23fee3e:	6840      	ldr	r0, [r0, #4]
 23fee40:	4611      	mov	r1, r2
 23fee42:	f7fc b89d 	b.w	23faf80 <network_get_listen_timeout>

023fee46 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fee46:	2200      	movs	r2, #0
 23fee48:	6840      	ldr	r0, [r0, #4]
 23fee4a:	f7fc b88b 	b.w	23faf64 <network_set_listen_timeout>

023fee4e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fee4e:	2200      	movs	r2, #0
 23fee50:	6840      	ldr	r0, [r0, #4]
 23fee52:	f081 0101 	eor.w	r1, r1, #1
 23fee56:	f7fc b869 	b.w	23faf2c <network_listen>

023fee5a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fee5a:	2300      	movs	r3, #0
 23fee5c:	6840      	ldr	r0, [r0, #4]
 23fee5e:	461a      	mov	r2, r3
 23fee60:	4619      	mov	r1, r3
 23fee62:	f7fc b855 	b.w	23faf10 <network_off>

023fee66 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fee66:	2300      	movs	r3, #0
 23fee68:	6840      	ldr	r0, [r0, #4]
 23fee6a:	461a      	mov	r2, r3
 23fee6c:	4619      	mov	r1, r3
 23fee6e:	f7fc b841 	b.w	23faef4 <network_on>

023fee72 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fee72:	2200      	movs	r2, #0
 23fee74:	6840      	ldr	r0, [r0, #4]
 23fee76:	4611      	mov	r1, r2
 23fee78:	f7fc b812 	b.w	23faea0 <network_connecting>

023fee7c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fee7c:	2200      	movs	r2, #0
 23fee7e:	2102      	movs	r1, #2
 23fee80:	6840      	ldr	r0, [r0, #4]
 23fee82:	f7fc b81b 	b.w	23faebc <network_disconnect>

023fee86 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fee86:	2300      	movs	r3, #0
 23fee88:	6840      	ldr	r0, [r0, #4]
 23fee8a:	461a      	mov	r2, r3
 23fee8c:	f7fb bffa 	b.w	23fae84 <network_connect>

023fee90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fee90:	2205      	movs	r2, #5
 23fee92:	4b02      	ldr	r3, [pc, #8]	; (23fee9c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fee94:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fee96:	4a02      	ldr	r2, [pc, #8]	; (23feea0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fee98:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fee9a:	4770      	bx	lr
 23fee9c:	1007afac 	.word	0x1007afac
 23feea0:	023ffe18 	.word	0x023ffe18

023feea4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23feea4:	4b01      	ldr	r3, [pc, #4]	; (23feeac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23feea6:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23feea8:	4770      	bx	lr
 23feeaa:	bf00      	nop
 23feeac:	1007ae08 	.word	0x1007ae08

023feeb0 <serialEventRun>:
{
 23feeb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23feeb2:	4b0d      	ldr	r3, [pc, #52]	; (23feee8 <serialEventRun+0x38>)
 23feeb4:	b143      	cbz	r3, 23feec8 <serialEventRun+0x18>
 23feeb6:	f7ff fc33 	bl	23fe720 <_Z16_fetch_usbserialv>
 23feeba:	6803      	ldr	r3, [r0, #0]
 23feebc:	691b      	ldr	r3, [r3, #16]
 23feebe:	4798      	blx	r3
 23feec0:	2800      	cmp	r0, #0
 23feec2:	dd01      	ble.n	23feec8 <serialEventRun+0x18>
        serialEvent();
 23feec4:	e000      	b.n	23feec8 <serialEventRun+0x18>
 23feec6:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23feec8:	4b08      	ldr	r3, [pc, #32]	; (23feeec <serialEventRun+0x3c>)
 23feeca:	b143      	cbz	r3, 23feede <serialEventRun+0x2e>
 23feecc:	f000 f972 	bl	23ff1b4 <_Z22__fetch_global_Serial1v>
 23feed0:	6803      	ldr	r3, [r0, #0]
 23feed2:	691b      	ldr	r3, [r3, #16]
 23feed4:	4798      	blx	r3
 23feed6:	2800      	cmp	r0, #0
 23feed8:	dd01      	ble.n	23feede <serialEventRun+0x2e>
        serialEvent1();
 23feeda:	e000      	b.n	23feede <serialEventRun+0x2e>
 23feedc:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23feede:	4b04      	ldr	r3, [pc, #16]	; (23feef0 <serialEventRun+0x40>)
 23feee0:	b10b      	cbz	r3, 23feee6 <serialEventRun+0x36>
 23feee2:	f000 f9ad 	bl	23ff240 <_Z15serialEventRun2v>
}
 23feee6:	bd08      	pop	{r3, pc}
	...

023feef4 <_post_loop>:
{
 23feef4:	b508      	push	{r3, lr}
	serialEventRun();
 23feef6:	f7ff ffdb 	bl	23feeb0 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23feefa:	f7fb fd23 	bl	23fa944 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23feefe:	4b01      	ldr	r3, [pc, #4]	; (23fef04 <_post_loop+0x10>)
 23fef00:	6018      	str	r0, [r3, #0]
}
 23fef02:	bd08      	pop	{r3, pc}
 23fef04:	1007afbc 	.word	0x1007afbc

023fef08 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fef08:	4805      	ldr	r0, [pc, #20]	; (23fef20 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fef0a:	4a06      	ldr	r2, [pc, #24]	; (23fef24 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fef0c:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fef0e:	1a12      	subs	r2, r2, r0
 23fef10:	4905      	ldr	r1, [pc, #20]	; (23fef28 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fef12:	f000 f9bf 	bl	23ff294 <memcpy>
    __backup_sram_signature = signature;
 23fef16:	4b05      	ldr	r3, [pc, #20]	; (23fef2c <_Z33system_initialize_user_backup_ramv+0x24>)
 23fef18:	4a05      	ldr	r2, [pc, #20]	; (23fef30 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fef1a:	601a      	str	r2, [r3, #0]
}
 23fef1c:	bd08      	pop	{r3, pc}
 23fef1e:	bf00      	nop
 23fef20:	1007b400 	.word	0x1007b400
 23fef24:	1007b404 	.word	0x1007b404
 23fef28:	085ffadc 	.word	0x085ffadc
 23fef2c:	1007b400 	.word	0x1007b400
 23fef30:	9a271c1e 	.word	0x9a271c1e

023fef34 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fef34:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fef36:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fef38:	461a      	mov	r2, r3
 23fef3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fef3e:	9300      	str	r3, [sp, #0]
 23fef40:	f7fb ff06 	bl	23fad50 <system_ctrl_set_result>
}
 23fef44:	b003      	add	sp, #12
 23fef46:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fef4c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fef4c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fef4e:	8843      	ldrh	r3, [r0, #2]
 23fef50:	2b0a      	cmp	r3, #10
 23fef52:	d008      	beq.n	23fef66 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fef54:	2b50      	cmp	r3, #80	; 0x50
 23fef56:	d10b      	bne.n	23fef70 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fef58:	4b09      	ldr	r3, [pc, #36]	; (23fef80 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fef5a:	681b      	ldr	r3, [r3, #0]
 23fef5c:	b14b      	cbz	r3, 23fef72 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fef5e:	b003      	add	sp, #12
 23fef60:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fef64:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fef66:	f7ff ffe5 	bl	23fef34 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fef6a:	b003      	add	sp, #12
 23fef6c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fef70:	2300      	movs	r3, #0
 23fef72:	461a      	mov	r2, r3
 23fef74:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fef78:	9300      	str	r3, [sp, #0]
 23fef7a:	f7fb fee9 	bl	23fad50 <system_ctrl_set_result>
}
 23fef7e:	e7f4      	b.n	23fef6a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fef80:	1007afb8 	.word	0x1007afb8

023fef84 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fef84:	2100      	movs	r1, #0
{
 23fef86:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fef88:	4811      	ldr	r0, [pc, #68]	; (23fefd0 <module_user_init_hook+0x4c>)
 23fef8a:	f7fc f8bd 	bl	23fb108 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fef8e:	4b11      	ldr	r3, [pc, #68]	; (23fefd4 <module_user_init_hook+0x50>)
 23fef90:	681a      	ldr	r2, [r3, #0]
 23fef92:	4b11      	ldr	r3, [pc, #68]	; (23fefd8 <module_user_init_hook+0x54>)
 23fef94:	429a      	cmp	r2, r3
 23fef96:	bf0c      	ite	eq
 23fef98:	2201      	moveq	r2, #1
 23fef9a:	2200      	movne	r2, #0
 23fef9c:	4b0f      	ldr	r3, [pc, #60]	; (23fefdc <module_user_init_hook+0x58>)
 23fef9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fefa0:	d001      	beq.n	23fefa6 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fefa2:	f7ff ffb1 	bl	23fef08 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fefa6:	f7fb fcb1 	bl	23fa90c <HAL_RNG_GetRandomNumber>
 23fefaa:	4604      	mov	r4, r0
    srand(seed);
 23fefac:	f000 f9a2 	bl	23ff2f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fefb0:	4b0b      	ldr	r3, [pc, #44]	; (23fefe0 <module_user_init_hook+0x5c>)
 23fefb2:	b113      	cbz	r3, 23fefba <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fefb4:	4620      	mov	r0, r4
 23fefb6:	e000      	b.n	23fefba <module_user_init_hook+0x36>
 23fefb8:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fefba:	2100      	movs	r1, #0
 23fefbc:	4808      	ldr	r0, [pc, #32]	; (23fefe0 <module_user_init_hook+0x5c>)
 23fefbe:	f7fb ff53 	bl	23fae68 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fefc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fefc6:	2100      	movs	r1, #0
 23fefc8:	4806      	ldr	r0, [pc, #24]	; (23fefe4 <module_user_init_hook+0x60>)
 23fefca:	f7fb beb3 	b.w	23fad34 <system_ctrl_set_app_request_handler>
 23fefce:	bf00      	nop
 23fefd0:	023feea5 	.word	0x023feea5
 23fefd4:	1007b400 	.word	0x1007b400
 23fefd8:	9a271c1e 	.word	0x9a271c1e
 23fefdc:	1007afb4 	.word	0x1007afb4
 23fefe0:	00000000 	.word	0x00000000
 23fefe4:	023fef4d 	.word	0x023fef4d

023fefe8 <coap_begin_request>:

DYNALIB_FN(BASE_IDX2 + 9, communication, coap_add_connection_handler, int(coap_connection_callback, void*, void*))
DYNALIB_FN(BASE_IDX2 + 10, communication, coap_remove_connection_handler, void(coap_connection_callback, void*))
DYNALIB_FN(BASE_IDX2 + 11, communication, coap_add_request_handler, int(const char*, int, int, coap_request_callback, void*, void*))
DYNALIB_FN(BASE_IDX2 + 12, communication, coap_remove_request_handler, void(const char*, int, void*))
DYNALIB_FN(BASE_IDX2 + 13, communication, coap_begin_request, int(coap_message**, const char*, int, int, int, void*))
 23fefe8:	b509      	push	{r0, r3, lr}
 23fefea:	4804      	ldr	r0, [pc, #16]	; (23feffc <coap_begin_request+0x14>)
 23fefec:	6800      	ldr	r0, [r0, #0]
 23fefee:	4b04      	ldr	r3, [pc, #16]	; (23ff000 <coap_begin_request+0x18>)
 23feff0:	4403      	add	r3, r0
 23feff2:	681b      	ldr	r3, [r3, #0]
 23feff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 23feff8:	9302      	str	r3, [sp, #8]
 23feffa:	bd09      	pop	{r0, r3, pc}
 23feffc:	1007adf8 	.word	0x1007adf8
 23ff000:	00000044 	.word	0x00000044

023ff004 <coap_end_request>:
DYNALIB_FN(BASE_IDX2 + 14, communication, coap_end_request, int(coap_message*, coap_response_callback, coap_ack_callback, coap_error_callback, void*, void*))
 23ff004:	b509      	push	{r0, r3, lr}
 23ff006:	4804      	ldr	r0, [pc, #16]	; (23ff018 <coap_end_request+0x14>)
 23ff008:	6800      	ldr	r0, [r0, #0]
 23ff00a:	4b04      	ldr	r3, [pc, #16]	; (23ff01c <coap_end_request+0x18>)
 23ff00c:	4403      	add	r3, r0
 23ff00e:	681b      	ldr	r3, [r3, #0]
 23ff010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 23ff014:	9302      	str	r3, [sp, #8]
 23ff016:	bd09      	pop	{r0, r3, pc}
 23ff018:	1007adf8 	.word	0x1007adf8
 23ff01c:	00000044 	.word	0x00000044

023ff020 <coap_destroy_message>:
DYNALIB_FN(BASE_IDX2 + 15, communication, coap_begin_response, int(coap_message**, int, int, int, void*))
DYNALIB_FN(BASE_IDX2 + 16, communication, coap_end_response, int(coap_message*, coap_ack_callback, coap_error_callback, void*, void*))
DYNALIB_FN(BASE_IDX2 + 17, communication, coap_destroy_message, void(coap_message*, void*))
 23ff020:	b509      	push	{r0, r3, lr}
 23ff022:	4804      	ldr	r0, [pc, #16]	; (23ff034 <coap_destroy_message+0x14>)
 23ff024:	6800      	ldr	r0, [r0, #0]
 23ff026:	4b04      	ldr	r3, [pc, #16]	; (23ff038 <coap_destroy_message+0x18>)
 23ff028:	4403      	add	r3, r0
 23ff02a:	681b      	ldr	r3, [r3, #0]
 23ff02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 23ff030:	9302      	str	r3, [sp, #8]
 23ff032:	bd09      	pop	{r0, r3, pc}
 23ff034:	1007adf8 	.word	0x1007adf8
 23ff038:	00000044 	.word	0x00000044

023ff03c <coap_create_payload>:
DYNALIB_FN(BASE_IDX2 + 18, communication, coap_cancel_request, int(int, void*))
DYNALIB_FN(BASE_IDX2 + 19, communication, coap_write_block, int(coap_message*, const char*, size_t*, coap_block_callback, coap_error_callback, void*, void*))
DYNALIB_FN(BASE_IDX2 + 20, communication, coap_read_block, int(coap_message*, char*, size_t*, coap_block_callback, coap_error_callback, void*, void*))
DYNALIB_FN(BASE_IDX2 + 21, communication, coap_peek_block, int(coap_message*, char*, size_t, void*))
DYNALIB_FN(BASE_IDX2 + 22, communication, coap_create_payload, int(coap_payload**, size_t, void*))
 23ff03c:	b509      	push	{r0, r3, lr}
 23ff03e:	4804      	ldr	r0, [pc, #16]	; (23ff050 <coap_create_payload+0x14>)
 23ff040:	6800      	ldr	r0, [r0, #0]
 23ff042:	4b04      	ldr	r3, [pc, #16]	; (23ff054 <coap_create_payload+0x18>)
 23ff044:	4403      	add	r3, r0
 23ff046:	681b      	ldr	r3, [r3, #0]
 23ff048:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 23ff04c:	9302      	str	r3, [sp, #8]
 23ff04e:	bd09      	pop	{r0, r3, pc}
 23ff050:	1007adf8 	.word	0x1007adf8
 23ff054:	00000044 	.word	0x00000044

023ff058 <coap_destroy_payload>:
DYNALIB_FN(BASE_IDX2 + 23, communication, coap_destroy_payload, void(coap_payload*, void*))
 23ff058:	b509      	push	{r0, r3, lr}
 23ff05a:	4804      	ldr	r0, [pc, #16]	; (23ff06c <coap_destroy_payload+0x14>)
 23ff05c:	6800      	ldr	r0, [r0, #0]
 23ff05e:	4b04      	ldr	r3, [pc, #16]	; (23ff070 <coap_destroy_payload+0x18>)
 23ff060:	4403      	add	r3, r0
 23ff062:	681b      	ldr	r3, [r3, #0]
 23ff064:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23ff068:	9302      	str	r3, [sp, #8]
 23ff06a:	bd09      	pop	{r0, r3, pc}
 23ff06c:	1007adf8 	.word	0x1007adf8
 23ff070:	00000044 	.word	0x00000044

023ff074 <coap_write_payload>:
DYNALIB_FN(BASE_IDX2 + 24, communication, coap_write_payload, int(coap_payload*, const char*, size_t, size_t, void*))
 23ff074:	b509      	push	{r0, r3, lr}
 23ff076:	4804      	ldr	r0, [pc, #16]	; (23ff088 <coap_write_payload+0x14>)
 23ff078:	6800      	ldr	r0, [r0, #0]
 23ff07a:	4b04      	ldr	r3, [pc, #16]	; (23ff08c <coap_write_payload+0x18>)
 23ff07c:	4403      	add	r3, r0
 23ff07e:	681b      	ldr	r3, [r3, #0]
 23ff080:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 23ff084:	9302      	str	r3, [sp, #8]
 23ff086:	bd09      	pop	{r0, r3, pc}
 23ff088:	1007adf8 	.word	0x1007adf8
 23ff08c:	00000044 	.word	0x00000044

023ff090 <coap_read_payload>:
DYNALIB_FN(BASE_IDX2 + 25, communication, coap_read_payload, int(coap_payload*, char*, size_t, size_t, void*))
 23ff090:	b509      	push	{r0, r3, lr}
 23ff092:	4804      	ldr	r0, [pc, #16]	; (23ff0a4 <coap_read_payload+0x14>)
 23ff094:	6800      	ldr	r0, [r0, #0]
 23ff096:	4b04      	ldr	r3, [pc, #16]	; (23ff0a8 <coap_read_payload+0x18>)
 23ff098:	4403      	add	r3, r0
 23ff09a:	681b      	ldr	r3, [r3, #0]
 23ff09c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 23ff0a0:	9302      	str	r3, [sp, #8]
 23ff0a2:	bd09      	pop	{r0, r3, pc}
 23ff0a4:	1007adf8 	.word	0x1007adf8
 23ff0a8:	00000044 	.word	0x00000044

023ff0ac <coap_set_payload_size>:
DYNALIB_FN(BASE_IDX2 + 26, communication, coap_set_payload_size, int(coap_payload*, size_t, void*))
 23ff0ac:	b509      	push	{r0, r3, lr}
 23ff0ae:	4804      	ldr	r0, [pc, #16]	; (23ff0c0 <coap_set_payload_size+0x14>)
 23ff0b0:	6800      	ldr	r0, [r0, #0]
 23ff0b2:	4b04      	ldr	r3, [pc, #16]	; (23ff0c4 <coap_set_payload_size+0x18>)
 23ff0b4:	4403      	add	r3, r0
 23ff0b6:	681b      	ldr	r3, [r3, #0]
 23ff0b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 23ff0bc:	9302      	str	r3, [sp, #8]
 23ff0be:	bd09      	pop	{r0, r3, pc}
 23ff0c0:	1007adf8 	.word	0x1007adf8
 23ff0c4:	00000044 	.word	0x00000044

023ff0c8 <coap_get_payload_size>:
DYNALIB_FN(BASE_IDX2 + 27, communication, coap_get_payload_size, int(coap_payload*, void*))
 23ff0c8:	b509      	push	{r0, r3, lr}
 23ff0ca:	4804      	ldr	r0, [pc, #16]	; (23ff0dc <coap_get_payload_size+0x14>)
 23ff0cc:	6800      	ldr	r0, [r0, #0]
 23ff0ce:	4b04      	ldr	r3, [pc, #16]	; (23ff0e0 <coap_get_payload_size+0x18>)
 23ff0d0:	4403      	add	r3, r0
 23ff0d2:	681b      	ldr	r3, [r3, #0]
 23ff0d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 23ff0d8:	9302      	str	r3, [sp, #8]
 23ff0da:	bd09      	pop	{r0, r3, pc}
 23ff0dc:	1007adf8 	.word	0x1007adf8
 23ff0e0:	00000044 	.word	0x00000044

023ff0e4 <coap_set_payload>:
DYNALIB_FN(BASE_IDX2 + 28, communication, coap_set_payload, int(coap_message*, coap_payload*, void*))
 23ff0e4:	b509      	push	{r0, r3, lr}
 23ff0e6:	4804      	ldr	r0, [pc, #16]	; (23ff0f8 <coap_set_payload+0x14>)
 23ff0e8:	6800      	ldr	r0, [r0, #0]
 23ff0ea:	4b04      	ldr	r3, [pc, #16]	; (23ff0fc <coap_set_payload+0x18>)
 23ff0ec:	4403      	add	r3, r0
 23ff0ee:	681b      	ldr	r3, [r3, #0]
 23ff0f0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 23ff0f4:	9302      	str	r3, [sp, #8]
 23ff0f6:	bd09      	pop	{r0, r3, pc}
 23ff0f8:	1007adf8 	.word	0x1007adf8
 23ff0fc:	00000044 	.word	0x00000044

023ff100 <coap_add_uint_option>:
DYNALIB_FN(BASE_IDX2 + 31, communication, coap_get_next_option, int(coap_message*, coap_option**, int*, void*))
DYNALIB_FN(BASE_IDX2 + 32, communication, coap_get_uint_option_value, int(coap_option*, unsigned*, void*))
DYNALIB_FN(BASE_IDX2 + 33, communication, coap_get_string_option_value, int(coap_option*, char*, size_t, void*))
DYNALIB_FN(BASE_IDX2 + 34, communication, coap_get_opaque_option_value, int(coap_option*, char*, size_t, void*))
DYNALIB_FN(BASE_IDX2 + 35, communication, coap_add_empty_option, int(coap_message*, int, void*))
DYNALIB_FN(BASE_IDX2 + 36, communication, coap_add_uint_option, int(coap_message*, int, unsigned, void*))
 23ff100:	b509      	push	{r0, r3, lr}
 23ff102:	4804      	ldr	r0, [pc, #16]	; (23ff114 <coap_add_uint_option+0x14>)
 23ff104:	6800      	ldr	r0, [r0, #0]
 23ff106:	4b04      	ldr	r3, [pc, #16]	; (23ff118 <coap_add_uint_option+0x18>)
 23ff108:	4403      	add	r3, r0
 23ff10a:	681b      	ldr	r3, [r3, #0]
 23ff10c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 23ff110:	9302      	str	r3, [sp, #8]
 23ff112:	bd09      	pop	{r0, r3, pc}
 23ff114:	1007adf8 	.word	0x1007adf8
 23ff118:	00000044 	.word	0x00000044

023ff11c <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 23ff11c:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 23ff11e:	4c08      	ldr	r4, [pc, #32]	; (23ff140 <_Z21__fetch_global_EEPROMv+0x24>)
 23ff120:	e8d4 3f8f 	ldab	r3, [r4]
 23ff124:	07db      	lsls	r3, r3, #31
 23ff126:	d408      	bmi.n	23ff13a <_Z21__fetch_global_EEPROMv+0x1e>
 23ff128:	4620      	mov	r0, r4
 23ff12a:	f7fb fffb 	bl	23fb124 <__cxa_guard_acquire>
 23ff12e:	b120      	cbz	r0, 23ff13a <_Z21__fetch_global_EEPROMv+0x1e>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 23ff130:	f7fb fc16 	bl	23fa960 <HAL_EEPROM_Init>
 23ff134:	4620      	mov	r0, r4
 23ff136:	f7fc f803 	bl	23fb140 <__cxa_guard_release>
	return eeprom;
}
 23ff13a:	4802      	ldr	r0, [pc, #8]	; (23ff144 <_Z21__fetch_global_EEPROMv+0x28>)
 23ff13c:	bd10      	pop	{r4, pc}
 23ff13e:	bf00      	nop
 23ff140:	1007afc4 	.word	0x1007afc4
 23ff144:	1007afc8 	.word	0x1007afc8

023ff148 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff148:	4770      	bx	lr

023ff14a <__tcf_1>:
 23ff14a:	4770      	bx	lr

023ff14c <_Z20acquireSerial1Bufferv>:
{
 23ff14c:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ff14e:	2514      	movs	r5, #20
{
 23ff150:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ff152:	462a      	mov	r2, r5
 23ff154:	2100      	movs	r1, #0
 23ff156:	f000 f8c4 	bl	23ff2e2 <memset>
 23ff15a:	8025      	strh	r5, [r4, #0]
 23ff15c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff15e:	4907      	ldr	r1, [pc, #28]	; (23ff17c <_Z20acquireSerial1Bufferv+0x30>)
 23ff160:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ff162:	8125      	strh	r5, [r4, #8]
 23ff164:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff166:	f000 f881 	bl	23ff26c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff16a:	4904      	ldr	r1, [pc, #16]	; (23ff17c <_Z20acquireSerial1Bufferv+0x30>)
    };
 23ff16c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ff16e:	4628      	mov	r0, r5
 23ff170:	f000 f87c 	bl	23ff26c <_ZnajRKSt9nothrow_t>
    };
 23ff174:	60e0      	str	r0, [r4, #12]
}
 23ff176:	4620      	mov	r0, r4
 23ff178:	bd38      	pop	{r3, r4, r5, pc}
 23ff17a:	bf00      	nop
 23ff17c:	023ffe54 	.word	0x023ffe54

023ff180 <_Z20acquireSerial2Bufferv>:
 23ff180:	b538      	push	{r3, r4, r5, lr}
 23ff182:	2514      	movs	r5, #20
 23ff184:	4604      	mov	r4, r0
 23ff186:	462a      	mov	r2, r5
 23ff188:	2100      	movs	r1, #0
 23ff18a:	f000 f8aa 	bl	23ff2e2 <memset>
 23ff18e:	8025      	strh	r5, [r4, #0]
 23ff190:	2540      	movs	r5, #64	; 0x40
 23ff192:	4907      	ldr	r1, [pc, #28]	; (23ff1b0 <_Z20acquireSerial2Bufferv+0x30>)
 23ff194:	4628      	mov	r0, r5
 23ff196:	8125      	strh	r5, [r4, #8]
 23ff198:	8225      	strh	r5, [r4, #16]
 23ff19a:	f000 f867 	bl	23ff26c <_ZnajRKSt9nothrow_t>
 23ff19e:	4904      	ldr	r1, [pc, #16]	; (23ff1b0 <_Z20acquireSerial2Bufferv+0x30>)
 23ff1a0:	6060      	str	r0, [r4, #4]
 23ff1a2:	4628      	mov	r0, r5
 23ff1a4:	f000 f862 	bl	23ff26c <_ZnajRKSt9nothrow_t>
 23ff1a8:	60e0      	str	r0, [r4, #12]
 23ff1aa:	4620      	mov	r0, r4
 23ff1ac:	bd38      	pop	{r3, r4, r5, pc}
 23ff1ae:	bf00      	nop
 23ff1b0:	023ffe54 	.word	0x023ffe54

023ff1b4 <_Z22__fetch_global_Serial1v>:
{
 23ff1b4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff1b6:	4d0e      	ldr	r5, [pc, #56]	; (23ff1f0 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ff1b8:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff1ba:	e8d5 1f8f 	ldab	r1, [r5]
 23ff1be:	f011 0401 	ands.w	r4, r1, #1
 23ff1c2:	d111      	bne.n	23ff1e8 <_Z22__fetch_global_Serial1v+0x34>
 23ff1c4:	4628      	mov	r0, r5
 23ff1c6:	f7fb ffad 	bl	23fb124 <__cxa_guard_acquire>
 23ff1ca:	b168      	cbz	r0, 23ff1e8 <_Z22__fetch_global_Serial1v+0x34>
 23ff1cc:	a801      	add	r0, sp, #4
 23ff1ce:	f7ff ffbd 	bl	23ff14c <_Z20acquireSerial1Bufferv>
 23ff1d2:	4621      	mov	r1, r4
 23ff1d4:	aa01      	add	r2, sp, #4
 23ff1d6:	4807      	ldr	r0, [pc, #28]	; (23ff1f4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1d8:	f7ff fa1e 	bl	23fe618 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff1dc:	4628      	mov	r0, r5
 23ff1de:	f7fb ffaf 	bl	23fb140 <__cxa_guard_release>
 23ff1e2:	4805      	ldr	r0, [pc, #20]	; (23ff1f8 <_Z22__fetch_global_Serial1v+0x44>)
 23ff1e4:	f000 f847 	bl	23ff276 <atexit>
    return serial1;
}
 23ff1e8:	4802      	ldr	r0, [pc, #8]	; (23ff1f4 <_Z22__fetch_global_Serial1v+0x40>)
 23ff1ea:	b007      	add	sp, #28
 23ff1ec:	bd30      	pop	{r4, r5, pc}
 23ff1ee:	bf00      	nop
 23ff1f0:	1007afcc 	.word	0x1007afcc
 23ff1f4:	1007afd4 	.word	0x1007afd4
 23ff1f8:	023ff149 	.word	0x023ff149

023ff1fc <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ff1fc:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff1fe:	4c0d      	ldr	r4, [pc, #52]	; (23ff234 <_Z22__fetch_global_Serial2v+0x38>)
{
 23ff200:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ff202:	e8d4 3f8f 	ldab	r3, [r4]
 23ff206:	07db      	lsls	r3, r3, #31
 23ff208:	d411      	bmi.n	23ff22e <_Z22__fetch_global_Serial2v+0x32>
 23ff20a:	4620      	mov	r0, r4
 23ff20c:	f7fb ff8a 	bl	23fb124 <__cxa_guard_acquire>
 23ff210:	b168      	cbz	r0, 23ff22e <_Z22__fetch_global_Serial2v+0x32>
 23ff212:	a801      	add	r0, sp, #4
 23ff214:	f7ff ffb4 	bl	23ff180 <_Z20acquireSerial2Bufferv>
 23ff218:	2101      	movs	r1, #1
 23ff21a:	aa01      	add	r2, sp, #4
 23ff21c:	4806      	ldr	r0, [pc, #24]	; (23ff238 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff21e:	f7ff f9fb 	bl	23fe618 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ff222:	4620      	mov	r0, r4
 23ff224:	f7fb ff8c 	bl	23fb140 <__cxa_guard_release>
 23ff228:	4804      	ldr	r0, [pc, #16]	; (23ff23c <_Z22__fetch_global_Serial2v+0x40>)
 23ff22a:	f000 f824 	bl	23ff276 <atexit>
	return serial2;
}
 23ff22e:	4802      	ldr	r0, [pc, #8]	; (23ff238 <_Z22__fetch_global_Serial2v+0x3c>)
 23ff230:	b006      	add	sp, #24
 23ff232:	bd10      	pop	{r4, pc}
 23ff234:	1007afd0 	.word	0x1007afd0
 23ff238:	1007afe8 	.word	0x1007afe8
 23ff23c:	023ff14b 	.word	0x023ff14b

023ff240 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ff240:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ff242:	f7ff ffdb 	bl	23ff1fc <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ff246:	4b07      	ldr	r3, [pc, #28]	; (23ff264 <_Z15serialEventRun2v+0x24>)
 23ff248:	4604      	mov	r4, r0
 23ff24a:	b153      	cbz	r3, 23ff262 <_Z15serialEventRun2v+0x22>
 23ff24c:	f7ff fa02 	bl	23fe654 <_ZN11USARTSerial9isEnabledEv>
 23ff250:	b138      	cbz	r0, 23ff262 <_Z15serialEventRun2v+0x22>
 23ff252:	6823      	ldr	r3, [r4, #0]
 23ff254:	4620      	mov	r0, r4
 23ff256:	691b      	ldr	r3, [r3, #16]
 23ff258:	4798      	blx	r3
 23ff25a:	2800      	cmp	r0, #0
 23ff25c:	dd01      	ble.n	23ff262 <_Z15serialEventRun2v+0x22>
        handler();
 23ff25e:	e000      	b.n	23ff262 <_Z15serialEventRun2v+0x22>
 23ff260:	bf00      	nop
}
 23ff262:	bd10      	pop	{r4, pc}
 23ff264:	00000000 	.word	0x00000000

023ff268 <_ZnwjRKSt9nothrow_t>:
 23ff268:	f7fa bcc3 	b.w	23f9bf2 <_Znwj>

023ff26c <_ZnajRKSt9nothrow_t>:
 23ff26c:	f7fa bcc3 	b.w	23f9bf6 <_Znaj>

023ff270 <_ZSt25__throw_bad_function_callv>:
 23ff270:	b508      	push	{r3, lr}
 23ff272:	f7fb ff11 	bl	23fb098 <abort>

023ff276 <atexit>:
 23ff276:	2300      	movs	r3, #0
 23ff278:	4601      	mov	r1, r0
 23ff27a:	461a      	mov	r2, r3
 23ff27c:	4618      	mov	r0, r3
 23ff27e:	f7fa bccb 	b.w	23f9c18 <__register_exitproc>
	...

023ff284 <isprint>:
 23ff284:	4b02      	ldr	r3, [pc, #8]	; (23ff290 <isprint+0xc>)
 23ff286:	4418      	add	r0, r3
 23ff288:	7840      	ldrb	r0, [r0, #1]
 23ff28a:	f000 0097 	and.w	r0, r0, #151	; 0x97
 23ff28e:	4770      	bx	lr
 23ff290:	023ffec5 	.word	0x023ffec5

023ff294 <memcpy>:
 23ff294:	440a      	add	r2, r1
 23ff296:	1e43      	subs	r3, r0, #1
 23ff298:	4291      	cmp	r1, r2
 23ff29a:	d100      	bne.n	23ff29e <memcpy+0xa>
 23ff29c:	4770      	bx	lr
 23ff29e:	b510      	push	{r4, lr}
 23ff2a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ff2a4:	4291      	cmp	r1, r2
 23ff2a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ff2aa:	d1f9      	bne.n	23ff2a0 <memcpy+0xc>
 23ff2ac:	bd10      	pop	{r4, pc}

023ff2ae <memmove>:
 23ff2ae:	4288      	cmp	r0, r1
 23ff2b0:	b510      	push	{r4, lr}
 23ff2b2:	eb01 0402 	add.w	r4, r1, r2
 23ff2b6:	d902      	bls.n	23ff2be <memmove+0x10>
 23ff2b8:	4284      	cmp	r4, r0
 23ff2ba:	4623      	mov	r3, r4
 23ff2bc:	d807      	bhi.n	23ff2ce <memmove+0x20>
 23ff2be:	1e43      	subs	r3, r0, #1
 23ff2c0:	42a1      	cmp	r1, r4
 23ff2c2:	d008      	beq.n	23ff2d6 <memmove+0x28>
 23ff2c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff2c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 23ff2cc:	e7f8      	b.n	23ff2c0 <memmove+0x12>
 23ff2ce:	4402      	add	r2, r0
 23ff2d0:	4601      	mov	r1, r0
 23ff2d2:	428a      	cmp	r2, r1
 23ff2d4:	d100      	bne.n	23ff2d8 <memmove+0x2a>
 23ff2d6:	bd10      	pop	{r4, pc}
 23ff2d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 23ff2dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 23ff2e0:	e7f7      	b.n	23ff2d2 <memmove+0x24>

023ff2e2 <memset>:
 23ff2e2:	4402      	add	r2, r0
 23ff2e4:	4603      	mov	r3, r0
 23ff2e6:	4293      	cmp	r3, r2
 23ff2e8:	d100      	bne.n	23ff2ec <memset+0xa>
 23ff2ea:	4770      	bx	lr
 23ff2ec:	f803 1b01 	strb.w	r1, [r3], #1
 23ff2f0:	e7f9      	b.n	23ff2e6 <memset+0x4>
	...

023ff2f4 <srand>:
 23ff2f4:	b538      	push	{r3, r4, r5, lr}
 23ff2f6:	4b10      	ldr	r3, [pc, #64]	; (23ff338 <srand+0x44>)
 23ff2f8:	4604      	mov	r4, r0
 23ff2fa:	681d      	ldr	r5, [r3, #0]
 23ff2fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff2fe:	b9b3      	cbnz	r3, 23ff32e <srand+0x3a>
 23ff300:	2018      	movs	r0, #24
 23ff302:	f7fb fe83 	bl	23fb00c <malloc>
 23ff306:	4602      	mov	r2, r0
 23ff308:	63a8      	str	r0, [r5, #56]	; 0x38
 23ff30a:	b920      	cbnz	r0, 23ff316 <srand+0x22>
 23ff30c:	4b0b      	ldr	r3, [pc, #44]	; (23ff33c <srand+0x48>)
 23ff30e:	2142      	movs	r1, #66	; 0x42
 23ff310:	480b      	ldr	r0, [pc, #44]	; (23ff340 <srand+0x4c>)
 23ff312:	f7fb feeb 	bl	23fb0ec <__assert_func>
 23ff316:	490b      	ldr	r1, [pc, #44]	; (23ff344 <srand+0x50>)
 23ff318:	4b0b      	ldr	r3, [pc, #44]	; (23ff348 <srand+0x54>)
 23ff31a:	e9c0 1300 	strd	r1, r3, [r0]
 23ff31e:	4b0b      	ldr	r3, [pc, #44]	; (23ff34c <srand+0x58>)
 23ff320:	2100      	movs	r1, #0
 23ff322:	6083      	str	r3, [r0, #8]
 23ff324:	230b      	movs	r3, #11
 23ff326:	8183      	strh	r3, [r0, #12]
 23ff328:	2001      	movs	r0, #1
 23ff32a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ff32e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ff330:	2200      	movs	r2, #0
 23ff332:	611c      	str	r4, [r3, #16]
 23ff334:	615a      	str	r2, [r3, #20]
 23ff336:	bd38      	pop	{r3, r4, r5, pc}
 23ff338:	1007ae08 	.word	0x1007ae08
 23ff33c:	023ffe55 	.word	0x023ffe55
 23ff340:	023ffe6c 	.word	0x023ffe6c
 23ff344:	abcd330e 	.word	0xabcd330e
 23ff348:	e66d1234 	.word	0xe66d1234
 23ff34c:	0005deec 	.word	0x0005deec

023ff350 <strchr>:
 23ff350:	b2c9      	uxtb	r1, r1
 23ff352:	4603      	mov	r3, r0
 23ff354:	f810 2b01 	ldrb.w	r2, [r0], #1
 23ff358:	b11a      	cbz	r2, 23ff362 <strchr+0x12>
 23ff35a:	428a      	cmp	r2, r1
 23ff35c:	d1f9      	bne.n	23ff352 <strchr+0x2>
 23ff35e:	4618      	mov	r0, r3
 23ff360:	4770      	bx	lr
 23ff362:	2900      	cmp	r1, #0
 23ff364:	bf18      	it	ne
 23ff366:	2300      	movne	r3, #0
 23ff368:	e7f9      	b.n	23ff35e <strchr+0xe>

023ff36a <strchrnul>:
 23ff36a:	b510      	push	{r4, lr}
 23ff36c:	4604      	mov	r4, r0
 23ff36e:	f7ff ffef 	bl	23ff350 <strchr>
 23ff372:	b918      	cbnz	r0, 23ff37c <strchrnul+0x12>
 23ff374:	4620      	mov	r0, r4
 23ff376:	f7fa fc17 	bl	23f9ba8 <strlen>
 23ff37a:	4420      	add	r0, r4
 23ff37c:	bd10      	pop	{r4, pc}

023ff37e <strcpy>:
 23ff37e:	4603      	mov	r3, r0
 23ff380:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ff384:	f803 2b01 	strb.w	r2, [r3], #1
 23ff388:	2a00      	cmp	r2, #0
 23ff38a:	d1f9      	bne.n	23ff380 <strcpy+0x2>
 23ff38c:	4770      	bx	lr

023ff38e <strncmp>:
 23ff38e:	b510      	push	{r4, lr}
 23ff390:	b17a      	cbz	r2, 23ff3b2 <strncmp+0x24>
 23ff392:	4603      	mov	r3, r0
 23ff394:	3901      	subs	r1, #1
 23ff396:	1884      	adds	r4, r0, r2
 23ff398:	f813 0b01 	ldrb.w	r0, [r3], #1
 23ff39c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 23ff3a0:	4290      	cmp	r0, r2
 23ff3a2:	d101      	bne.n	23ff3a8 <strncmp+0x1a>
 23ff3a4:	42a3      	cmp	r3, r4
 23ff3a6:	d101      	bne.n	23ff3ac <strncmp+0x1e>
 23ff3a8:	1a80      	subs	r0, r0, r2
 23ff3aa:	bd10      	pop	{r4, pc}
 23ff3ac:	2800      	cmp	r0, #0
 23ff3ae:	d1f3      	bne.n	23ff398 <strncmp+0xa>
 23ff3b0:	e7fa      	b.n	23ff3a8 <strncmp+0x1a>
 23ff3b2:	4610      	mov	r0, r2
 23ff3b4:	e7f9      	b.n	23ff3aa <strncmp+0x1c>
	...

023ff3b8 <strndup>:
 23ff3b8:	4b02      	ldr	r3, [pc, #8]	; (23ff3c4 <strndup+0xc>)
 23ff3ba:	460a      	mov	r2, r1
 23ff3bc:	4601      	mov	r1, r0
 23ff3be:	6818      	ldr	r0, [r3, #0]
 23ff3c0:	f000 b802 	b.w	23ff3c8 <_strndup_r>
 23ff3c4:	1007ae08 	.word	0x1007ae08

023ff3c8 <_strndup_r>:
 23ff3c8:	b570      	push	{r4, r5, r6, lr}
 23ff3ca:	460b      	mov	r3, r1
 23ff3cc:	460d      	mov	r5, r1
 23ff3ce:	440a      	add	r2, r1
 23ff3d0:	4293      	cmp	r3, r2
 23ff3d2:	461c      	mov	r4, r3
 23ff3d4:	d107      	bne.n	23ff3e6 <_strndup_r+0x1e>
 23ff3d6:	1b64      	subs	r4, r4, r5
 23ff3d8:	1c61      	adds	r1, r4, #1
 23ff3da:	f7fb fe6b 	bl	23fb0b4 <_malloc_r>
 23ff3de:	4606      	mov	r6, r0
 23ff3e0:	b930      	cbnz	r0, 23ff3f0 <_strndup_r+0x28>
 23ff3e2:	4630      	mov	r0, r6
 23ff3e4:	bd70      	pop	{r4, r5, r6, pc}
 23ff3e6:	7821      	ldrb	r1, [r4, #0]
 23ff3e8:	3301      	adds	r3, #1
 23ff3ea:	2900      	cmp	r1, #0
 23ff3ec:	d1f0      	bne.n	23ff3d0 <_strndup_r+0x8>
 23ff3ee:	e7f2      	b.n	23ff3d6 <_strndup_r+0xe>
 23ff3f0:	4622      	mov	r2, r4
 23ff3f2:	4629      	mov	r1, r5
 23ff3f4:	f7ff ff4e 	bl	23ff294 <memcpy>
 23ff3f8:	2300      	movs	r3, #0
 23ff3fa:	5533      	strb	r3, [r6, r4]
 23ff3fc:	e7f1      	b.n	23ff3e2 <_strndup_r+0x1a>

023ff3fe <strrchr>:
 23ff3fe:	b538      	push	{r3, r4, r5, lr}
 23ff400:	4603      	mov	r3, r0
 23ff402:	460c      	mov	r4, r1
 23ff404:	b969      	cbnz	r1, 23ff422 <strrchr+0x24>
 23ff406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23ff40a:	f7ff bfa1 	b.w	23ff350 <strchr>
 23ff40e:	1c43      	adds	r3, r0, #1
 23ff410:	4605      	mov	r5, r0
 23ff412:	4621      	mov	r1, r4
 23ff414:	4618      	mov	r0, r3
 23ff416:	f7ff ff9b 	bl	23ff350 <strchr>
 23ff41a:	2800      	cmp	r0, #0
 23ff41c:	d1f7      	bne.n	23ff40e <strrchr+0x10>
 23ff41e:	4628      	mov	r0, r5
 23ff420:	bd38      	pop	{r3, r4, r5, pc}
 23ff422:	2500      	movs	r5, #0
 23ff424:	e7f5      	b.n	23ff412 <strrchr+0x14>
	...

023ff428 <_strtol_l.constprop.0>:
 23ff428:	2b01      	cmp	r3, #1
 23ff42a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23ff42e:	d001      	beq.n	23ff434 <_strtol_l.constprop.0+0xc>
 23ff430:	2b24      	cmp	r3, #36	; 0x24
 23ff432:	d906      	bls.n	23ff442 <_strtol_l.constprop.0+0x1a>
 23ff434:	f7fb fe4c 	bl	23fb0d0 <__errno>
 23ff438:	2316      	movs	r3, #22
 23ff43a:	6003      	str	r3, [r0, #0]
 23ff43c:	2000      	movs	r0, #0
 23ff43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 23ff442:	460d      	mov	r5, r1
 23ff444:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 23ff528 <_strtol_l.constprop.0+0x100>
 23ff448:	462e      	mov	r6, r5
 23ff44a:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff44e:	f814 700c 	ldrb.w	r7, [r4, ip]
 23ff452:	f017 0708 	ands.w	r7, r7, #8
 23ff456:	d1f7      	bne.n	23ff448 <_strtol_l.constprop.0+0x20>
 23ff458:	2c2d      	cmp	r4, #45	; 0x2d
 23ff45a:	d132      	bne.n	23ff4c2 <_strtol_l.constprop.0+0x9a>
 23ff45c:	782c      	ldrb	r4, [r5, #0]
 23ff45e:	2701      	movs	r7, #1
 23ff460:	1cb5      	adds	r5, r6, #2
 23ff462:	2b00      	cmp	r3, #0
 23ff464:	d05b      	beq.n	23ff51e <_strtol_l.constprop.0+0xf6>
 23ff466:	2b10      	cmp	r3, #16
 23ff468:	d109      	bne.n	23ff47e <_strtol_l.constprop.0+0x56>
 23ff46a:	2c30      	cmp	r4, #48	; 0x30
 23ff46c:	d107      	bne.n	23ff47e <_strtol_l.constprop.0+0x56>
 23ff46e:	782c      	ldrb	r4, [r5, #0]
 23ff470:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 23ff474:	2c58      	cmp	r4, #88	; 0x58
 23ff476:	d14d      	bne.n	23ff514 <_strtol_l.constprop.0+0xec>
 23ff478:	786c      	ldrb	r4, [r5, #1]
 23ff47a:	2310      	movs	r3, #16
 23ff47c:	3502      	adds	r5, #2
 23ff47e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 23ff482:	f04f 0c00 	mov.w	ip, #0
 23ff486:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 23ff48a:	4666      	mov	r6, ip
 23ff48c:	fbb8 f9f3 	udiv	r9, r8, r3
 23ff490:	fb03 8a19 	mls	sl, r3, r9, r8
 23ff494:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 23ff498:	f1be 0f09 	cmp.w	lr, #9
 23ff49c:	d816      	bhi.n	23ff4cc <_strtol_l.constprop.0+0xa4>
 23ff49e:	4674      	mov	r4, lr
 23ff4a0:	42a3      	cmp	r3, r4
 23ff4a2:	dd24      	ble.n	23ff4ee <_strtol_l.constprop.0+0xc6>
 23ff4a4:	f1bc 0f00 	cmp.w	ip, #0
 23ff4a8:	db1e      	blt.n	23ff4e8 <_strtol_l.constprop.0+0xc0>
 23ff4aa:	45b1      	cmp	r9, r6
 23ff4ac:	d31c      	bcc.n	23ff4e8 <_strtol_l.constprop.0+0xc0>
 23ff4ae:	d101      	bne.n	23ff4b4 <_strtol_l.constprop.0+0x8c>
 23ff4b0:	45a2      	cmp	sl, r4
 23ff4b2:	db19      	blt.n	23ff4e8 <_strtol_l.constprop.0+0xc0>
 23ff4b4:	fb06 4603 	mla	r6, r6, r3, r4
 23ff4b8:	f04f 0c01 	mov.w	ip, #1
 23ff4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 23ff4c0:	e7e8      	b.n	23ff494 <_strtol_l.constprop.0+0x6c>
 23ff4c2:	2c2b      	cmp	r4, #43	; 0x2b
 23ff4c4:	bf04      	itt	eq
 23ff4c6:	782c      	ldrbeq	r4, [r5, #0]
 23ff4c8:	1cb5      	addeq	r5, r6, #2
 23ff4ca:	e7ca      	b.n	23ff462 <_strtol_l.constprop.0+0x3a>
 23ff4cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 23ff4d0:	f1be 0f19 	cmp.w	lr, #25
 23ff4d4:	d801      	bhi.n	23ff4da <_strtol_l.constprop.0+0xb2>
 23ff4d6:	3c37      	subs	r4, #55	; 0x37
 23ff4d8:	e7e2      	b.n	23ff4a0 <_strtol_l.constprop.0+0x78>
 23ff4da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 23ff4de:	f1be 0f19 	cmp.w	lr, #25
 23ff4e2:	d804      	bhi.n	23ff4ee <_strtol_l.constprop.0+0xc6>
 23ff4e4:	3c57      	subs	r4, #87	; 0x57
 23ff4e6:	e7db      	b.n	23ff4a0 <_strtol_l.constprop.0+0x78>
 23ff4e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23ff4ec:	e7e6      	b.n	23ff4bc <_strtol_l.constprop.0+0x94>
 23ff4ee:	f1bc 0f00 	cmp.w	ip, #0
 23ff4f2:	da05      	bge.n	23ff500 <_strtol_l.constprop.0+0xd8>
 23ff4f4:	2322      	movs	r3, #34	; 0x22
 23ff4f6:	4646      	mov	r6, r8
 23ff4f8:	6003      	str	r3, [r0, #0]
 23ff4fa:	b942      	cbnz	r2, 23ff50e <_strtol_l.constprop.0+0xe6>
 23ff4fc:	4630      	mov	r0, r6
 23ff4fe:	e79e      	b.n	23ff43e <_strtol_l.constprop.0+0x16>
 23ff500:	b107      	cbz	r7, 23ff504 <_strtol_l.constprop.0+0xdc>
 23ff502:	4276      	negs	r6, r6
 23ff504:	2a00      	cmp	r2, #0
 23ff506:	d0f9      	beq.n	23ff4fc <_strtol_l.constprop.0+0xd4>
 23ff508:	f1bc 0f00 	cmp.w	ip, #0
 23ff50c:	d000      	beq.n	23ff510 <_strtol_l.constprop.0+0xe8>
 23ff50e:	1e69      	subs	r1, r5, #1
 23ff510:	6011      	str	r1, [r2, #0]
 23ff512:	e7f3      	b.n	23ff4fc <_strtol_l.constprop.0+0xd4>
 23ff514:	2430      	movs	r4, #48	; 0x30
 23ff516:	2b00      	cmp	r3, #0
 23ff518:	d1b1      	bne.n	23ff47e <_strtol_l.constprop.0+0x56>
 23ff51a:	2308      	movs	r3, #8
 23ff51c:	e7af      	b.n	23ff47e <_strtol_l.constprop.0+0x56>
 23ff51e:	2c30      	cmp	r4, #48	; 0x30
 23ff520:	d0a5      	beq.n	23ff46e <_strtol_l.constprop.0+0x46>
 23ff522:	230a      	movs	r3, #10
 23ff524:	e7ab      	b.n	23ff47e <_strtol_l.constprop.0+0x56>
 23ff526:	bf00      	nop
 23ff528:	023ffec6 	.word	0x023ffec6

023ff52c <strtol>:
 23ff52c:	4613      	mov	r3, r2
 23ff52e:	460a      	mov	r2, r1
 23ff530:	4601      	mov	r1, r0
 23ff532:	4802      	ldr	r0, [pc, #8]	; (23ff53c <strtol+0x10>)
 23ff534:	6800      	ldr	r0, [r0, #0]
 23ff536:	f7ff bf77 	b.w	23ff428 <_strtol_l.constprop.0>
 23ff53a:	bf00      	nop
 23ff53c:	1007ae08 	.word	0x1007ae08

023ff540 <dynalib_user>:
 23ff540:	023f9bb9 023f9be1 023f9be5 00000000     ..?...?...?.....
 23ff550:	6c6c6143 206e6f20 65727570 72697620     Call on pure vir
 23ff560:	6c617574 73734100 69747265 61466e6f     tual.AssertionFa
 23ff570:	72756c69 72732065 26262063 63727320     ilure src && src
 23ff580:	61633e2d 61626c6c 43006b63 69666e6f     ->callback.Confi
 23ff590:	69727567 5020676e 7265776f 646f4d20     guring Power Mod
 23ff5a0:	00656c75 50746573 7265776f 666e6f43     ule.setPowerConf
 23ff5b0:	72756769 6f697461 64253d6e 74655300     iguration=%d.Set
 23ff5c0:	676e6974 5f4d5020 47414c46 74614200     ting PM_FLAG.Bat
 23ff5d0:	79726574 61747320 203a6574 46007325     tery state: %s.F
 23ff5e0:	206c6961 63206f74 656e6e6f 202c7463     ail to connect, 
 23ff5f0:	6e6e6f63 69746365 74206e6f 6f656d69     connection timeo
 23ff600:	46007475 206c6961 63206f74 656e6e6f     ut.Fail to conne
 23ff610:	64207463 74206575 6142206f 72657474     ct due to Batter
 23ff620:	68632079 65677261 6625203a 74614200     y charge: %f.Bat
 23ff630:	79726574 61686320 20656772 42003a25     tery charge %:.B
 23ff640:	65747461 73207972 65746174 6f50003a     attery state:.Po
 23ff650:	20726577 72756f73 003a6563 65776f50     wer source:.Powe
 23ff660:	00646572 65656c53 75700070 73696c62     red.Sleep.publis
 23ff670:	676e6968 00732520 6c627570 20687369     hing %s.publish 
 23ff680:	63637573 65646565 75700064 73696c62     succeeded.publis
 23ff690:	61662068 64656c69 72726520 253d726f     h failed error=%
 23ff6a0:	6f630064 63656e6e 20646574 74206f74     d.connected to t
 23ff6b0:	63206568 64756f6c 206e6920 20756c25     he cloud in %lu 
 23ff6c0:	6600736d 656c6961 6f742064 6e6f6320     ms.failed to con
 23ff6d0:	7463656e 6f67202c 20676e69 73206f74     nect, going to s
 23ff6e0:	7065656c 69614600 6f74206c 62757020     leep.Fail to pub
 23ff6f0:	6873696c 65756420 206f7420 74746142     lish due to Batt
 23ff700:	20797265 72616863 203a6567 77006625     ery charge: %f.w
 23ff710:	69746961 2520676e 6d20756c 65622073     aiting %lu ms be
 23ff720:	65726f66 656c7320 6e697065 69660067     fore sleeping.fi
 23ff730:	61776d72 75206572 74616470 65642065     rmware update de
 23ff740:	74636574 67006465 676e696f 206f7420     tected.going to 
 23ff750:	65656c73 6f662070 6c252072 65732064     sleep for %ld se
 23ff760:	646e6f63 69660073 61776d72 75206572     conds.firmware u
 23ff770:	74616470 6f632065 656c706d 00646574     pdate completed.
 23ff780:	6d726966 65726177 64707520 20657461     firmware update 
 23ff790:	656d6974 756f2064 00000074              timed out...

023ff79c <_ZTVN5spark10LogHandlerE>:
	...
 23ff7ac:	023f9c01 023f9c1b                       ..?...?.

023ff7b4 <_ZTVN5spark17Serial1LogHandlerE>:
	...
 23ff7bc:	023f9d05 023f9d39 023fda3d 023fdbe5     ..?.9.?.=.?...?.

023ff7cc <_ZNSt8__detail9__variant12__gen_vtableIvOZNS0_16_Variant_storageILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS5_7VariantENS7_16DefaultAllocatorEEENS5_3MapIS4_S9_St4lessIS4_EEEEE8_M_resetEvEUlOT_E_JRSt7variantIJS3_bijxydS4_S6_SB_SF_EEEE9_S_vtableE>:
 23ff7cc:	023f9c39 023f9c3b 023f9c3d 023f9c3f     9.?.;.?.=.?.?.?.
 23ff7dc:	023f9c41 023f9c43 023f9c45 023f9c75     A.?.C.?.E.?.u.?.
 23ff7ec:	023f9c6f 023fa313 023fa2e5 6e6b6e75     o.?...?...?.unkn
 23ff7fc:	006e776f 006e6976 20627375 74736f68     own.vin.usb host
 23ff80c:	62737500 61646120 72657470 62737500     .usb adapter.usb
 23ff81c:	67746f20 74616200 79726574 746f6e00      otg.battery.not
 23ff82c:	61686320 6e696772 68630067 65677261      charging.charge
 23ff83c:	69640064 61686373 6e696772 61660067     d.discharging.fa
 23ff84c:	00746c75 63736964 656e6e6f 64657463     ult.disconnected
 23ff85c:	00000000                                ....

023ff860 <_ZL12powerSources>:
 23ff860:	023ff7f8 023ff800 023ff804 023ff80d     ..?...?...?...?.
 23ff870:	023ff819 023ff821                       ..?.!.?.

023ff878 <_ZL13batteryStates>:
 23ff878:	023ff7f8 023ff829 023ff82d 023ff836     ..?.).?.-.?.6.?.
 23ff888:	023ff83e 023ff84a 023ff850              >.?.J.?.P.?.

023ff894 <_ZZN8particle5toHexEPKvjPcjE5alpha>:
 23ff894:	33323130 37363534 62613938 66656463     0123456789abcdef

023ff8a4 <_ZTVN5spark13CellularClassE>:
	...
 23ff8ac:	023fb35d 023fb353 023fb349 023fb2ff     ].?.S.?.I.?...?.
 23ff8bc:	023fb33d 023fb331 023fddd1 023fddd9     =.?.1.?...?...?.
 23ff8cc:	023fb325 023fb31d 023fb313 023fb309     %.?...?...?...?.
 23ff8dc:	023fdf01 023fde09 023fde11              ..?...?...?.

023ff8e8 <_ZNSt8__detail9__variant12__gen_vtableINS0_20__variant_idx_cookieEOZNS0_17_Move_assign_baseILb0EJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEEaSEOSH_EUlOT_T0_E_JRSt7variantIJS4_bijxydS5_S7_SC_SG_EEEE9_S_vtableE>:
 23ff8e8:	023fb4eb 023fb4f5 023fb80b 023fb7ed     ..?...?...?...?.
 23ff8f8:	023fb7cf 023fb7ad 023fb78b 023fb769     ..?...?...?.i.?.
 23ff908:	023fb72f 023fb6f5 023fb699 023fb63d     /.?...?...?.=.?.

023ff918 <_ZNSt8__detail9__variant12__gen_vtableINS0_20__variant_idx_cookieEOZNSt7variantIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEEE4swapERSH_EUlOT_T0_E_JSI_EE9_S_vtableE>:
 23ff918:	023fb5ed 023fb607 023fb5a1 023fb555     ..?...?...?.U.?.
 23ff928:	023fb509 023fb8e1 023fb885 023fb829     ..?...?...?.).?.
 23ff938:	023fba93 023fba21 023fb9af 023fb93d     ..?.!.?...?.=.?.
 23ff948:	69726977 6f00676e 286e6570 61662029     wiring.open() fa
 23ff958:	64656c69 6425203a 616f6300 65725f70     iled: %d.coap_re
 23ff968:	705f6461 6f6c7961 29286461 69616620     ad_payload() fai
 23ff978:	3a64656c 00642520 64616572 66202928     led: %d.read() f
 23ff988:	656c6961 25203a64 6c630064 2865736f     ailed: %d.close(
 23ff998:	61662029 64656c69 6425203a 616f6300     ) failed: %d.coa
 23ff9a8:	65675f70 61705f74 616f6c79 69735f64     p_get_payload_si
 23ff9b8:	2928657a 69616620 3a64656c 00642520     ze() failed: %d.
 23ff9c8:	73252f45 766e4900 64696c61 65766520     E/%s.Invalid eve
 23ff9d8:	6e20746e 20656d61 676e656c 63006874     nt name length.c
 23ff9e8:	5f70616f 61657263 705f6574 6f6c7961     oap_create_paylo
 23ff9f8:	29286461 69616620 3a64656c 00642520     ad() failed: %d.
 23ffa08:	6e657645 61642074 69206174 6f742073     Event data is to
 23ffa18:	616c206f 00656772 70616f63 6972775f     o large.coap_wri
 23ffa28:	705f6574 6f6c7961 29286461 69616620     te_payload() fai
 23ffa38:	3a64656c 00642520 70616f63 7465735f     led: %d.coap_set
 23ffa48:	7961705f 64616f6c 7a69735f 20292865     _payload_size() 
 23ffa58:	6c696166 203a6465 65006425 646f636e     failed: %d.encod
 23ffa68:	436f5465 28524f42 61662029 64656c69     eToCBOR() failed
 23ffa78:	6425203a 65764500 6920746e 65622073     : %d.Event is be
 23ffa88:	20676e69 746e6573 726c6120 79646165     ing sent already
 23ffa98:	65764500 6e20746e 20656d61 6d207369     .Event name is m
 23ffaa8:	69737369 4c00676e 74696d69 726f6620     issing.Limit for
 23ffab8:	65766520 6420746e 20617461 66206e69      event data in f
 23ffac8:	6867696c 73692074 61657220 64656863     light is reached
 23ffad8:	69614600 2064656c 73206f74 20646e65     .Failed to send 
 23ffae8:	6e657665 25203a74 00000064              event: %d...

023ffaf4 <_ZTVN8particle10CloudEvent4DataE>:
	...
 23ffafc:	023fbc35 023fbc5d                       5.?.].?.

023ffb04 <_ZTVN8particle10CloudEventE>:
	...
 23ffb0c:	023fbf89 023fbfa1 023fbb05 023fc30d     ..?...?...?...?.
 23ffb1c:	023fbd31 023fbe13 023fbe31 023fbb1d     1.?...?.1.?...?.
 23ffb2c:	023fbe0f                                ..?.

023ffb30 <_ZTVN5spark13EthernetClassE>:
	...
 23ffb38:	023fc523 023fc519 023fc50f 023fc505     #.?...?...?...?.
 23ffb48:	023fc4f9 023fc4ed 023fddd1 023fddd9     ..?...?...?...?.
 23ffb58:	023fc4e1 023fc4d9 023fc4cf 023fc4c5     ..?...?...?...?.
 23ffb68:	023fdf01 023fde09 023fde11              ..?...?...?.

023ffb74 <_ZTV9IPAddress>:
	...
 23ffb7c:	023fc56d 023fc55d 023fc55f 00302e30     m.?.].?._.?.0.0.
 23ffb8c:	736c6166 72740065 25006575 6c250075     false.true.%u.%l
 23ffb9c:	2500646c 00756c6c 6e006725 006c6c75     ld.%llu.%g.null.
 23ffbac:	34302575 00000078                       u%04x...

023ffbb4 <_ZNSt8__detail9__variant12__gen_vtableINS0_16__variant_cookieEOZNS0_19__variant_constructIJSt9monostatebijxyd6StringN8particle6BufferEN5spark6VectorINS6_7VariantENS8_16DefaultAllocatorEEENS6_3MapIS5_SA_St4lessIS5_EEEERNS0_15_Copy_ctor_baseILb0EJS4_bijxydS5_S7_SC_SG_EEERKSI_EEvOT0_OT1_EUlOT_E_JRKSt7variantIJS4_bijxydS5_S7_SC_SG_EEEE9_S_vtableE>:
 23ffbb4:	023fcbab 023fcba9 023fcbad 023fcbb5     ..?...?...?...?.
 23ffbc4:	023fcbbd 023fcbe3 023fcbd7 023fcbcb     ..?...?...?...?.
 23ffbd4:	023fcbc5 023fcc19 023fcd01 023fce07     ..?...?...?...?.

023ffbe4 <_ZNSt8__detail9__variant12__gen_vtableINS0_21__deduce_visit_resultIN8particle3MapI6StringNS3_7VariantESt4lessIS5_EEEEEONS6_16ConvertToVisitorIS9_vEEJRKSt7variantIJSt9monostatebijxydS5_NS3_6BufferEN5spark6VectorIS6_NSH_16DefaultAllocatorEEES9_EEEE9_S_vtableE>:
 23ffbe4:	023fcb45 023fcb4f 023fcb59 023fcb63     E.?.O.?.Y.?.c.?.
 23ffbf4:	023fcb6d 023fcb77 023fcb81 023fcb8b     m.?.w.?...?...?.
 23ffc04:	023fcb95 023fcb9f 023fcdf5 64756162     ..?...?...?.baud
 23ffc14:	72655300 006c6169 69726553 00316c61     .Serial.Serial1.
 23ffc24:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 23ffc34:	72656c64 70706100 31302500 00207530     dler.app.%010u .
 23ffc44:	2c00205d 29280020 2000203a 6f63005b     ] ., .(): . [.co
 23ffc54:	3d206564 69250020 74656400 736c6961     de = .%i.details
 23ffc64:	00203d20 6d000a0d 006e6c00 63006e66      = ....m.ln.fn.c
 23ffc74:	0065646f 61746564 00006c69              ode.detail..

023ffc80 <_ZTVN5spark16JSONStreamWriterE>:
	...
 23ffc88:	023fcebd 023fcee3 023fce95 023fc67b     ..?...?...?.{.?.

023ffc98 <_ZTVN5spark16StreamLogHandlerE>:
	...
 23ffca0:	023fd349 023fd361 023fda3d 023fdbe5     I.?.a.?.=.?...?.

023ffcb0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 23ffcb8:	023fd375 023fd389 023fdc1d 023fcea9     u.?...?...?...?.

023ffcc8 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 23ffcd0:	023fcebb 023fcef1 023fd9a1 023fceab     ..?...?...?...?.

023ffce0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 23ffce8:	023fceb9 023fceff 023fd2b1 023fcf21     ..?...?...?.!.?.

023ffcf8 <CSWTCH.163>:
 23ffcf8:	1007af10 1007aec4 1007afac 1007af64     ............d...

023ffd08 <_ZTVN5spark12NetworkClassE>:
	...
 23ffd10:	023fdd91 023fdd9b 023fdda5 023fddaf     ..?...?...?...?.
 23ffd20:	023fddb9 023fddc5 023fddd1 023fddd9     ..?...?...?...?.
 23ffd30:	023fdde1 023fdded 023fddf5 023fddff     ..?...?...?...?.
 23ffd40:	023fdf01 023fde09 023fde11              ..?...?...?.

023ffd4c <_ZTVN8particle18OutputStringStreamE>:
	...
 23ffd54:	023fdf6d 023fdf6f 023fdf29 023fdf7d     m.?.o.?.).?.}.?.
 23ffd64:	74737953 73206d65 7065656c 6e6f6320     System sleep con
 23ffd74:	75676966 69746172 69206e6f 6e692073     figuration is in
 23ffd84:	696c6176 25002e64 6d252d59 5464252d     valid..%Y-%m-%dT
 23ffd94:	253a4825 53253a4d 61007a25 69746373     %H:%M:%S%z.ascti
 23ffda4:	0000656d                                me..

023ffda8 <_ZTV11USARTSerial>:
	...
 23ffdb0:	023fe59d 023fe609 023fe5e1 023fdf41     ..?...?...?.A.?.
 23ffdc0:	023fe5b1 023fe5cd 023fe5bf 023fe5db     ..?...?...?...?.
 23ffdd0:	023fe1f3 023fe59f 023fe5a3              ..?...?...?.

023ffddc <_ZTV9USBSerial>:
	...
 23ffde4:	023fe661 023fe6c9 023fe69f 023fdf41     a.?...?...?.A.?.
 23ffdf4:	023fe691 023fe663 023fe673 023fe6c3     ..?.c.?.s.?...?.
 23ffe04:	023fe1f3 023fe683 023fe65b              ..?...?.[.?.

023ffe10 <_ZTVN5spark9WiFiClassE>:
	...
 23ffe18:	023fee87 023fee7d 023fee73 023fee29     ..?.}.?.s.?.).?.
 23ffe28:	023fee67 023fee5b 023fddd1 023fddd9     g.?.[.?...?...?.
 23ffe38:	023fee4f 023fee47 023fee3d 023fee33     O.?.G.?.=.?.3.?.
 23ffe48:	023fdf01 023fde09 023fde11              ..?...?...?.

023ffe54 <_ZSt7nothrow>:
 23ffe54:	45455200 6d20544e 6f6c6c61 75732063     .REENT malloc su
 23ffe64:	65656363 00646564 706d742f 6e656a2f     cceeded./tmp/jen
 23ffe74:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
 23ffe84:	656e696c 5f38342d 30323032 34323131     line-48_20201124
 23ffe94:	3036315f 30383136 2f393336 2f637273     _1606180639/src/
 23ffea4:	6c77656e 6e2f6269 696c7765 696c2f62     newlib/newlib/li
 23ffeb4:	732f6362 696c6474 61722f62 632e646e     bc/stdlib/rand.c
	...

023ffec5 <_ctype_>:
 23ffec5:	20202000 20202020 28282020 20282828     .         ((((( 
 23ffed5:	20202020 20202020 20202020 20202020                     
 23ffee5:	10108820 10101010 10101010 10101010      ...............
 23ffef5:	04040410 04040404 10040404 10101010     ................
 23fff05:	41411010 41414141 01010101 01010101     ..AAAAAA........
 23fff15:	01010101 01010101 01010101 10101010     ................
 23fff25:	42421010 42424242 02020202 02020202     ..BBBBBB........
 23fff35:	02020202 02020202 02020202 10101010     ................
 23fff45:	00000020 00000000 00000000 00000000      ...............
	...

023fffc6 <link_const_data_end>:
	...

023fffc8 <link_constructors_location>:
 23fffc8:	023fa3fd 	.word	0x023fa3fd
 23fffcc:	023fb235 	.word	0x023fb235
 23fffd0:	023fb369 	.word	0x023fb369
 23fffd4:	023fc4b5 	.word	0x023fc4b5
 23fffd8:	023fc52d 	.word	0x023fc52d
 23fffdc:	023fc541 	.word	0x023fc541
 23fffe0:	023fda2d 	.word	0x023fda2d
 23fffe4:	023fdf15 	.word	0x023fdf15
 23fffe8:	023fe1bd 	.word	0x023fe1bd
 23fffec:	023fe565 	.word	0x023fe565
 23ffff0:	023fe589 	.word	0x023fe589
 23ffff4:	023fee91 	.word	0x023fee91
